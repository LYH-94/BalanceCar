
BalanceCar_StepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009550  08009550  00019550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800998c  0800998c  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009994  08009994  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800999c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000290  08009c2c  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08009c2c  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001516a  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a9  00000000  00000000  0003542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00037ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238d8  00000000  00000000  00039a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eec  00000000  00000000  0005d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56a2  00000000  00000000  000711fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014689e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005690  00000000  00000000  001468f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009538 	.word	0x08009538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	08009538 	.word	0x08009538

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <StepMotorDriver_Iint>:
 */

#include "A4988_Driver.h"

void StepMotorDriver_Iint(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, PA8_DIR_L_Pin, GPIO_PIN_RESET);  // StepMotor direction
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <StepMotorDriver_Iint+0x64>)
 8000f90:	f002 f9d6 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PA9_DIR_R_Pin, GPIO_PIN_SET);  // StepMotor direction
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <StepMotorDriver_Iint+0x64>)
 8000f9c:	f002 f9d0 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB12_ENA_Pin, GPIO_PIN_SET);  // StepMotor output DISABLE
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <StepMotorDriver_Iint+0x68>)
 8000fa8:	f002 f9ca 	bl	8003340 <HAL_GPIO_WritePin>

	switch(MICRO_STEP_RESOLUTION)
	{
	case 16:
		HAL_GPIO_WritePin(GPIOB, PB13_MS1_Pin, GPIO_PIN_SET);  // StepMotor microstep MS1 , HIGH
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <StepMotorDriver_Iint+0x68>)
 8000fb4:	f002 f9c4 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB14_MS2_Pin, GPIO_PIN_SET);  // StepMotor microstep MS2 , HIGH
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <StepMotorDriver_Iint+0x68>)
 8000fc0:	f002 f9be 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB15_MS3_Pin, GPIO_PIN_SET);  // StepMotor microstep MS3 , HIGH
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <StepMotorDriver_Iint+0x68>)
 8000fcc:	f002 f9b8 	bl	8003340 <HAL_GPIO_WritePin>
		//printf("microstep = 16\n");
		break;
 8000fd0:	bf00      	nop
		//printf("microstep = 1\n");
		break;
	}

	//printf("PWM_PSC = %d\n", PWM_PSC);
	__HAL_TIM_SET_PRESCALER(htim, PWM_PSC);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	225f      	movs	r2, #95	; 0x5f
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	00000000 	.word	0x00000000

08000ff0 <StepMotor_Control>:
  * param - htim ： Is the timer
  * param - angular_velocity ： The angular velocity of the motor (unit:degree/sec)
  * return - step
  */
void StepMotor_Control(TIM_HandleTypeDef *htim, double angular_velocity, uint8_t motor)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	ed87 0b00 	vstr	d0, [r7]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	72fb      	strb	r3, [r7, #11]
	if(motor == 1)  // 1=left motor; 0=right motor
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d11e      	bne.n	8001044 <StepMotor_Control+0x54>
	{
		if(angular_velocity < 0)
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001012:	f7ff fd83 	bl	8000b1c <__aeabi_dcmplt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <StepMotor_Control+0x46>
		{
			HAL_GPIO_WritePin(GPIOA, PA8_DIR_L_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	484f      	ldr	r0, [pc, #316]	; (8001160 <StepMotor_Control+0x170>)
 8001024:	f002 f98c 	bl	8003340 <HAL_GPIO_WritePin>
			angular_velocity = -angular_velocity;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	e027      	b.n	8001086 <StepMotor_Control+0x96>
		}
		else
			HAL_GPIO_WritePin(GPIOA, PA8_DIR_L_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103c:	4848      	ldr	r0, [pc, #288]	; (8001160 <StepMotor_Control+0x170>)
 800103e:	f002 f97f 	bl	8003340 <HAL_GPIO_WritePin>
 8001042:	e020      	b.n	8001086 <StepMotor_Control+0x96>
	}
	else if(motor == 0)
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11d      	bne.n	8001086 <StepMotor_Control+0x96>
	{
		if(angular_velocity < 0)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001056:	f7ff fd61 	bl	8000b1c <__aeabi_dcmplt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <StepMotor_Control+0x8a>
		{
			HAL_GPIO_WritePin(GPIOA, PA9_DIR_R_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	483e      	ldr	r0, [pc, #248]	; (8001160 <StepMotor_Control+0x170>)
 8001068:	f002 f96a 	bl	8003340 <HAL_GPIO_WritePin>
			angular_velocity = -angular_velocity;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	e005      	b.n	8001086 <StepMotor_Control+0x96>
		}
		else
			HAL_GPIO_WritePin(GPIOA, PA9_DIR_R_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001080:	4837      	ldr	r0, [pc, #220]	; (8001160 <StepMotor_Control+0x170>)
 8001082:	f002 f95d 	bl	8003340 <HAL_GPIO_WritePin>
	}

	if(angular_velocity < 1.502) angular_velocity = 1.502;
 8001086:	a32e      	add	r3, pc, #184	; (adr r3, 8001140 <StepMotor_Control+0x150>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001090:	f7ff fd44 	bl	8000b1c <__aeabi_dcmplt>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <StepMotor_Control+0xb4>
 800109a:	a329      	add	r3, pc, #164	; (adr r3, 8001140 <StepMotor_Control+0x150>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	e9c7 2300 	strd	r2, r3, [r7]
	if(angular_velocity > 1081.73) angular_velocity = 1081.73;
 80010a4:	a328      	add	r3, pc, #160	; (adr r3, 8001148 <StepMotor_Control+0x158>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ae:	f7ff fd53 	bl	8000b58 <__aeabi_dcmpgt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <StepMotor_Control+0xd2>
 80010b8:	a323      	add	r3, pc, #140	; (adr r3, 8001148 <StepMotor_Control+0x158>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t PWM_ARR = lroundf((PWM_TIMER_CLOCKS/(PWM_PSC+1))/(angular_velocity/(1.8/MICRO_STEP_RESOLUTION)))-1;
 80010c2:	a323      	add	r3, pc, #140	; (adr r3, 8001150 <StepMotor_Control+0x160>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010cc:	f7ff fbde 	bl	800088c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	a120      	add	r1, pc, #128	; (adr r1, 8001158 <StepMotor_Control+0x168>)
 80010d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010da:	f7ff fbd7 	bl	800088c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd7f 	bl	8000be8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	ee00 3a10 	vmov	s0, r3
 80010f0:	f007 fe60 	bl	8008db4 <lroundf>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	82fb      	strh	r3, [r7, #22]
	if(PWM_ARR < 90) PWM_ARR = 90;
 80010fc:	8afb      	ldrh	r3, [r7, #22]
 80010fe:	2b59      	cmp	r3, #89	; 0x59
 8001100:	d801      	bhi.n	8001106 <StepMotor_Control+0x116>
 8001102:	235a      	movs	r3, #90	; 0x5a
 8001104:	82fb      	strh	r3, [r7, #22]
	if(PWM_ARR > 65535) PWM_ARR = 65535;

	//printf("PWM_ARR = %d\n", PWM_ARR);
	__HAL_TIM_SET_AUTORELOAD(htim, PWM_ARR);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	8afa      	ldrh	r2, [r7, #22]
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
 800110e:	8afa      	ldrh	r2, [r7, #22]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (__HAL_TIM_GET_AUTORELOAD(htim) + 1)/2);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0852      	lsrs	r2, r2, #1
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(GPIOB, PB12_ENA_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <StepMotor_Control+0x174>)
 800112c:	f002 f908 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8001130:	2100      	movs	r1, #0
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f003 ff22 	bl	8004f7c <HAL_TIM_PWM_Start_IT>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	26e978d5 	.word	0x26e978d5
 8001144:	3ff80831 	.word	0x3ff80831
 8001148:	851eb852 	.word	0x851eb852
 800114c:	4090e6eb 	.word	0x4090e6eb
 8001150:	cccccccd 	.word	0xcccccccd
 8001154:	3fbccccc 	.word	0x3fbccccc
 8001158:	00000000 	.word	0x00000000
 800115c:	412ab3f0 	.word	0x412ab3f0
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400

08001168 <StepMotor_Stop>:

void StepMotor_Stop(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f004 f818 	bl	80051a8 <HAL_TIM_PWM_Stop_IT>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ffc2 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f001 fd53 	bl	8002cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f983 	bl	800152c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock / 1000);
 8001226:	4bac      	ldr	r3, [pc, #688]	; (80014d8 <main+0x2c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4aac      	ldr	r2, [pc, #688]	; (80014dc <main+0x2c4>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	099b      	lsrs	r3, r3, #6
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffce 	bl	80011d4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 fb2c 	bl	8001894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fb00 	bl	8001840 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001240:	f000 f9e2 	bl	8001608 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001244:	f000 fa0e 	bl	8001664 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001248:	f000 fa82 	bl	8001750 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  StepMotorDriver_Iint(&htim2);
 800124c:	48a4      	ldr	r0, [pc, #656]	; (80014e0 <main+0x2c8>)
 800124e:	f7ff fe97 	bl	8000f80 <StepMotorDriver_Iint>
  StepMotorDriver_Iint(&htim3);
 8001252:	48a4      	ldr	r0, [pc, #656]	; (80014e4 <main+0x2cc>)
 8001254:	f7ff fe94 	bl	8000f80 <StepMotorDriver_Iint>

  if (mpu6050_Init_Correction(&hi2c1, &MPU6050) == 1)
 8001258:	49a3      	ldr	r1, [pc, #652]	; (80014e8 <main+0x2d0>)
 800125a:	48a4      	ldr	r0, [pc, #656]	; (80014ec <main+0x2d4>)
 800125c:	f000 fdfc 	bl	8001e58 <mpu6050_Init_Correction>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	f040 8128 	bne.w	80014b8 <main+0x2a0>
  {
    Error_Handler();
 8001268:	f000 fdf0 	bl	8001e4c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while(count1 == 1)
 800126c:	e124      	b.n	80014b8 <main+0x2a0>
	{
		KalmanFilter_getAngle(&hi2c1, &MPU6050);
 800126e:	499e      	ldr	r1, [pc, #632]	; (80014e8 <main+0x2d0>)
 8001270:	489e      	ldr	r0, [pc, #632]	; (80014ec <main+0x2d4>)
 8001272:	f000 ff5d 	bl	8002130 <KalmanFilter_getAngle>

		error_speed = reference_input_speed + control_law_speed_LFP;
 8001276:	4b9e      	ldr	r3, [pc, #632]	; (80014f0 <main+0x2d8>)
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	4b9d      	ldr	r3, [pc, #628]	; (80014f4 <main+0x2dc>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f823 	bl	80002cc <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	499b      	ldr	r1, [pc, #620]	; (80014f8 <main+0x2e0>)
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
		error_speed_LFP = alpha * error_speed + (1-alpha) * error_speed_LFP;  // Low pass filter
 8001290:	4b9a      	ldr	r3, [pc, #616]	; (80014fc <main+0x2e4>)
 8001292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001296:	4b98      	ldr	r3, [pc, #608]	; (80014f8 <main+0x2e0>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9cc 	bl	8000638 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4614      	mov	r4, r2
 80012a6:	461d      	mov	r5, r3
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <main+0x2e4>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	4993      	ldr	r1, [pc, #588]	; (8001500 <main+0x2e8>)
 80012b4:	f7ff f808 	bl	80002c8 <__aeabi_dsub>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	4b90      	ldr	r3, [pc, #576]	; (8001504 <main+0x2ec>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9b7 	bl	8000638 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe fffb 	bl	80002cc <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	498a      	ldr	r1, [pc, #552]	; (8001504 <main+0x2ec>)
 80012dc:	e9c1 2300 	strd	r2, r3, [r1]
		control_law_angle = PID_speed_controller(error_speed_LFP);
 80012e0:	4b88      	ldr	r3, [pc, #544]	; (8001504 <main+0x2ec>)
 80012e2:	ed93 7b00 	vldr	d7, [r3]
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f000 fc7b 	bl	8001be8 <PID_speed_controller>
 80012f2:	eeb0 7a40 	vmov.f32	s14, s0
 80012f6:	eef0 7a60 	vmov.f32	s15, s1
 80012fa:	4b83      	ldr	r3, [pc, #524]	; (8001508 <main+0x2f0>)
 80012fc:	ed83 7b00 	vstr	d7, [r3]

		error_angle = reference_input_angle - MPU6050.KalmanFilter_AngleX + balance_point;
 8001300:	4b82      	ldr	r3, [pc, #520]	; (800150c <main+0x2f4>)
 8001302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001306:	4b78      	ldr	r3, [pc, #480]	; (80014e8 <main+0x2d0>)
 8001308:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800130c:	f7fe ffdc 	bl	80002c8 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <main+0x2f8>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7fe ffd5 	bl	80002cc <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	497b      	ldr	r1, [pc, #492]	; (8001514 <main+0x2fc>)
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
		control_law_speed = PID_angle_controller(error_angle) + control_law_angle;
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <main+0x2fc>)
 800132e:	ed93 7b00 	vldr	d7, [r3]
 8001332:	eeb0 0a47 	vmov.f32	s0, s14
 8001336:	eef0 0a67 	vmov.f32	s1, s15
 800133a:	f000 fb59 	bl	80019f0 <PID_angle_controller>
 800133e:	ec51 0b10 	vmov	r0, r1, d0
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <main+0x2f0>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7fe ffc0 	bl	80002cc <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4971      	ldr	r1, [pc, #452]	; (8001518 <main+0x300>)
 8001352:	e9c1 2300 	strd	r2, r3, [r1]

		control_law_speed_LFP = beta * control_law_speed + (1-beta) * control_law_speed_LFP;  // Low pass filter
 8001356:	4b71      	ldr	r3, [pc, #452]	; (800151c <main+0x304>)
 8001358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135c:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <main+0x300>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f969 	bl	8000638 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	4b6b      	ldr	r3, [pc, #428]	; (800151c <main+0x304>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	4961      	ldr	r1, [pc, #388]	; (8001500 <main+0x2e8>)
 800137a:	f7fe ffa5 	bl	80002c8 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <main+0x2dc>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f954 	bl	8000638 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4620      	mov	r0, r4
 8001396:	4629      	mov	r1, r5
 8001398:	f7fe ff98 	bl	80002cc <__adddf3>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4954      	ldr	r1, [pc, #336]	; (80014f4 <main+0x2dc>)
 80013a2:	e9c1 2300 	strd	r2, r3, [r1]

		if(control_law_speed_LFP > 1081.73) control_law_speed_LFP = 1081.73;  // Maximum limit
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <main+0x2dc>)
 80013a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ac:	a346      	add	r3, pc, #280	; (adr r3, 80014c8 <main+0x2b0>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff fbd1 	bl	8000b58 <__aeabi_dcmpgt>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <main+0x1b0>
 80013bc:	494d      	ldr	r1, [pc, #308]	; (80014f4 <main+0x2dc>)
 80013be:	a342      	add	r3, pc, #264	; (adr r3, 80014c8 <main+0x2b0>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	e9c1 2300 	strd	r2, r3, [r1]
		if(control_law_speed_LFP < -1081.73) control_law_speed_LFP = -1081.73;
 80013c8:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <main+0x2dc>)
 80013ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ce:	a340      	add	r3, pc, #256	; (adr r3, 80014d0 <main+0x2b8>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff fba2 	bl	8000b1c <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <main+0x1d2>
 80013de:	4945      	ldr	r1, [pc, #276]	; (80014f4 <main+0x2dc>)
 80013e0:	a33b      	add	r3, pc, #236	; (adr r3, 80014d0 <main+0x2b8>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9c1 2300 	strd	r2, r3, [r1]

		printf("KF_AngleX = %f \t, error_angle = %f \t, control_law_speed_LFP = %f\n" \
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <main+0x2d0>)
 80013ec:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <main+0x2fc>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	493f      	ldr	r1, [pc, #252]	; (80014f4 <main+0x2dc>)
 80013f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001400:	e9cd 2300 	strd	r2, r3, [sp]
 8001404:	4622      	mov	r2, r4
 8001406:	462b      	mov	r3, r5
 8001408:	4845      	ldr	r0, [pc, #276]	; (8001520 <main+0x308>)
 800140a:	f005 fc53 	bl	8006cb4 <iprintf>
				, MPU6050.KalmanFilter_AngleX, error_angle, control_law_speed_LFP);

		if(abs((int)error_angle) > 45)
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <main+0x2fc>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbbe 	bl	8000b98 <__aeabi_d2iz>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	bfb8      	it	lt
 8001422:	425b      	neglt	r3, r3
 8001424:	2b2d      	cmp	r3, #45	; 0x2d
 8001426:	dd06      	ble.n	8001436 <main+0x21e>
		{
			StepMotor_Stop(&htim2);
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <main+0x2c8>)
 800142a:	f7ff fe9d 	bl	8001168 <StepMotor_Stop>
			StepMotor_Stop(&htim3);
 800142e:	482d      	ldr	r0, [pc, #180]	; (80014e4 <main+0x2cc>)
 8001430:	f7ff fe9a 	bl	8001168 <StepMotor_Stop>
 8001434:	e038      	b.n	80014a8 <main+0x290>
		}
		else if(abs((int)control_law_speed_LFP) < 1.502)
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <main+0x2dc>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbaa 	bl	8000b98 <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144a:	db10      	blt.n	800146e <main+0x256>
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <main+0x2dc>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb9f 	bl	8000b98 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	dc06      	bgt.n	800146e <main+0x256>
		{
			StepMotor_Stop(&htim2);
 8001460:	481f      	ldr	r0, [pc, #124]	; (80014e0 <main+0x2c8>)
 8001462:	f7ff fe81 	bl	8001168 <StepMotor_Stop>
			StepMotor_Stop(&htim3);
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <main+0x2cc>)
 8001468:	f7ff fe7e 	bl	8001168 <StepMotor_Stop>
 800146c:	e015      	b.n	800149a <main+0x282>
		}
		else
		{
			// control_law_speed_LFP (unit:deg/sec)(>0 = forward; <0 = back), (1=left motor; 0=right motor)
			StepMotor_Control(&htim2, control_law_speed_LFP, 1);
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <main+0x2dc>)
 8001470:	ed93 7b00 	vldr	d7, [r3]
 8001474:	2101      	movs	r1, #1
 8001476:	eeb0 0a47 	vmov.f32	s0, s14
 800147a:	eef0 0a67 	vmov.f32	s1, s15
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <main+0x2c8>)
 8001480:	f7ff fdb6 	bl	8000ff0 <StepMotor_Control>
			StepMotor_Control(&htim3, control_law_speed_LFP, 0);
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <main+0x2dc>)
 8001486:	ed93 7b00 	vldr	d7, [r3]
 800148a:	2100      	movs	r1, #0
 800148c:	eeb0 0a47 	vmov.f32	s0, s14
 8001490:	eef0 0a67 	vmov.f32	s1, s15
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <main+0x2cc>)
 8001496:	f7ff fdab 	bl	8000ff0 <StepMotor_Control>
		}

		while(count1 == 1 && count2 > 2)
 800149a:	e005      	b.n	80014a8 <main+0x290>
		{
			StepMotor_Stop(&htim2);
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <main+0x2c8>)
 800149e:	f7ff fe63 	bl	8001168 <StepMotor_Stop>
			StepMotor_Stop(&htim3);
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <main+0x2cc>)
 80014a4:	f7ff fe60 	bl	8001168 <StepMotor_Stop>
		while(count1 == 1 && count2 > 2)
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <main+0x30c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d103      	bne.n	80014b8 <main+0x2a0>
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <main+0x310>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d8f1      	bhi.n	800149c <main+0x284>
	while(count1 == 1)
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <main+0x30c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	f43f aed6 	beq.w	800126e <main+0x56>
 80014c2:	e7f9      	b.n	80014b8 <main+0x2a0>
 80014c4:	f3af 8000 	nop.w
 80014c8:	851eb852 	.word	0x851eb852
 80014cc:	4090e6eb 	.word	0x4090e6eb
 80014d0:	851eb852 	.word	0x851eb852
 80014d4:	c090e6eb 	.word	0xc090e6eb
 80014d8:	200000b0 	.word	0x200000b0
 80014dc:	10624dd3 	.word	0x10624dd3
 80014e0:	20000468 	.word	0x20000468
 80014e4:	20000420 	.word	0x20000420
 80014e8:	200003b8 	.word	0x200003b8
 80014ec:	20000360 	.word	0x20000360
 80014f0:	200002b8 	.word	0x200002b8
 80014f4:	200002e8 	.word	0x200002e8
 80014f8:	200002c8 	.word	0x200002c8
 80014fc:	20000008 	.word	0x20000008
 8001500:	3ff00000 	.word	0x3ff00000
 8001504:	200002d0 	.word	0x200002d0
 8001508:	200002d8 	.word	0x200002d8
 800150c:	200002b0 	.word	0x200002b0
 8001510:	20000000 	.word	0x20000000
 8001514:	200002c0 	.word	0x200002c0
 8001518:	200002e0 	.word	0x200002e0
 800151c:	20000010 	.word	0x20000010
 8001520:	08009550 	.word	0x08009550
 8001524:	200002ac 	.word	0x200002ac
 8001528:	200002ad 	.word	0x200002ad

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	2234      	movs	r2, #52	; 0x34
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 ff48 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <SystemClock_Config+0xd4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <SystemClock_Config+0xd4>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <SystemClock_Config+0xd4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <SystemClock_Config+0xd8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <SystemClock_Config+0xd8>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <SystemClock_Config+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159c:	2300      	movs	r3, #0
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a0:	2310      	movs	r3, #16
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 f998 	bl	80048f0 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015c6:	f000 fc41 	bl	8001e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 feb6 	bl	8004358 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015f2:	f000 fc2b 	bl	8001e4c <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	; 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <MX_I2C1_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x50>)
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_I2C1_Init+0x58>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_I2C1_Init+0x50>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x50>)
 8001646:	f001 fec7 	bl	80033d8 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 fbfc 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000360 	.word	0x20000360
 800165c:	40005400 	.word	0x40005400
 8001660:	00061a80 	.word	0x00061a80

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_TIM2_Init+0xe8>)
 8001696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM2_Init+0xe8>)
 800169e:	2253      	movs	r2, #83	; 0x53
 80016a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <MX_TIM2_Init+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_TIM2_Init+0xe8>)
 80016aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80016ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_TIM2_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_TIM2_Init+0xe8>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_TIM2_Init+0xe8>)
 80016be:	f003 fbb5 	bl	8004e2c <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016c8:	f000 fbc0 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	4619      	mov	r1, r3
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <MX_TIM2_Init+0xe8>)
 80016da:	f003 fee5 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016e4:	f000 fbb2 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM2_Init+0xe8>)
 80016ea:	f003 fbee 	bl	8004eca <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016f4:	f000 fbaa 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_TIM2_Init+0xe8>)
 8001708:	f004 faa6 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001712:	f000 fb9b 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 800171a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800171e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM2_Init+0xe8>)
 8001730:	f003 fdf8 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800173a:	f000 fb87 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM2_Init+0xe8>)
 8001740:	f001 f8e8 	bl	8002914 <HAL_TIM_MspPostInit>

}
 8001744:	bf00      	nop
 8001746:	3738      	adds	r7, #56	; 0x38
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000468 	.word	0x20000468

08001750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	; 0x38
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_TIM3_Init+0xe8>)
 8001782:	4a2e      	ldr	r2, [pc, #184]	; (800183c <MX_TIM3_Init+0xec>)
 8001784:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_TIM3_Init+0xe8>)
 8001788:	2253      	movs	r2, #83	; 0x53
 800178a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_TIM3_Init+0xe8>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <MX_TIM3_Init+0xe8>)
 8001794:	f241 3287 	movw	r2, #4999	; 0x1387
 8001798:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_TIM3_Init+0xe8>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_TIM3_Init+0xe8>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017a6:	4824      	ldr	r0, [pc, #144]	; (8001838 <MX_TIM3_Init+0xe8>)
 80017a8:	f003 fb40 	bl	8004e2c <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017b2:	f000 fb4b 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c0:	4619      	mov	r1, r3
 80017c2:	481d      	ldr	r0, [pc, #116]	; (8001838 <MX_TIM3_Init+0xe8>)
 80017c4:	f003 fe70 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017ce:	f000 fb3d 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d2:	4819      	ldr	r0, [pc, #100]	; (8001838 <MX_TIM3_Init+0xe8>)
 80017d4:	f003 fb79 	bl	8004eca <HAL_TIM_PWM_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017de:	f000 fb35 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_TIM3_Init+0xe8>)
 80017f2:	f004 fa31 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017fc:	f000 fb26 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001800:	2360      	movs	r3, #96	; 0x60
 8001802:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 8001804:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM3_Init+0xe8>)
 800181a:	f003 fd83 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001824:	f000 fb12 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM3_Init+0xe8>)
 800182a:	f001 f873 	bl	8002914 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000420 	.word	0x20000420
 800183c:	40000400 	.word	0x40000400

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f004 fa6a 	bl	8005d50 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 fae3 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200004b0 	.word	0x200004b0
 8001890:	40004400 	.word	0x40004400

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <MX_GPIO_Init+0x148>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <MX_GPIO_Init+0x148>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b48      	ldr	r3, [pc, #288]	; (80019dc <MX_GPIO_Init+0x148>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <MX_GPIO_Init+0x148>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a43      	ldr	r2, [pc, #268]	; (80019dc <MX_GPIO_Init+0x148>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <MX_GPIO_Init+0x148>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <MX_GPIO_Init+0x148>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <MX_GPIO_Init+0x148>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <MX_GPIO_Init+0x148>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <MX_GPIO_Init+0x148>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a35      	ldr	r2, [pc, #212]	; (80019dc <MX_GPIO_Init+0x148>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_GPIO_Init+0x148>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PA8_DIR_L_Pin|PA9_DIR_R_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001920:	482f      	ldr	r0, [pc, #188]	; (80019e0 <MX_GPIO_Init+0x14c>)
 8001922:	f001 fd0d 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_ENA_Pin|PB13_MS1_Pin|PB14_MS2_Pin|PB15_MS3_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800192c:	482d      	ldr	r0, [pc, #180]	; (80019e4 <MX_GPIO_Init+0x150>)
 800192e:	f001 fd07 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001938:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4827      	ldr	r0, [pc, #156]	; (80019e8 <MX_GPIO_Init+0x154>)
 800194a:	f001 fb65 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800194e:	2320      	movs	r3, #32
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_GPIO_Init+0x14c>)
 8001966:	f001 fb57 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12_ENA_Pin */
  GPIO_InitStruct.Pin = PB12_ENA_Pin;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PB12_ENA_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_GPIO_Init+0x150>)
 8001984:	f001 fb48 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13_MS1_Pin PB14_MS2_Pin PB15_MS3_Pin */
  GPIO_InitStruct.Pin = PB13_MS1_Pin|PB14_MS2_Pin|PB15_MS3_Pin;
 8001988:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4810      	ldr	r0, [pc, #64]	; (80019e4 <MX_GPIO_Init+0x150>)
 80019a2:	f001 fb39 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8_DIR_L_Pin PA9_DIR_R_Pin */
  GPIO_InitStruct.Pin = PA8_DIR_L_Pin|PA9_DIR_R_Pin;
 80019a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4808      	ldr	r0, [pc, #32]	; (80019e0 <MX_GPIO_Init+0x14c>)
 80019c0:	f001 fb2a 	bl	8003018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2028      	movs	r0, #40	; 0x28
 80019ca:	f001 faee 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ce:	2028      	movs	r0, #40	; 0x28
 80019d0:	f001 fb07 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	00000000 	.word	0x00000000

080019f0 <PID_angle_controller>:

/* USER CODE BEGIN 4 */
double PID_angle_controller(double error)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b092      	sub	sp, #72	; 0x48
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	ed87 0b00 	vstr	d0, [r7]
	uint8_t index = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	double P = 0.0, I = 0.0, D = 0.0;
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Kp = 15.0, Ki = 5.0, Kd = 1.5;
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <PID_angle_controller+0x1d8>)
 8001a2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <PID_angle_controller+0x1dc>)
 8001a34:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b64      	ldr	r3, [pc, #400]	; (8001bd0 <PID_angle_controller+0x1e0>)
 8001a3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double u = 0.0;
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	PID_angle_delta_time = (double)(HAL_GetTick() - PID_angle_time) / 1000;
 8001a4e:	f001 f9a1 	bl	8002d94 <HAL_GetTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd75 	bl	8000544 <__aeabi_ui2d>
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <PID_angle_controller+0x1e4>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fc32 	bl	80002c8 <__aeabi_dsub>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <PID_angle_controller+0x1e8>)
 8001a72:	f7fe ff0b 	bl	800088c <__aeabi_ddiv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4958      	ldr	r1, [pc, #352]	; (8001bdc <PID_angle_controller+0x1ec>)
 8001a7c:	e9c1 2300 	strd	r2, r3, [r1]
	PID_angle_time = HAL_GetTick();
 8001a80:	f001 f988 	bl	8002d94 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd5c 	bl	8000544 <__aeabi_ui2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4950      	ldr	r1, [pc, #320]	; (8001bd4 <PID_angle_controller+0x1e4>)
 8001a92:	e9c1 2300 	strd	r2, r3, [r1]

	P = Kp * error;
 8001a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a9e:	f7fe fdcb 	bl	8000638 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if(abs((int)error) > 45)  // Integral separation method
 8001aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aae:	f7ff f873 	bl	8000b98 <__aeabi_d2iz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bfb8      	it	lt
 8001ab8:	425b      	neglt	r3, r3
 8001aba:	2b2d      	cmp	r3, #45	; 0x2d
 8001abc:	dd03      	ble.n	8001ac6 <PID_angle_controller+0xd6>
	{
		index = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ac4:	e020      	b.n	8001b08 <PID_angle_controller+0x118>
	}
	else
	{
		index = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		PID_angle_integral += error * PID_angle_delta_time/1000.0;
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <PID_angle_controller+0x1ec>)
 8001ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ad6:	f7fe fdaf 	bl	8000638 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <PID_angle_controller+0x1e8>)
 8001ae8:	f7fe fed0 	bl	800088c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <PID_angle_controller+0x1f0>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fbe7 	bl	80002cc <__adddf3>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4937      	ldr	r1, [pc, #220]	; (8001be0 <PID_angle_controller+0x1f0>)
 8001b04:	e9c1 2300 	strd	r2, r3, [r1]
	}
	I = Ki * PID_angle_integral;
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <PID_angle_controller+0x1f0>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b12:	f7fe fd91 	bl	8000638 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if(I > 1000) I = 1000;  // Maximum limit I
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <PID_angle_controller+0x1e8>)
 8001b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b28:	f7ff f816 	bl	8000b58 <__aeabi_dcmpgt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <PID_angle_controller+0x14c>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <PID_angle_controller+0x1e8>)
 8001b38:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if(I < -1000) I = -1000;
 8001b3c:	a320      	add	r3, pc, #128	; (adr r3, 8001bc0 <PID_angle_controller+0x1d0>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b46:	f7fe ffe9 	bl	8000b1c <__aeabi_dcmplt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <PID_angle_controller+0x16a>
 8001b50:	a31b      	add	r3, pc, #108	; (adr r3, 8001bc0 <PID_angle_controller+0x1d0>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	D = Kd * MPU6050.Gyro_Y_AngVel;
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <PID_angle_controller+0x1f4>)
 8001b5c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001b60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b64:	f7fe fd68 	bl	8000638 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	u = P + index * I + D;
 8001b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcf5 	bl	8000564 <__aeabi_i2d>
 8001b7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b7e:	f7fe fd5b 	bl	8000638 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b8e:	f7fe fb9d 	bl	80002cc <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b9a:	f7fe fb97 	bl	80002cc <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return u;
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	3748      	adds	r7, #72	; 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	c08f4000 	.word	0xc08f4000
 8001bc8:	402e0000 	.word	0x402e0000
 8001bcc:	40140000 	.word	0x40140000
 8001bd0:	3ff80000 	.word	0x3ff80000
 8001bd4:	20000310 	.word	0x20000310
 8001bd8:	408f4000 	.word	0x408f4000
 8001bdc:	20000318 	.word	0x20000318
 8001be0:	20000320 	.word	0x20000320
 8001be4:	200003b8 	.word	0x200003b8

08001be8 <PID_speed_controller>:

double PID_speed_controller(double error)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b090      	sub	sp, #64	; 0x40
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	ed87 0b00 	vstr	d0, [r7]
	double P = 0.0, I = 0.0, D = 0.0;
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Kp = 1.03, Ki = Kp/200.0, Kd = 0.0;
 8001c16:	a374      	add	r3, pc, #464	; (adr r3, 8001de8 <PID_speed_controller+0x200>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <PID_speed_controller+0x1e8>)
 8001c26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c2a:	f7fe fe2f 	bl	800088c <__aeabi_ddiv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double u = 0.0;
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	PID_speed_delta_time = (double)(HAL_GetTick() - PID_speed_time) / 1000;
 8001c4e:	f001 f8a1 	bl	8002d94 <HAL_GetTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc75 	bl	8000544 <__aeabi_ui2d>
 8001c5a:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <PID_speed_controller+0x1ec>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fb32 	bl	80002c8 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <PID_speed_controller+0x1f0>)
 8001c72:	f7fe fe0b 	bl	800088c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4958      	ldr	r1, [pc, #352]	; (8001ddc <PID_speed_controller+0x1f4>)
 8001c7c:	e9c1 2300 	strd	r2, r3, [r1]
	PID_speed_time = HAL_GetTick();
 8001c80:	f001 f888 	bl	8002d94 <HAL_GetTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc5c 	bl	8000544 <__aeabi_ui2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4950      	ldr	r1, [pc, #320]	; (8001dd4 <PID_speed_controller+0x1ec>)
 8001c92:	e9c1 2300 	strd	r2, r3, [r1]

	P = Kp * error;
 8001c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c9e:	f7fe fccb 	bl	8000638 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	PID_speed_integral += error * PID_speed_delta_time/1000.0;
 8001caa:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <PID_speed_controller+0x1f4>)
 8001cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb4:	f7fe fcc0 	bl	8000638 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <PID_speed_controller+0x1f0>)
 8001cc6:	f7fe fde1 	bl	800088c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <PID_speed_controller+0x1f8>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe faf8 	bl	80002cc <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	493f      	ldr	r1, [pc, #252]	; (8001de0 <PID_speed_controller+0x1f8>)
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
	I = Ki * PID_speed_integral;
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <PID_speed_controller+0x1f8>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf0:	f7fe fca2 	bl	8000638 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if(I > 1000) I = 1000;  // Maximum limit I
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <PID_speed_controller+0x1f0>)
 8001d02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d06:	f7fe ff27 	bl	8000b58 <__aeabi_dcmpgt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <PID_speed_controller+0x132>
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <PID_speed_controller+0x1f0>)
 8001d16:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if(I < -1000) I = -1000;
 8001d1a:	a32b      	add	r3, pc, #172	; (adr r3, 8001dc8 <PID_speed_controller+0x1e0>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d24:	f7fe fefa 	bl	8000b1c <__aeabi_dcmplt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <PID_speed_controller+0x150>
 8001d2e:	a326      	add	r3, pc, #152	; (adr r3, 8001dc8 <PID_speed_controller+0x1e0>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	D = Kd * (error - PID_speed_error_pre)/(PID_speed_delta_time/1000.0);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <PID_speed_controller+0x1fc>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d42:	f7fe fac1 	bl	80002c8 <__aeabi_dsub>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d52:	f7fe fc71 	bl	8000638 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <PID_speed_controller+0x1f4>)
 8001d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <PID_speed_controller+0x1f0>)
 8001d6a:	f7fe fd8f 	bl	800088c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fd89 	bl	800088c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	PID_speed_error_pre = error;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <PID_speed_controller+0x1fc>)
 8001d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]

	u = P + I + D;
 8001d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d94:	f7fe fa9a 	bl	80002cc <__adddf3>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001da0:	f7fe fa94 	bl	80002cc <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return u;
 8001dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001db4:	eeb0 0a47 	vmov.f32	s0, s14
 8001db8:	eef0 0a67 	vmov.f32	s1, s15
 8001dbc:	3740      	adds	r7, #64	; 0x40
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	c08f4000 	.word	0xc08f4000
 8001dd0:	40690000 	.word	0x40690000
 8001dd4:	200002f0 	.word	0x200002f0
 8001dd8:	408f4000 	.word	0x408f4000
 8001ddc:	200002f8 	.word	0x200002f8
 8001de0:	20000300 	.word	0x20000300
 8001de4:	20000308 	.word	0x20000308
 8001de8:	47ae147b 	.word	0x47ae147b
 8001dec:	3ff07ae1 	.word	0x3ff07ae1

08001df0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  if(GPIO_Pin == B1_Pin){
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e00:	d108      	bne.n	8001e14 <HAL_GPIO_EXTI_Callback+0x24>
	  count1 = 1;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_GPIO_EXTI_Callback+0x30>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
	  count2 += 1;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e12:	701a      	strb	r2, [r3, #0]
  }
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	200002ac 	.word	0x200002ac
 8001e24:	200002ad 	.word	0x200002ad

08001e28 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e30:	1d39      	adds	r1, r7, #4
 8001e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e36:	2201      	movs	r2, #1
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <__io_putchar+0x20>)
 8001e3a:	f003 ffd6 	bl	8005dea <HAL_UART_Transmit>
return ch;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200004b0 	.word	0x200004b0

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <mpu6050_Init_Correction>:
    .Q_gyro = 0.01f,
    .R_angle = 0.003f
};

uint8_t mpu6050_Init_Correction(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af04      	add	r7, sp, #16
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    uint8_t device_ID = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
    uint8_t data_buffer = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, WHO_AM_I, 1, &device_ID, 1, timeout);
 8001e6a:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <mpu6050_Init_Correction+0x128>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	2301      	movs	r3, #1
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	f107 030f 	add.w	r3, r7, #15
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	2275      	movs	r2, #117	; 0x75
 8001e7e:	21d0      	movs	r1, #208	; 0xd0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 fce7 	bl	8003854 <HAL_I2C_Mem_Read>

    if (device_ID == 104)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b68      	cmp	r3, #104	; 0x68
 8001e8a:	d173      	bne.n	8001f74 <mpu6050_Init_Correction+0x11c>
    {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	483d      	ldr	r0, [pc, #244]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001e90:	f001 fa6f 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001e94:	20c8      	movs	r0, #200	; 0xc8
 8001e96:	f000 ff89 	bl	8002dac <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4839      	ldr	r0, [pc, #228]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001e9e:	f001 fa68 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001ea2:	20c8      	movs	r0, #200	; 0xc8
 8001ea4:	f000 ff82 	bl	8002dac <HAL_Delay>

    	data_buffer = 0x00;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, PWR_MGMT_1, 1, &data_buffer, 1, timeout);  // PWR_MGMT_1 register
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <mpu6050_Init_Correction+0x128>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f107 030e 	add.w	r3, r7, #14
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	226b      	movs	r2, #107	; 0x6b
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f001 fbcc 	bl	8003660 <HAL_I2C_Mem_Write>

        data_buffer = 0x07;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, SMPLRT_DIV, 1, &data_buffer, 1, timeout);  // SMPLRT_DIV register
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <mpu6050_Init_Correction+0x128>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	f107 030e 	add.w	r3, r7, #14
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	2219      	movs	r2, #25
 8001ee0:	21d0      	movs	r1, #208	; 0xd0
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f001 fbbc 	bl	8003660 <HAL_I2C_Mem_Write>

        data_buffer = 0x00;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, ACCEL_CONFIG, 1, &data_buffer, 1, timeout);  // ACCEL_CONFIG register
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <mpu6050_Init_Correction+0x128>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030e 	add.w	r3, r7, #14
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	221c      	movs	r2, #28
 8001f00:	21d0      	movs	r1, #208	; 0xd0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f001 fbac 	bl	8003660 <HAL_I2C_Mem_Write>

        data_buffer = 0x00;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, GYRO_CONFIG, 1, &data_buffer, 1, timeout);  // GYRO_CONFIG register
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <mpu6050_Init_Correction+0x128>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2301      	movs	r3, #1
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	f107 030e 	add.w	r3, r7, #14
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	221b      	movs	r2, #27
 8001f20:	21d0      	movs	r1, #208	; 0xd0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 fb9c 	bl	8003660 <HAL_I2C_Mem_Write>

        mpu6050_GyroCorrection(hi2c, data_struct);
 8001f28:	6839      	ldr	r1, [r7, #0]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f82c 	bl	8001f88 <mpu6050_GyroCorrection>

        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f30:	2120      	movs	r1, #32
 8001f32:	4814      	ldr	r0, [pc, #80]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001f34:	f001 fa1d 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001f38:	20c8      	movs	r0, #200	; 0xc8
 8001f3a:	f000 ff37 	bl	8002dac <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f3e:	2120      	movs	r1, #32
 8001f40:	4810      	ldr	r0, [pc, #64]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001f42:	f001 fa16 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001f46:	20c8      	movs	r0, #200	; 0xc8
 8001f48:	f000 ff30 	bl	8002dac <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001f50:	f001 fa0f 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001f54:	20c8      	movs	r0, #200	; 0xc8
 8001f56:	f000 ff29 	bl	8002dac <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001f5e:	f001 fa08 	bl	8003372 <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001f62:	20c8      	movs	r0, #200	; 0xc8
 8001f64:	f000 ff22 	bl	8002dac <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f68:	2120      	movs	r1, #32
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <mpu6050_Init_Correction+0x12c>)
 8001f6c:	f001 fa01 	bl	8003372 <HAL_GPIO_TogglePin>

        return 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <mpu6050_Init_Correction+0x11e>
    }
    return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000018 	.word	0x20000018
 8001f84:	40020000 	.word	0x40020000

08001f88 <mpu6050_GyroCorrection>:

void mpu6050_GyroCorrection(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[6] = {0};
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	2300      	movs	r3, #0
 8001f98:	81bb      	strh	r3, [r7, #12]
    uint8_t count = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]

	while(count < 50)
 8001f9e:	e085      	b.n	80020ac <mpu6050_GyroCorrection+0x124>
	{
	    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, GYRO_XOUT_H, 1, raw_data, 6, timeout);
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <mpu6050_GyroCorrection+0x190>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	2243      	movs	r2, #67	; 0x43
 8001fb4:	21d0      	movs	r1, #208	; 0xd0
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f001 fc4c 	bl	8003854 <HAL_I2C_Mem_Read>

	    data_struct->Gyro_X_RAW = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8001fbc:	7a3b      	ldrb	r3, [r7, #8]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	7a7b      	ldrb	r3, [r7, #9]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	871a      	strh	r2, [r3, #56]	; 0x38
	    data_struct->Gyro_Y_RAW = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 8001fce:	7abb      	ldrb	r3, [r7, #10]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	875a      	strh	r2, [r3, #58]	; 0x3a
	    data_struct->Gyro_Z_RAW = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8001fe0:	7b3b      	ldrb	r3, [r7, #12]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	7b7b      	ldrb	r3, [r7, #13]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	879a      	strh	r2, [r3, #60]	; 0x3c

	    data_struct->Gyro_X_AngVel = data_struct->Gyro_X_RAW / 131.0;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fab3 	bl	8000564 <__aeabi_i2d>
 8001ffe:	a344      	add	r3, pc, #272	; (adr r3, 8002110 <mpu6050_GyroCorrection+0x188>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fc42 	bl	800088c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	    data_struct->Gyro_Y_AngVel = data_struct->Gyro_Y_RAW / 131.0;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe faa3 	bl	8000564 <__aeabi_i2d>
 800201e:	a33c      	add	r3, pc, #240	; (adr r3, 8002110 <mpu6050_GyroCorrection+0x188>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fc32 	bl	800088c <__aeabi_ddiv>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	    data_struct->Gyro_Z_AngVel = data_struct->Gyro_Z_RAW / 131.0;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa93 	bl	8000564 <__aeabi_i2d>
 800203e:	a334      	add	r3, pc, #208	; (adr r3, 8002110 <mpu6050_GyroCorrection+0x188>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fc22 	bl	800088c <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		Correction_Gyro_X_AngVel += data_struct->Gyro_X_AngVel;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <mpu6050_GyroCorrection+0x194>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe f935 	bl	80002cc <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	492d      	ldr	r1, [pc, #180]	; (800211c <mpu6050_GyroCorrection+0x194>)
 8002068:	e9c1 2300 	strd	r2, r3, [r1]
		Correction_Gyro_Y_AngVel += data_struct->Gyro_Y_AngVel;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <mpu6050_GyroCorrection+0x198>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe f928 	bl	80002cc <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4927      	ldr	r1, [pc, #156]	; (8002120 <mpu6050_GyroCorrection+0x198>)
 8002082:	e9c1 2300 	strd	r2, r3, [r1]
		Correction_Gyro_Z_AngVel += data_struct->Gyro_Z_AngVel;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <mpu6050_GyroCorrection+0x19c>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe f91b 	bl	80002cc <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <mpu6050_GyroCorrection+0x19c>)
 800209c:	e9c1 2300 	strd	r2, r3, [r1]
		count ++;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
		HAL_Delay (100);
 80020a6:	2064      	movs	r0, #100	; 0x64
 80020a8:	f000 fe80 	bl	8002dac <HAL_Delay>
	while(count < 50)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b31      	cmp	r3, #49	; 0x31
 80020b0:	f67f af76 	bls.w	8001fa0 <mpu6050_GyroCorrection+0x18>
		//printf("Correction_Gyro_X_AngVel = %f  ,  ", Correction_Gyro_X_AngVel);
		//printf("Correction_Gyro_Y_AngVel = %f  ,  ", Correction_Gyro_Y_AngVel);
		//printf("Correction_Gyro_Z_AngVel = %f\r\n", Correction_Gyro_Z_AngVel);
	}

	Correction_Gyro_X_AngVel /= 50.0;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <mpu6050_GyroCorrection+0x194>)
 80020b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <mpu6050_GyroCorrection+0x1a0>)
 80020c0:	f7fe fbe4 	bl	800088c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4914      	ldr	r1, [pc, #80]	; (800211c <mpu6050_GyroCorrection+0x194>)
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
	Correction_Gyro_Y_AngVel /= 50.0;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <mpu6050_GyroCorrection+0x198>)
 80020d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <mpu6050_GyroCorrection+0x1a0>)
 80020da:	f7fe fbd7 	bl	800088c <__aeabi_ddiv>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	490f      	ldr	r1, [pc, #60]	; (8002120 <mpu6050_GyroCorrection+0x198>)
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]
	Correction_Gyro_Z_AngVel /= 50.0;
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <mpu6050_GyroCorrection+0x19c>)
 80020ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <mpu6050_GyroCorrection+0x1a0>)
 80020f4:	f7fe fbca 	bl	800088c <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <mpu6050_GyroCorrection+0x19c>)
 80020fe:	e9c1 2300 	strd	r2, r3, [r1]
	//printf("Correction_Gyro_X_AngVel = %f  ,  ", Correction_Gyro_X_AngVel);
	//printf("Correction_Gyro_Y_AngVel = %f  ,  ", Correction_Gyro_Y_AngVel);
	//printf("Correction_Gyro_Z_AngVel = %f\r\n", Correction_Gyro_Z_AngVel);
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40606000 	.word	0x40606000
 8002118:	20000018 	.word	0x20000018
 800211c:	20000338 	.word	0x20000338
 8002120:	20000340 	.word	0x20000340
 8002124:	20000348 	.word	0x20000348
 8002128:	40490000 	.word	0x40490000
 800212c:	00000000 	.word	0x00000000

08002130 <KalmanFilter_getAngle>:
	//printf("Gyro_Y_AngVel = %f  ,  ", data_struct->Gyro_Y_AngVel);
	//printf("Gyro_Z_AngVel = %f\r\n", data_struct->Gyro_Z_AngVel);
}

void KalmanFilter_getAngle(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af04      	add	r7, sp, #16
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[14] = {0};
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	811a      	strh	r2, [r3, #8]
    int16_t temperature_RAW = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	84fb      	strh	r3, [r7, #38]	; 0x26

    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, ACCEL_XOUT_H, 1, raw_data, 14, timeout);
 800214e:	4bb6      	ldr	r3, [pc, #728]	; (8002428 <KalmanFilter_getAngle+0x2f8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	230e      	movs	r3, #14
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	223b      	movs	r2, #59	; 0x3b
 8002162:	21d0      	movs	r1, #208	; 0xd0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 fb75 	bl	8003854 <HAL_I2C_Mem_Read>

    // Accelerometer ============================================================
    data_struct->Accel_X_RAW = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 800216a:	7a3b      	ldrb	r3, [r7, #8]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	7a7b      	ldrb	r3, [r7, #9]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	801a      	strh	r2, [r3, #0]
    data_struct->Accel_Y_RAW = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 800217c:	7abb      	ldrb	r3, [r7, #10]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	805a      	strh	r2, [r3, #2]
    data_struct->Accel_Z_RAW = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	b21a      	sxth	r2, r3
 8002194:	7b7b      	ldrb	r3, [r7, #13]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21a      	sxth	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	809a      	strh	r2, [r3, #4]

    data_struct->Accel_X = data_struct->Accel_X_RAW / 16384.0;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9dc 	bl	8000564 <__aeabi_i2d>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b9e      	ldr	r3, [pc, #632]	; (800242c <KalmanFilter_getAngle+0x2fc>)
 80021b2:	f7fe fb6b 	bl	800088c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    data_struct->Accel_Y = data_struct->Accel_Y_RAW / 16384.0;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9cc 	bl	8000564 <__aeabi_i2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b96      	ldr	r3, [pc, #600]	; (800242c <KalmanFilter_getAngle+0x2fc>)
 80021d2:	f7fe fb5b 	bl	800088c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    data_struct->Accel_Z = data_struct->Accel_Z_RAW / 16384.0;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9bc 	bl	8000564 <__aeabi_i2d>
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b8e      	ldr	r3, [pc, #568]	; (800242c <KalmanFilter_getAngle+0x2fc>)
 80021f2:	f7fe fb4b 	bl	800088c <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

	R = sqrt((data_struct->Accel_X)*(data_struct->Accel_X) + (data_struct->Accel_Y)*(data_struct->Accel_Y) + (data_struct->Accel_Z)*(data_struct->Accel_Z));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800220c:	f7fe fa14 	bl	8000638 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002224:	f7fe fa08 	bl	8000638 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fe f84c 	bl	80002cc <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4614      	mov	r4, r2
 800223a:	461d      	mov	r5, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002248:	f7fe f9f6 	bl	8000638 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fe f83a 	bl	80002cc <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	ec43 2b17 	vmov	d7, r2, r3
 8002260:	eeb0 0a47 	vmov.f32	s0, s14
 8002264:	eef0 0a67 	vmov.f32	s1, s15
 8002268:	f006 fe0a 	bl	8008e80 <sqrt>
 800226c:	eeb0 7a40 	vmov.f32	s14, s0
 8002270:	eef0 7a60 	vmov.f32	s15, s1
 8002274:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <KalmanFilter_getAngle+0x300>)
 8002276:	ed83 7b00 	vstr	d7, [r3]
	data_struct->Accel_X_Angle = (acos((data_struct->Accel_X)/R)*57.2957795131);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002280:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <KalmanFilter_getAngle+0x300>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe fb01 	bl	800088c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ec43 2b17 	vmov	d7, r2, r3
 8002292:	eeb0 0a47 	vmov.f32	s0, s14
 8002296:	eef0 0a67 	vmov.f32	s1, s15
 800229a:	f006 fdb7 	bl	8008e0c <acos>
 800229e:	ec51 0b10 	vmov	r0, r1, d0
 80022a2:	a35d      	add	r3, pc, #372	; (adr r3, 8002418 <KalmanFilter_getAngle+0x2e8>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9c6 	bl	8000638 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data_struct->Accel_Y_Angle = (acos((data_struct->Accel_Y)/R)*57.2957795131);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <KalmanFilter_getAngle+0x300>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe fae3 	bl	800088c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b17 	vmov	d7, r2, r3
 80022ce:	eeb0 0a47 	vmov.f32	s0, s14
 80022d2:	eef0 0a67 	vmov.f32	s1, s15
 80022d6:	f006 fd99 	bl	8008e0c <acos>
 80022da:	ec51 0b10 	vmov	r0, r1, d0
 80022de:	a34e      	add	r3, pc, #312	; (adr r3, 8002418 <KalmanFilter_getAngle+0x2e8>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f9a8 	bl	8000638 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	data_struct->Accel_Z_Angle = (acos((data_struct->Accel_Z)/R)*57.2957795131);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80022f8:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <KalmanFilter_getAngle+0x300>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fe fac5 	bl	800088c <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ec43 2b17 	vmov	d7, r2, r3
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f006 fd7b 	bl	8008e0c <acos>
 8002316:	ec51 0b10 	vmov	r0, r1, d0
 800231a:	a33f      	add	r3, pc, #252	; (adr r3, 8002418 <KalmanFilter_getAngle+0x2e8>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f98a 	bl	8000638 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	//printf("Accel_X_Angle = %f  ,  ", data_struct->Accel_X_Angle);
	//printf("Accel_Y_Angle = %f  ,  ", data_struct->Accel_Y_Angle);
	//printf("Accel_Z_Angle = %f  ,  ", data_struct->Accel_Z_Angle);

	// Temperature ============================================================
	temperature_RAW = (int16_t)(raw_data[6] << 8 | raw_data[7]);
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b21a      	sxth	r2, r3
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	84fb      	strh	r3, [r7, #38]	; 0x26

	// Gyroscope (Angular Velocity Meter) ============================================================
	data_struct->Gyro_X_RAW = (int16_t)(raw_data[8] << 8 | raw_data[9]);
 800233c:	7c3b      	ldrb	r3, [r7, #16]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	7c7b      	ldrb	r3, [r7, #17]
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	871a      	strh	r2, [r3, #56]	; 0x38
	data_struct->Gyro_Y_RAW = (int16_t)(raw_data[10] << 8 | raw_data[11]);
 800234e:	7cbb      	ldrb	r3, [r7, #18]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	b21a      	sxth	r2, r3
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21a      	sxth	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	875a      	strh	r2, [r3, #58]	; 0x3a
	data_struct->Gyro_Z_RAW = (int16_t)(raw_data[12] << 8 | raw_data[13]);
 8002360:	7d3b      	ldrb	r3, [r7, #20]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	7d7b      	ldrb	r3, [r7, #21]
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21a      	sxth	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	879a      	strh	r2, [r3, #60]	; 0x3c

	data_struct->Gyro_X_AngVel = (data_struct->Gyro_X_RAW / 131.0) - Correction_Gyro_X_AngVel;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8f3 	bl	8000564 <__aeabi_i2d>
 800237e:	a328      	add	r3, pc, #160	; (adr r3, 8002420 <KalmanFilter_getAngle+0x2f0>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe fa82 	bl	800088c <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <KalmanFilter_getAngle+0x304>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fd ff97 	bl	80002c8 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	data_struct->Gyro_Y_AngVel = (data_struct->Gyro_Y_RAW / 131.0) - Correction_Gyro_Y_AngVel;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8da 	bl	8000564 <__aeabi_i2d>
 80023b0:	a31b      	add	r3, pc, #108	; (adr r3, 8002420 <KalmanFilter_getAngle+0x2f0>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe fa69 	bl	800088c <__aeabi_ddiv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <KalmanFilter_getAngle+0x308>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd ff7e 	bl	80002c8 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	data_struct->Gyro_Z_AngVel = (data_struct->Gyro_Z_RAW / 131.0) - Correction_Gyro_Z_AngVel;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8c1 	bl	8000564 <__aeabi_i2d>
 80023e2:	a30f      	add	r3, pc, #60	; (adr r3, 8002420 <KalmanFilter_getAngle+0x2f0>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fe fa50 	bl	800088c <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <KalmanFilter_getAngle+0x30c>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fd ff65 	bl	80002c8 <__aeabi_dsub>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	//printf("Gyro_X_AngVel = %f  ,  ", data_struct->Gyro_X_AngVel);
	//printf("Gyro_Y_AngVel = %f  ,  ", data_struct->Gyro_Y_AngVel);
	//printf("Gyro_Z_AngVel = %f\r\n", data_struct->Gyro_Z_AngVel);

    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002408:	f000 fcc4 	bl	8002d94 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <KalmanFilter_getAngle+0x310>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	e016      	b.n	8002444 <KalmanFilter_getAngle+0x314>
 8002416:	bf00      	nop
 8002418:	1a63cbb0 	.word	0x1a63cbb0
 800241c:	404ca5dc 	.word	0x404ca5dc
 8002420:	00000000 	.word	0x00000000
 8002424:	40606000 	.word	0x40606000
 8002428:	20000018 	.word	0x20000018
 800242c:	40d00000 	.word	0x40d00000
 8002430:	20000330 	.word	0x20000330
 8002434:	20000338 	.word	0x20000338
 8002438:	20000340 	.word	0x20000340
 800243c:	20000348 	.word	0x20000348
 8002440:	20000328 	.word	0x20000328
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f87d 	bl	8000544 <__aeabi_ui2d>
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <KalmanFilter_getAngle+0x3bc>)
 8002450:	f7fe fa1c 	bl	800088c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 800245c:	f000 fc9a 	bl	8002d94 <HAL_GetTick>
 8002460:	4603      	mov	r3, r0
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <KalmanFilter_getAngle+0x3c0>)
 8002464:	6013      	str	r3, [r2, #0]
    data_struct->KalmanFilter_AngleX = 90 - KalmanFilter_Algorithm(&KalmanFilter_X, data_struct->Accel_X_Angle, data_struct->Gyro_Y_AngVel, dt);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	ed93 7b08 	vldr	d7, [r3, #32]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002472:	ed97 2b06 	vldr	d2, [r7, #24]
 8002476:	eeb0 1a46 	vmov.f32	s2, s12
 800247a:	eef0 1a66 	vmov.f32	s3, s13
 800247e:	eeb0 0a47 	vmov.f32	s0, s14
 8002482:	eef0 0a67 	vmov.f32	s1, s15
 8002486:	481b      	ldr	r0, [pc, #108]	; (80024f4 <KalmanFilter_getAngle+0x3c4>)
 8002488:	f000 f83a 	bl	8002500 <KalmanFilter_Algorithm>
 800248c:	ec53 2b10 	vmov	r2, r3, d0
 8002490:	f04f 0000 	mov.w	r0, #0
 8002494:	4918      	ldr	r1, [pc, #96]	; (80024f8 <KalmanFilter_getAngle+0x3c8>)
 8002496:	f7fd ff17 	bl	80002c8 <__aeabi_dsub>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    data_struct->KalmanFilter_AngleY = 90 - KalmanFilter_Algorithm(&KalmanFilter_Y, data_struct->Accel_Y_Angle, data_struct->Gyro_X_AngVel, dt);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80024b0:	ed97 2b06 	vldr	d2, [r7, #24]
 80024b4:	eeb0 1a46 	vmov.f32	s2, s12
 80024b8:	eef0 1a66 	vmov.f32	s3, s13
 80024bc:	eeb0 0a47 	vmov.f32	s0, s14
 80024c0:	eef0 0a67 	vmov.f32	s1, s15
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <KalmanFilter_getAngle+0x3cc>)
 80024c6:	f000 f81b 	bl	8002500 <KalmanFilter_Algorithm>
 80024ca:	ec53 2b10 	vmov	r2, r3, d0
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	4909      	ldr	r1, [pc, #36]	; (80024f8 <KalmanFilter_getAngle+0x3c8>)
 80024d4:	f7fd fef8 	bl	80002c8 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    //printf("KalmanFilter_AngleX = %f , ", data_struct->KalmanFilter_AngleX);
    //printf("KalmanFilter_AngleY = %f\n", data_struct->KalmanFilter_AngleY);
}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	408f4000 	.word	0x408f4000
 80024f0:	20000328 	.word	0x20000328
 80024f4:	20000020 	.word	0x20000020
 80024f8:	40568000 	.word	0x40568000
 80024fc:	20000068 	.word	0x20000068

08002500 <KalmanFilter_Algorithm>:

double KalmanFilter_Algorithm(KalmanFilter_HandleTypeDef *KalmanFilter, double Angle, double AngVel, double dt)
{
 8002500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002504:	b08c      	sub	sp, #48	; 0x30
 8002506:	af00      	add	r7, sp, #0
 8002508:	61f8      	str	r0, [r7, #28]
 800250a:	ed87 0b04 	vstr	d0, [r7, #16]
 800250e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002512:	ed87 2b00 	vstr	d2, [r7]
	double Kalman_gain[2];

	// 1
    KalmanFilter->Angle += (AngVel - KalmanFilter->Q_bias) * dt;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002526:	f7fd fecf 	bl	80002c8 <__aeabi_dsub>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002536:	f7fe f87f 	bl	8000638 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fd fec3 	bl	80002cc <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	69f9      	ldr	r1, [r7, #28]
 800254c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // 2
    KalmanFilter->P[0][0] += (KalmanFilter->Q_angle - KalmanFilter->P[0][1] - KalmanFilter->P[1][0] - KalmanFilter->P[1][1] * dt) * dt;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002562:	f7fd feb1 	bl	80002c8 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002574:	f7fd fea8 	bl	80002c8 <__aeabi_dsub>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4690      	mov	r8, r2
 800257e:	4699      	mov	r9, r3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800258a:	f7fe f855 	bl	8000638 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4640      	mov	r0, r8
 8002594:	4649      	mov	r1, r9
 8002596:	f7fd fe97 	bl	80002c8 <__aeabi_dsub>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025a6:	f7fe f847 	bl	8000638 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fe8b 	bl	80002cc <__adddf3>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	69f9      	ldr	r1, [r7, #28]
 80025bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    KalmanFilter->P[0][1] += -(KalmanFilter->P[1][1] * dt);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80025cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d0:	f7fe f832 	bl	8000638 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fd fe74 	bl	80002c8 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	69f9      	ldr	r1, [r7, #28]
 80025e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    KalmanFilter->P[1][0] += -(KalmanFilter->P[1][1] * dt);
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80025f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025fa:	f7fe f81d 	bl	8000638 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fd fe5f 	bl	80002c8 <__aeabi_dsub>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    KalmanFilter->P[1][1] += KalmanFilter->Q_gyro * dt;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002624:	f7fe f808 	bl	8000638 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe4c 	bl	80002cc <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	69f9      	ldr	r1, [r7, #28]
 800263a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    // 3
    Kalman_gain[0] = KalmanFilter->P[0][0] / (KalmanFilter->R_angle + KalmanFilter->P[0][0]);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002650:	f7fd fe3c 	bl	80002cc <__adddf3>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fe f916 	bl	800088c <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Kalman_gain[1] = KalmanFilter->P[1][0] / (KalmanFilter->R_angle + KalmanFilter->P[0][0]);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800267a:	f7fd fe27 	bl	80002cc <__adddf3>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fe f901 	bl	800088c <__aeabi_ddiv>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // 4
    KalmanFilter->Angle += Kalman_gain[0] * (Angle - KalmanFilter->Angle);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a6:	f7fd fe0f 	bl	80002c8 <__aeabi_dsub>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4640      	mov	r0, r8
 80026b0:	4649      	mov	r1, r9
 80026b2:	f7fd ffc1 	bl	8000638 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4620      	mov	r0, r4
 80026bc:	4629      	mov	r1, r5
 80026be:	f7fd fe05 	bl	80002cc <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	69f9      	ldr	r1, [r7, #28]
 80026c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    KalmanFilter->Q_bias += Kalman_gain[1] * (Angle - KalmanFilter->Angle);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80026d2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f7fd fdf2 	bl	80002c8 <__aeabi_dsub>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4640      	mov	r0, r8
 80026ea:	4649      	mov	r1, r9
 80026ec:	f7fd ffa4 	bl	8000638 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4620      	mov	r0, r4
 80026f6:	4629      	mov	r1, r5
 80026f8:	f7fd fde8 	bl	80002cc <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	69f9      	ldr	r1, [r7, #28]
 8002702:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // 5
    KalmanFilter->P[0][0] -= Kalman_gain[0] * KalmanFilter->P[0][0];
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800270c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002716:	f7fd ff8f 	bl	8000638 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4620      	mov	r0, r4
 8002720:	4629      	mov	r1, r5
 8002722:	f7fd fdd1 	bl	80002c8 <__aeabi_dsub>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	69f9      	ldr	r1, [r7, #28]
 800272c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    KalmanFilter->P[0][1] -= Kalman_gain[0] * KalmanFilter->P[0][1];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002736:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002740:	f7fd ff7a 	bl	8000638 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fdbc 	bl	80002c8 <__aeabi_dsub>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	69f9      	ldr	r1, [r7, #28]
 8002756:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    KalmanFilter->P[1][0] -= Kalman_gain[1] * KalmanFilter->P[0][0];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002760:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800276a:	f7fd ff65 	bl	8000638 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4620      	mov	r0, r4
 8002774:	4629      	mov	r1, r5
 8002776:	f7fd fda7 	bl	80002c8 <__aeabi_dsub>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	69f9      	ldr	r1, [r7, #28]
 8002780:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    KalmanFilter->P[1][1] -= Kalman_gain[1] * KalmanFilter->P[0][1];
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800278a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002794:	f7fd ff50 	bl	8000638 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4620      	mov	r0, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	f7fd fd92 	bl	80002c8 <__aeabi_dsub>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	69f9      	ldr	r1, [r7, #28]
 80027aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return KalmanFilter->Angle;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80027b8:	eeb0 0a47 	vmov.f32	s0, s14
 80027bc:	eef0 0a67 	vmov.f32	s1, s15
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080027c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_MspInit+0x4c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_MspInit+0x4c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_MspInit+0x4c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002806:	2007      	movs	r0, #7
 8002808:	f000 fbc4 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_I2C_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12b      	bne.n	8002892 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285a:	2312      	movs	r3, #18
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002866:	2304      	movs	r3, #4
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <HAL_I2C_MspInit+0x8c>)
 8002872:	f000 fbd1 	bl	8003018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 8002880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_I2C_MspInit+0x88>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40005400 	.word	0x40005400
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020400 	.word	0x40020400

080028a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028d6:	e012      	b.n	80028fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40000400 	.word	0x40000400

08002914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d11e      	bne.n	8002974 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a21      	ldr	r2, [pc, #132]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800295a:	2302      	movs	r3, #2
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4816      	ldr	r0, [pc, #88]	; (80029c8 <HAL_TIM_MspPostInit+0xb4>)
 800296e:	f000 fb53 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002972:	e022      	b.n	80029ba <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_TIM_MspPostInit+0xb8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d11d      	bne.n	80029ba <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_TIM_MspPostInit+0xb0>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029aa:	2302      	movs	r3, #2
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <HAL_TIM_MspPostInit+0xb4>)
 80029b6:	f000 fb2f 	bl	8003018 <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40000400 	.word	0x40000400

080029d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_UART_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_UART_MspInit+0x88>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_UART_MspInit+0x88>)
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <HAL_UART_MspInit+0x8c>)
 8002a46:	f000 fae7 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40004400 	.word	0x40004400
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <NMI_Handler+0x4>

08002a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <HardFault_Handler+0x4>

08002a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <MemManage_Handler+0x4>

08002a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aac:	f000 f95e 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ab8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002abc:	f000 fc74 	bl	80033a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	return 1;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_kill>:

int _kill(int pid, int sig)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ade:	f003 fc4d 	bl	800637c <__errno>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2216      	movs	r2, #22
 8002ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_exit>:

void _exit (int status)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffe7 	bl	8002ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b06:	e7fe      	b.n	8002b06 <_exit+0x12>

08002b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e00a      	b.n	8002b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b1a:	f3af 8000 	nop.w
 8002b1e:	4601      	mov	r1, r0
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	b2ca      	uxtb	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf0      	blt.n	8002b1a <_read+0x12>
	}

return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e009      	b.n	8002b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f963 	bl	8001e28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dbf1      	blt.n	8002b54 <_write+0x12>
	}
	return len;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_close>:

int _close(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_isatty>:

int _isatty(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_sbrk+0x5c>)
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <_sbrk+0x60>)
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <_sbrk+0x64>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <_sbrk+0x68>)
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d207      	bcs.n	8002c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c14:	f003 fbb2 	bl	800637c <__errno>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e009      	b.n	8002c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <_sbrk+0x64>)
 8002c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20020000 	.word	0x20020000
 8002c44:	00000400 	.word	0x00000400
 8002c48:	20000350 	.word	0x20000350
 8002c4c:	20000508 	.word	0x20000508

08002c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <SystemInit+0x20>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <SystemInit+0x20>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c7a:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c80:	e002      	b.n	8002c88 <LoopCopyDataInit>

08002c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c86:	3304      	adds	r3, #4

08002c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c8c:	d3f9      	bcc.n	8002c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c90:	4c0b      	ldr	r4, [pc, #44]	; (8002cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c94:	e001      	b.n	8002c9a <LoopFillZerobss>

08002c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c98:	3204      	adds	r2, #4

08002c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c9c:	d3fb      	bcc.n	8002c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9e:	f7ff ffd7 	bl	8002c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ca2:	f003 fb71 	bl	8006388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca6:	f7fe fab7 	bl	8001218 <main>
  bx  lr    
 8002caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb4:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002cb8:	0800999c 	.word	0x0800999c
  ldr r2, =_sbss
 8002cbc:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002cc0:	20000508 	.word	0x20000508

08002cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc4:	e7fe      	b.n	8002cc4 <ADC_IRQHandler>
	...

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_Init+0x40>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_Init+0x40>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_Init+0x40>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f94f 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f000 f808 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfc:	f7ff fd64 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f967 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f92f 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200000b0 	.word	0x200000b0
 8002d64:	200000b8 	.word	0x200000b8
 8002d68:	200000b4 	.word	0x200000b4

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	200000b8 	.word	0x200000b8
 8002d90:	200004f4 	.word	0x200004f4

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200004f4 	.word	0x200004f4

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200000b8 	.word	0x200000b8

08002df4 <__NVIC_SetPriorityGrouping>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e165      	b.n	8003300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 8154 	bne.w	80032fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d005      	beq.n	800306a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003066:	2b02      	cmp	r3, #2
 8003068:	d130      	bne.n	80030cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d017      	beq.n	8003108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d123      	bne.n	800315c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	08da      	lsrs	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3208      	adds	r2, #8
 8003156:	69b9      	ldr	r1, [r7, #24]
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80ae 	beq.w	80032fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_GPIO_Init+0x300>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_GPIO_Init+0x300>)
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_GPIO_Init+0x300>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ba:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_GPIO_Init+0x304>)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_GPIO_Init+0x308>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x21a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4e      	ldr	r2, [pc, #312]	; (8003324 <HAL_GPIO_Init+0x30c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x216>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <HAL_GPIO_Init+0x310>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x212>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_GPIO_Init+0x314>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_GPIO_Init+0x318>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x20a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <HAL_GPIO_Init+0x31c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x206>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_GPIO_Init+0x320>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x202>
 8003216:	2306      	movs	r3, #6
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 800321a:	2307      	movs	r3, #7
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x21c>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x304>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <HAL_GPIO_Init+0x324>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003276:	4a31      	ldr	r2, [pc, #196]	; (800333c <HAL_GPIO_Init+0x324>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_GPIO_Init+0x324>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_GPIO_Init+0x324>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_GPIO_Init+0x324>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_GPIO_Init+0x324>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_GPIO_Init+0x324>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_GPIO_Init+0x324>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f ae96 	bls.w	8003034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40021400 	.word	0x40021400
 8003338:	40021800 	.word	0x40021800
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003384:	887a      	ldrh	r2, [r7, #2]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	041a      	lsls	r2, r3, #16
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43d9      	mvns	r1, r3
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	400b      	ands	r3, r1
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	619a      	str	r2, [r3, #24]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fd12 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e12b      	b.n	8003642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fa0a 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800343c:	f001 f87e 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a81      	ldr	r2, [pc, #516]	; (800364c <HAL_I2C_Init+0x274>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d807      	bhi.n	800345c <HAL_I2C_Init+0x84>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a80      	ldr	r2, [pc, #512]	; (8003650 <HAL_I2C_Init+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	bf94      	ite	ls
 8003454:	2301      	movls	r3, #1
 8003456:	2300      	movhi	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e006      	b.n	800346a <HAL_I2C_Init+0x92>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a7d      	ldr	r2, [pc, #500]	; (8003654 <HAL_I2C_Init+0x27c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0e7      	b.n	8003642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a78      	ldr	r2, [pc, #480]	; (8003658 <HAL_I2C_Init+0x280>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <HAL_I2C_Init+0x274>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d802      	bhi.n	80034ac <HAL_I2C_Init+0xd4>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3301      	adds	r3, #1
 80034aa:	e009      	b.n	80034c0 <HAL_I2C_Init+0xe8>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_I2C_Init+0x284>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	3301      	adds	r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	495c      	ldr	r1, [pc, #368]	; (800364c <HAL_I2C_Init+0x274>)
 80034dc:	428b      	cmp	r3, r1
 80034de:	d819      	bhi.n	8003514 <HAL_I2C_Init+0x13c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034f4:	400b      	ands	r3, r1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_I2C_Init+0x138>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1e59      	subs	r1, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fbb1 f3f3 	udiv	r3, r1, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350e:	e051      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003510:	2304      	movs	r3, #4
 8003512:	e04f      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <HAL_I2C_Init+0x168>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e58      	subs	r0, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	440b      	add	r3, r1
 800352a:	fbb0 f3f3 	udiv	r3, r0, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e012      	b.n	8003566 <HAL_I2C_Init+0x18e>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	0099      	lsls	r1, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	fbb0 f3f3 	udiv	r3, r0, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x196>
 800356a:	2301      	movs	r3, #1
 800356c:	e022      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <HAL_I2C_Init+0x1bc>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1e58      	subs	r0, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	440b      	add	r3, r1
 8003584:	fbb0 f3f3 	udiv	r3, r0, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	e00f      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e58      	subs	r0, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	0099      	lsls	r1, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	6809      	ldr	r1, [r1, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6911      	ldr	r1, [r2, #16]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	000186a0 	.word	0x000186a0
 8003650:	001e847f 	.word	0x001e847f
 8003654:	003d08ff 	.word	0x003d08ff
 8003658:	431bde83 	.word	0x431bde83
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	817b      	strh	r3, [r7, #10]
 8003672:	460b      	mov	r3, r1
 8003674:	813b      	strh	r3, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367a:	f7ff fb8b 	bl	8002d94 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	f040 80d9 	bne.w	8003840 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2319      	movs	r3, #25
 8003694:	2201      	movs	r2, #1
 8003696:	496d      	ldr	r1, [pc, #436]	; (800384c <HAL_I2C_Mem_Write+0x1ec>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fc7f 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0cc      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Mem_Write+0x56>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0c5      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_I2C_Mem_Write+0x1f0>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371e:	88f8      	ldrh	r0, [r7, #6]
 8003720:	893a      	ldrh	r2, [r7, #8]
 8003722:	8979      	ldrh	r1, [r7, #10]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fab6 	bl	8003ca0 <I2C_RequestMemoryWrite>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d052      	beq.n	80037e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e081      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fd00 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b04      	cmp	r3, #4
 8003754:	d107      	bne.n	8003766 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06b      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d11b      	bne.n	80037e0 <HAL_I2C_Mem_Write+0x180>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1aa      	bne.n	800373e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fcec 	bl	80041ca <I2C_WaitOnBTFFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e016      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e000      	b.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000

08003854 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800386e:	f7ff fa91 	bl	8002d94 <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b20      	cmp	r3, #32
 800387e:	f040 8208 	bne.w	8003c92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2319      	movs	r3, #25
 8003888:	2201      	movs	r2, #1
 800388a:	497b      	ldr	r1, [pc, #492]	; (8003a78 <HAL_I2C_Mem_Read+0x224>)
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fb85 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
 800389a:	e1fb      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Mem_Read+0x56>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e1f4      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d007      	beq.n	80038d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2222      	movs	r2, #34	; 0x22
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a5b      	ldr	r2, [pc, #364]	; (8003a7c <HAL_I2C_Mem_Read+0x228>)
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003912:	88f8      	ldrh	r0, [r7, #6]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4603      	mov	r3, r0
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fa52 	bl	8003dcc <I2C_RequestMemoryRead>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e1b0      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d113      	bne.n	8003962 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e184      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	2b01      	cmp	r3, #1
 8003968:	d11b      	bne.n	80039a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e164      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d11b      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	e144      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039f8:	e138      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f200 80f1 	bhi.w	8003be6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d123      	bne.n	8003a54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fc1b 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e139      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a52:	e10b      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d14e      	bne.n	8003afa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	2200      	movs	r2, #0
 8003a64:	4906      	ldr	r1, [pc, #24]	; (8003a80 <HAL_I2C_Mem_Read+0x22c>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa98 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e10e      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
 8003a76:	bf00      	nop
 8003a78:	00100002 	.word	0x00100002
 8003a7c:	ffff0000 	.word	0xffff0000
 8003a80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003af8:	e0b8      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	2200      	movs	r2, #0
 8003b02:	4966      	ldr	r1, [pc, #408]	; (8003c9c <HAL_I2C_Mem_Read+0x448>)
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fa49 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0bf      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	494f      	ldr	r1, [pc, #316]	; (8003c9c <HAL_I2C_Mem_Read+0x448>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fa1b 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e091      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be4:	e042      	b.n	8003c6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fb2e 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e04c      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d118      	bne.n	8003c6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f aec2 	bne.w	80039fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010004 	.word	0x00010004

08003ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f960 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d103      	bne.n	8003cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e05f      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <I2C_RequestMemoryWrite+0x128>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f998 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04c      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa02 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02b      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e021      	b.n	8003dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f9dc 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e005      	b.n	8003dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8c2 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2c:	d103      	bne.n	8003e36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0aa      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	4952      	ldr	r1, [pc, #328]	; (8003f98 <I2C_RequestMemoryRead+0x1cc>)
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f8fa 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e097      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f964 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e076      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	e021      	b.n	8003ef8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb4:	893b      	ldrh	r3, [r7, #8]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f93e 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e050      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	6a39      	ldr	r1, [r7, #32]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f923 	bl	8004148 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d107      	bne.n	8003f20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e035      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f82b 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d103      	bne.n	8003f64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e013      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	4906      	ldr	r1, [pc, #24]	; (8003f98 <I2C_RequestMemoryRead+0x1cc>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f863 	bl	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	00010002 	.word	0x00010002

08003f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fac:	e025      	b.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d021      	beq.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fe feed 	bl	8002d94 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d116      	bne.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e023      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10d      	bne.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	e00c      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d0b6      	beq.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004058:	e051      	b.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d123      	bne.n	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004082:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e046      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d021      	beq.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fe6b 	bl	8002d94 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e020      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d10c      	bne.n	8004122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	43da      	mvns	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e00b      	b.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d18d      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004154:	e02d      	b.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f8ce 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02d      	b.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d021      	beq.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe fe11 	bl	8002d94 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d116      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d1ca      	bne.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d6:	e02d      	b.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f88d 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e02d      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d021      	beq.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fe fdd0 	bl	8002d94 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d1ca      	bne.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004258:	e042      	b.n	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d119      	bne.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e029      	b.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe fd7a 	bl	8002d94 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d1b5      	bne.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d11b      	bne.n	8004348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0cc      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d90c      	bls.n	8004394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0b8      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a58      	ldr	r2, [pc, #352]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c4:	4b53      	ldr	r3, [pc, #332]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b50      	ldr	r3, [pc, #320]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	494d      	ldr	r1, [pc, #308]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d044      	beq.n	8004478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b47      	ldr	r3, [pc, #284]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d119      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e07f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d003      	beq.n	8004416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004412:	2b03      	cmp	r3, #3
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e06f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e067      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4934      	ldr	r1, [pc, #208]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004448:	f7fe fca4 	bl	8002d94 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fe fca0 	bl	8002d94 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e04f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b2b      	ldr	r3, [pc, #172]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d20c      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e032      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4916      	ldr	r1, [pc, #88]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	490e      	ldr	r1, [pc, #56]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044de:	f000 f855 	bl	800458c <HAL_RCC_GetSysClockFreq>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	490a      	ldr	r1, [pc, #40]	; (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
 80044f2:	fa22 f303 	lsr.w	r3, r2, r3
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_RCC_ClockConfig+0x1c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fc04 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40023c00 	.word	0x40023c00
 8004514:	40023800 	.word	0x40023800
 8004518:	08009594 	.word	0x08009594
 800451c:	200000b0 	.word	0x200000b0
 8004520:	200000b4 	.word	0x200000b4

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	200000b0 	.word	0x200000b0

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	080095a4 	.word	0x080095a4

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	080095a4 	.word	0x080095a4

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b088      	sub	sp, #32
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a8:	4bce      	ldr	r3, [pc, #824]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b0c      	cmp	r3, #12
 80045b2:	f200 818d 	bhi.w	80048d0 <HAL_RCC_GetSysClockFreq+0x344>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <HAL_RCC_GetSysClockFreq+0x30>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	080048d1 	.word	0x080048d1
 80045c4:	080048d1 	.word	0x080048d1
 80045c8:	080048d1 	.word	0x080048d1
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	080048d1 	.word	0x080048d1
 80045d4:	080048d1 	.word	0x080048d1
 80045d8:	080048d1 	.word	0x080048d1
 80045dc:	080045fd 	.word	0x080045fd
 80045e0:	080048d1 	.word	0x080048d1
 80045e4:	080048d1 	.word	0x080048d1
 80045e8:	080048d1 	.word	0x080048d1
 80045ec:	08004771 	.word	0x08004771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4bbd      	ldr	r3, [pc, #756]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045f2:	61bb      	str	r3, [r7, #24]
       break;
 80045f4:	e16f      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f6:	4bbd      	ldr	r3, [pc, #756]	; (80048ec <HAL_RCC_GetSysClockFreq+0x360>)
 80045f8:	61bb      	str	r3, [r7, #24]
      break;
 80045fa:	e16c      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045fc:	4bb9      	ldr	r3, [pc, #740]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004606:	4bb7      	ldr	r3, [pc, #732]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d053      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4bb4      	ldr	r3, [pc, #720]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	ea02 0400 	and.w	r4, r2, r0
 800462a:	603c      	str	r4, [r7, #0]
 800462c:	400b      	ands	r3, r1
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	014b      	lsls	r3, r1, #5
 8004642:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004646:	0142      	lsls	r2, r0, #5
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	4623      	mov	r3, r4
 800464e:	1ac0      	subs	r0, r0, r3
 8004650:	462b      	mov	r3, r5
 8004652:	eb61 0103 	sbc.w	r1, r1, r3
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	018b      	lsls	r3, r1, #6
 8004660:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004664:	0182      	lsls	r2, r0, #6
 8004666:	1a12      	subs	r2, r2, r0
 8004668:	eb63 0301 	sbc.w	r3, r3, r1
 800466c:	f04f 0000 	mov.w	r0, #0
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	00d9      	lsls	r1, r3, #3
 8004676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800467a:	00d0      	lsls	r0, r2, #3
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4621      	mov	r1, r4
 8004682:	1852      	adds	r2, r2, r1
 8004684:	4629      	mov	r1, r5
 8004686:	eb43 0101 	adc.w	r1, r3, r1
 800468a:	460b      	mov	r3, r1
 800468c:	f04f 0000 	mov.w	r0, #0
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	0259      	lsls	r1, r3, #9
 8004696:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800469a:	0250      	lsls	r0, r2, #9
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	f7fc faec 	bl	8000c88 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e04c      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b8a      	ldr	r3, [pc, #552]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	ea02 0a00 	and.w	sl, r2, r0
 80046d2:	ea03 0b01 	and.w	fp, r3, r1
 80046d6:	4650      	mov	r0, sl
 80046d8:	4659      	mov	r1, fp
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	014b      	lsls	r3, r1, #5
 80046e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046e8:	0142      	lsls	r2, r0, #5
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	ebb0 000a 	subs.w	r0, r0, sl
 80046f2:	eb61 010b 	sbc.w	r1, r1, fp
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	018b      	lsls	r3, r1, #6
 8004700:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004704:	0182      	lsls	r2, r0, #6
 8004706:	1a12      	subs	r2, r2, r0
 8004708:	eb63 0301 	sbc.w	r3, r3, r1
 800470c:	f04f 0000 	mov.w	r0, #0
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	00d9      	lsls	r1, r3, #3
 8004716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800471a:	00d0      	lsls	r0, r2, #3
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	eb12 020a 	adds.w	r2, r2, sl
 8004724:	eb43 030b 	adc.w	r3, r3, fp
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	0299      	lsls	r1, r3, #10
 8004732:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004736:	0290      	lsls	r0, r2, #10
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f7fc fa9e 	bl	8000c88 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004754:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	61bb      	str	r3, [r7, #24]
      break;
 800476e:	e0b2      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004770:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004778:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477a:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d04d      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b57      	ldr	r3, [pc, #348]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	461a      	mov	r2, r3
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	ea02 0800 	and.w	r8, r2, r0
 800479e:	ea03 0901 	and.w	r9, r3, r1
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	014b      	lsls	r3, r1, #5
 80047b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047b4:	0142      	lsls	r2, r0, #5
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	ebb0 0008 	subs.w	r0, r0, r8
 80047be:	eb61 0109 	sbc.w	r1, r1, r9
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	018b      	lsls	r3, r1, #6
 80047cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047d0:	0182      	lsls	r2, r0, #6
 80047d2:	1a12      	subs	r2, r2, r0
 80047d4:	eb63 0301 	sbc.w	r3, r3, r1
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	00d9      	lsls	r1, r3, #3
 80047e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047e6:	00d0      	lsls	r0, r2, #3
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	eb12 0208 	adds.w	r2, r2, r8
 80047f0:	eb43 0309 	adc.w	r3, r3, r9
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	0259      	lsls	r1, r3, #9
 80047fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004802:	0250      	lsls	r0, r2, #9
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	f7fc fa38 	bl	8000c88 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e04a      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004822:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	461a      	mov	r2, r3
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	ea02 0400 	and.w	r4, r2, r0
 800483a:	ea03 0501 	and.w	r5, r3, r1
 800483e:	4620      	mov	r0, r4
 8004840:	4629      	mov	r1, r5
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	014b      	lsls	r3, r1, #5
 800484c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004850:	0142      	lsls	r2, r0, #5
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	1b00      	subs	r0, r0, r4
 8004858:	eb61 0105 	sbc.w	r1, r1, r5
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	018b      	lsls	r3, r1, #6
 8004866:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800486a:	0182      	lsls	r2, r0, #6
 800486c:	1a12      	subs	r2, r2, r0
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	00d9      	lsls	r1, r3, #3
 800487c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004880:	00d0      	lsls	r0, r2, #3
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	1912      	adds	r2, r2, r4
 8004888:	eb45 0303 	adc.w	r3, r5, r3
 800488c:	f04f 0000 	mov.w	r0, #0
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	0299      	lsls	r1, r3, #10
 8004896:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800489a:	0290      	lsls	r0, r2, #10
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f7fc f9ec 	bl	8000c88 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4613      	mov	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0f1b      	lsrs	r3, r3, #28
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	61bb      	str	r3, [r7, #24]
      break;
 80048ce:	e002      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048d2:	61bb      	str	r3, [r7, #24]
      break;
 80048d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d6:	69bb      	ldr	r3, [r7, #24]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200

080048f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e28d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8083 	beq.w	8004a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004910:	4b94      	ldr	r3, [pc, #592]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b04      	cmp	r3, #4
 800491a:	d019      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800491c:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004924:	2b08      	cmp	r3, #8
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004928:	4b8e      	ldr	r3, [pc, #568]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b8b      	ldr	r3, [pc, #556]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b84      	ldr	r3, [pc, #528]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x124>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e25a      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x90>
 8004972:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0xb4>
 800498a:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a72      	ldr	r2, [pc, #456]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6b      	ldr	r2, [pc, #428]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fe f9e6 	bl	8002d94 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fe f9e2 	bl	8002d94 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e21f      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xdc>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fe f9d2 	bl	8002d94 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fe f9ce 	bl	8002d94 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e20b      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x104>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06f      	beq.n	8004b02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a22:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d105      	bne.n	8004a46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d11c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b44      	ldr	r3, [pc, #272]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1d3      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4937      	ldr	r1, [pc, #220]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	e03a      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d020      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fe f97b 	bl	8002d94 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fe f977 	bl	8002d94 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1b4      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4925      	ldr	r1, [pc, #148]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	e015      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe f95a 	bl	8002d94 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fe f956 	bl	8002d94 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e193      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fe f93a 	bl	8002d94 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fe f936 	bl	8002d94 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e173      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x234>
 8004b42:	e01b      	b.n	8004b7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fe f923 	bl	8002d94 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e00e      	b.n	8004b70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fe f91f 	bl	8002d94 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d907      	bls.n	8004b70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e15c      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	42470000 	.word	0x42470000
 8004b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	4b8a      	ldr	r3, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ea      	bne.n	8004b52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8097 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b83      	ldr	r3, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8004baa:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b79      	ldr	r3, [pc, #484]	; (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b76      	ldr	r3, [pc, #472]	; (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	; (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fe f8df 	bl	8002d94 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fe f8db 	bl	8002d94 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e118      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x31e>
 8004c00:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0c:	e01c      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x340>
 8004c16:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a60      	ldr	r2, [pc, #384]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c1c:	f043 0304 	orr.w	r3, r3, #4
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c30:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a59      	ldr	r2, [pc, #356]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3c:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f023 0304 	bic.w	r3, r3, #4
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fe f8a0 	bl	8002d94 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fe f89c 	bl	8002d94 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e0d7      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCC_OscConfig+0x368>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fe f88a 	bl	8002d94 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fe f886 	bl	8002d94 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0c1      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9a:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ee      	bne.n	8004c84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80ad 	beq.w	8004e1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d060      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d145      	bne.n	8004d62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f85a 	bl	8002d94 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe f856 	bl	8002d94 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e093      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	491b      	ldr	r1, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fe f82b 	bl	8002d94 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fe f827 	bl	8002d94 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e064      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x452>
 8004d60:	e05c      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe f814 	bl	8002d94 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fe f810 	bl	8002d94 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x480>
 8004d8e:	e045      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e040      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da8:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <HAL_RCC_OscConfig+0x538>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d030      	beq.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d129      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d122      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d119      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d10f      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800

08004e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e041      	b.n	8004ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fd28 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f000 fbe4 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e041      	b.n	8004f60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f839 	bl	8004f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 fb95 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <HAL_TIM_PWM_Start_IT+0x28>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	e022      	b.n	8004fea <HAL_TIM_PWM_Start_IT+0x6e>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d109      	bne.n	8004fbe <HAL_TIM_PWM_Start_IT+0x42>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	bf14      	ite	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	2300      	moveq	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e015      	b.n	8004fea <HAL_TIM_PWM_Start_IT+0x6e>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d109      	bne.n	8004fd8 <HAL_TIM_PWM_Start_IT+0x5c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	e008      	b.n	8004fea <HAL_TIM_PWM_Start_IT+0x6e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0c7      	b.n	8005182 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_PWM_Start_IT+0x86>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	e013      	b.n	800502a <HAL_TIM_PWM_Start_IT+0xae>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start_IT+0x96>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	e00b      	b.n	800502a <HAL_TIM_PWM_Start_IT+0xae>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d104      	bne.n	8005022 <HAL_TIM_PWM_Start_IT+0xa6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005020:	e003      	b.n	800502a <HAL_TIM_PWM_Start_IT+0xae>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d841      	bhi.n	80050b4 <HAL_TIM_PWM_Start_IT+0x138>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800506d 	.word	0x0800506d
 800503c:	080050b5 	.word	0x080050b5
 8005040:	080050b5 	.word	0x080050b5
 8005044:	080050b5 	.word	0x080050b5
 8005048:	0800507f 	.word	0x0800507f
 800504c:	080050b5 	.word	0x080050b5
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080050b5 	.word	0x080050b5
 8005058:	08005091 	.word	0x08005091
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050b5 	.word	0x080050b5
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050a3 	.word	0x080050a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0202 	orr.w	r2, r2, #2
 800507a:	60da      	str	r2, [r3, #12]
      break;
 800507c:	e01d      	b.n	80050ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0204 	orr.w	r2, r2, #4
 800508c:	60da      	str	r2, [r3, #12]
      break;
 800508e:	e014      	b.n	80050ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	60da      	str	r2, [r3, #12]
      break;
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0210 	orr.w	r2, r2, #16
 80050b0:	60da      	str	r2, [r3, #12]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d15f      	bne.n	8005180 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd9f 	bl	8005c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2e      	ldr	r2, [pc, #184]	; (800518c <HAL_TIM_PWM_Start_IT+0x210>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_PWM_Start_IT+0x166>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <HAL_TIM_PWM_Start_IT+0x214>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_PWM_Start_IT+0x16a>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_TIM_PWM_Start_IT+0x16c>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <HAL_TIM_PWM_Start_IT+0x210>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d01d      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_TIM_PWM_Start_IT+0x218>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_TIM_PWM_Start_IT+0x220>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_TIM_PWM_Start_IT+0x214>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIM_PWM_Start_IT+0x224>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <HAL_TIM_PWM_Start_IT+0x228>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40010400 	.word	0x40010400
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40001800 	.word	0x40001800

080051a8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d841      	bhi.n	8005240 <HAL_TIM_PWM_Stop_IT+0x98>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005241 	.word	0x08005241
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	08005241 	.word	0x08005241
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005241 	.word	0x08005241
 80051f4:	0800522f 	.word	0x0800522f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0202 	bic.w	r2, r2, #2
 8005206:	60da      	str	r2, [r3, #12]
      break;
 8005208:	e01d      	b.n	8005246 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0204 	bic.w	r2, r2, #4
 8005218:	60da      	str	r2, [r3, #12]
      break;
 800521a:	e014      	b.n	8005246 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0208 	bic.w	r2, r2, #8
 800522a:	60da      	str	r2, [r3, #12]
      break;
 800522c:	e00b      	b.n	8005246 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0210 	bic.w	r2, r2, #16
 800523c:	60da      	str	r2, [r3, #12]
      break;
 800523e:	e002      	b.n	8005246 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	bf00      	nop
  }

  if (status == HAL_OK)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d161      	bne.n	8005310 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fcd9 	bl	8005c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Stop_IT+0xc6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <HAL_TIM_PWM_Stop_IT+0x178>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_Stop_IT+0xca>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d017      	beq.n	80052a8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	f240 4344 	movw	r3, #1092	; 0x444
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10f      	bne.n	80052d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	f240 4344 	movw	r3, #1092	; 0x444
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_PWM_Stop_IT+0x140>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e6:	e013      	b.n	8005310 <HAL_TIM_PWM_Stop_IT+0x168>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d104      	bne.n	80052f8 <HAL_TIM_PWM_Stop_IT+0x150>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f6:	e00b      	b.n	8005310 <HAL_TIM_PWM_Stop_IT+0x168>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_PWM_Stop_IT+0x160>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005306:	e003      	b.n	8005310 <HAL_TIM_PWM_Stop_IT+0x168>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ae      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	f200 809f 	bhi.w	8005490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	08005491 	.word	0x08005491
 8005360:	08005491 	.word	0x08005491
 8005364:	08005491 	.word	0x08005491
 8005368:	080053cd 	.word	0x080053cd
 800536c:	08005491 	.word	0x08005491
 8005370:	08005491 	.word	0x08005491
 8005374:	08005491 	.word	0x08005491
 8005378:	0800540f 	.word	0x0800540f
 800537c:	08005491 	.word	0x08005491
 8005380:	08005491 	.word	0x08005491
 8005384:	08005491 	.word	0x08005491
 8005388:	0800544f 	.word	0x0800544f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f9f0 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
      break;
 80053ca:	e064      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fa40 	bl	8005858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e043      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fa95 	bl	8005944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69d9      	ldr	r1, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
      break;
 800544c:	e023      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fae9 	bl	8005a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
      break;
 800548e:	e002      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0b4      	b.n	800562e <HAL_TIM_ConfigClockSource+0x186>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d03e      	beq.n	800557c <HAL_TIM_ConfigClockSource+0xd4>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	f200 8087 	bhi.w	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	f000 8086 	beq.w	800561a <HAL_TIM_ConfigClockSource+0x172>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	d87f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b70      	cmp	r3, #112	; 0x70
 8005516:	d01a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xa6>
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d87b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d050      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d877      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b50      	cmp	r3, #80	; 0x50
 8005526:	d03c      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005528:	2b50      	cmp	r3, #80	; 0x50
 800552a:	d873      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d058      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d86f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b30      	cmp	r3, #48	; 0x30
 8005536:	d064      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d86b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d060      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d867      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d05a      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	e062      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f000 fb35 	bl	8005bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
      break;
 800557a:	e04f      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6899      	ldr	r1, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f000 fb1e 	bl	8005bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800559e:	609a      	str	r2, [r3, #8]
      break;
 80055a0:	e03c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fa92 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2150      	movs	r1, #80	; 0x50
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 faeb 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e02c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fab1 	bl	8005b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2160      	movs	r1, #96	; 0x60
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fadb 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e01c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 fa72 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 facb 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 8005600:	e00c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f000 fac2 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 8005612:	e003      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	; (800574c <TIM_Base_SetConfig+0x114>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3d      	ldr	r2, [pc, #244]	; (8005750 <TIM_Base_SetConfig+0x118>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <TIM_Base_SetConfig+0x11c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3b      	ldr	r2, [pc, #236]	; (8005758 <TIM_Base_SetConfig+0x120>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3a      	ldr	r2, [pc, #232]	; (800575c <TIM_Base_SetConfig+0x124>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2f      	ldr	r2, [pc, #188]	; (800574c <TIM_Base_SetConfig+0x114>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d027      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <TIM_Base_SetConfig+0x118>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d023      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2b      	ldr	r2, [pc, #172]	; (8005754 <TIM_Base_SetConfig+0x11c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <TIM_Base_SetConfig+0x120>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a29      	ldr	r2, [pc, #164]	; (800575c <TIM_Base_SetConfig+0x124>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d017      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a28      	ldr	r2, [pc, #160]	; (8005760 <TIM_Base_SetConfig+0x128>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a27      	ldr	r2, [pc, #156]	; (8005764 <TIM_Base_SetConfig+0x12c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_Base_SetConfig+0x130>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0x134>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a24      	ldr	r2, [pc, #144]	; (8005770 <TIM_Base_SetConfig+0x138>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a23      	ldr	r2, [pc, #140]	; (8005774 <TIM_Base_SetConfig+0x13c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d108      	bne.n	80056fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <TIM_Base_SetConfig+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <TIM_Base_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d103      	bne.n	8005738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	615a      	str	r2, [r3, #20]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	40001800 	.word	0x40001800
 8005770:	40001c00 	.word	0x40001c00
 8005774:	40002000 	.word	0x40002000

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a20      	ldr	r2, [pc, #128]	; (8005850 <TIM_OC1_SetConfig+0xd8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC1_SetConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <TIM_OC1_SetConfig+0xdc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0308 	bic.w	r3, r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <TIM_OC1_SetConfig+0xd8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC1_SetConfig+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <TIM_OC1_SetConfig+0xdc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40010000 	.word	0x40010000
 8005854:	40010400 	.word	0x40010400

08005858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0210 	bic.w	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0320 	bic.w	r3, r3, #32
 80058a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a22      	ldr	r2, [pc, #136]	; (800593c <TIM_OC2_SetConfig+0xe4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC2_SetConfig+0x68>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a21      	ldr	r2, [pc, #132]	; (8005940 <TIM_OC2_SetConfig+0xe8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10d      	bne.n	80058dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <TIM_OC2_SetConfig+0xe4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC2_SetConfig+0x94>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <TIM_OC2_SetConfig+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d113      	bne.n	8005914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400

08005944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800598c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <TIM_OC3_SetConfig+0xe0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x66>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <TIM_OC3_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC3_SetConfig+0xe0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC3_SetConfig+0x92>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <TIM_OC3_SetConfig+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d113      	bne.n	80059fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <TIM_OC4_SetConfig+0xa4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0x68>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <TIM_OC4_SetConfig+0xa8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0201 	bic.w	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 030a 	bic.w	r3, r3, #10
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b087      	sub	sp, #28
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0210 	bic.w	r2, r3, #16
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	031b      	lsls	r3, r3, #12
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f043 0307 	orr.w	r3, r3, #7
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2201      	movs	r2, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e05a      	b.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d01d      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1a      	ldr	r2, [pc, #104]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d10c      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40010400 	.word	0x40010400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40001800 	.word	0x40001800

08005d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e03f      	b.n	8005de2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc fe2a 	bl	80029d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2224      	movs	r2, #36	; 0x24
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f929 	bl	8005fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b08a      	sub	sp, #40	; 0x28
 8005dee:	af02      	add	r7, sp, #8
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d17c      	bne.n	8005f04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_UART_Transmit+0x2c>
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e075      	b.n	8005f06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_UART_Transmit+0x3e>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e06e      	b.n	8005f06 <HAL_UART_Transmit+0x11c>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2221      	movs	r2, #33	; 0x21
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3e:	f7fc ffa9 	bl	8002d94 <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d108      	bne.n	8005e6c <HAL_UART_Transmit+0x82>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e003      	b.n	8005e74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e7c:	e02a      	b.n	8005ed4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2180      	movs	r1, #128	; 0x80
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f840 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e036      	b.n	8005f06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	e007      	b.n	8005ec6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1cf      	bne.n	8005e7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2140      	movs	r1, #64	; 0x40
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f810 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e006      	b.n	8005f06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e000      	b.n	8005f06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
  }
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b090      	sub	sp, #64	; 0x40
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1e:	e050      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d04c      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	f7fc ff31 	bl	8002d94 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d241      	bcs.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f5e:	637a      	str	r2, [r7, #52]	; 0x34
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	613b      	str	r3, [r7, #16]
   return(result);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f92:	623a      	str	r2, [r7, #32]
 8005f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	69f9      	ldr	r1, [r7, #28]
 8005f98:	6a3a      	ldr	r2, [r7, #32]
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e00f      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d09f      	beq.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3740      	adds	r7, #64	; 0x40
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff0:	b09f      	sub	sp, #124	; 0x7c
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	68d9      	ldr	r1, [r3, #12]
 8006004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	ea40 0301 	orr.w	r3, r0, r1
 800600c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	431a      	orrs	r2, r3
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	431a      	orrs	r2, r3
 800601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4313      	orrs	r3, r2
 8006024:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006030:	f021 010c 	bic.w	r1, r1, #12
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800603a:	430b      	orrs	r3, r1
 800603c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604a:	6999      	ldr	r1, [r3, #24]
 800604c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	ea40 0301 	orr.w	r3, r0, r1
 8006054:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4bc5      	ldr	r3, [pc, #788]	; (8006370 <UART_SetConfig+0x384>)
 800605c:	429a      	cmp	r2, r3
 800605e:	d004      	beq.n	800606a <UART_SetConfig+0x7e>
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4bc3      	ldr	r3, [pc, #780]	; (8006374 <UART_SetConfig+0x388>)
 8006066:	429a      	cmp	r2, r3
 8006068:	d103      	bne.n	8006072 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800606a:	f7fe fa7b 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 800606e:	6778      	str	r0, [r7, #116]	; 0x74
 8006070:	e002      	b.n	8006078 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006072:	f7fe fa63 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006076:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	f040 80b6 	bne.w	80061f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006086:	461c      	mov	r4, r3
 8006088:	f04f 0500 	mov.w	r5, #0
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	1891      	adds	r1, r2, r2
 8006092:	6439      	str	r1, [r7, #64]	; 0x40
 8006094:	415b      	adcs	r3, r3
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
 8006098:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800609c:	1912      	adds	r2, r2, r4
 800609e:	eb45 0303 	adc.w	r3, r5, r3
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f04f 0100 	mov.w	r1, #0
 80060aa:	00d9      	lsls	r1, r3, #3
 80060ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060b0:	00d0      	lsls	r0, r2, #3
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	1911      	adds	r1, r2, r4
 80060b8:	6639      	str	r1, [r7, #96]	; 0x60
 80060ba:	416b      	adcs	r3, r5
 80060bc:	667b      	str	r3, [r7, #100]	; 0x64
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	1891      	adds	r1, r2, r2
 80060ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80060cc:	415b      	adcs	r3, r3
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80060d8:	f7fa fdd6 	bl	8000c88 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4ba5      	ldr	r3, [pc, #660]	; (8006378 <UART_SetConfig+0x38c>)
 80060e2:	fba3 2302 	umull	r2, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	011e      	lsls	r6, r3, #4
 80060ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ec:	461c      	mov	r4, r3
 80060ee:	f04f 0500 	mov.w	r5, #0
 80060f2:	4622      	mov	r2, r4
 80060f4:	462b      	mov	r3, r5
 80060f6:	1891      	adds	r1, r2, r2
 80060f8:	6339      	str	r1, [r7, #48]	; 0x30
 80060fa:	415b      	adcs	r3, r3
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
 80060fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006102:	1912      	adds	r2, r2, r4
 8006104:	eb45 0303 	adc.w	r3, r5, r3
 8006108:	f04f 0000 	mov.w	r0, #0
 800610c:	f04f 0100 	mov.w	r1, #0
 8006110:	00d9      	lsls	r1, r3, #3
 8006112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006116:	00d0      	lsls	r0, r2, #3
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	1911      	adds	r1, r2, r4
 800611e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006120:	416b      	adcs	r3, r5
 8006122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	461a      	mov	r2, r3
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	1891      	adds	r1, r2, r2
 8006130:	62b9      	str	r1, [r7, #40]	; 0x28
 8006132:	415b      	adcs	r3, r3
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800613a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800613e:	f7fa fda3 	bl	8000c88 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4b8c      	ldr	r3, [pc, #560]	; (8006378 <UART_SetConfig+0x38c>)
 8006148:	fba3 1302 	umull	r1, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	2164      	movs	r1, #100	; 0x64
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	3332      	adds	r3, #50	; 0x32
 800615a:	4a87      	ldr	r2, [pc, #540]	; (8006378 <UART_SetConfig+0x38c>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006168:	441e      	add	r6, r3
 800616a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616c:	4618      	mov	r0, r3
 800616e:	f04f 0100 	mov.w	r1, #0
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	1894      	adds	r4, r2, r2
 8006178:	623c      	str	r4, [r7, #32]
 800617a:	415b      	adcs	r3, r3
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006182:	1812      	adds	r2, r2, r0
 8006184:	eb41 0303 	adc.w	r3, r1, r3
 8006188:	f04f 0400 	mov.w	r4, #0
 800618c:	f04f 0500 	mov.w	r5, #0
 8006190:	00dd      	lsls	r5, r3, #3
 8006192:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006196:	00d4      	lsls	r4, r2, #3
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	1814      	adds	r4, r2, r0
 800619e:	653c      	str	r4, [r7, #80]	; 0x50
 80061a0:	414b      	adcs	r3, r1
 80061a2:	657b      	str	r3, [r7, #84]	; 0x54
 80061a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	1891      	adds	r1, r2, r2
 80061b0:	61b9      	str	r1, [r7, #24]
 80061b2:	415b      	adcs	r3, r3
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80061be:	f7fa fd63 	bl	8000c88 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4b6c      	ldr	r3, [pc, #432]	; (8006378 <UART_SetConfig+0x38c>)
 80061c8:	fba3 1302 	umull	r1, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	2164      	movs	r1, #100	; 0x64
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	3332      	adds	r3, #50	; 0x32
 80061da:	4a67      	ldr	r2, [pc, #412]	; (8006378 <UART_SetConfig+0x38c>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 0207 	and.w	r2, r3, #7
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4432      	add	r2, r6
 80061ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061ee:	e0b9      	b.n	8006364 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f2:	461c      	mov	r4, r3
 80061f4:	f04f 0500 	mov.w	r5, #0
 80061f8:	4622      	mov	r2, r4
 80061fa:	462b      	mov	r3, r5
 80061fc:	1891      	adds	r1, r2, r2
 80061fe:	6139      	str	r1, [r7, #16]
 8006200:	415b      	adcs	r3, r3
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006208:	1912      	adds	r2, r2, r4
 800620a:	eb45 0303 	adc.w	r3, r5, r3
 800620e:	f04f 0000 	mov.w	r0, #0
 8006212:	f04f 0100 	mov.w	r1, #0
 8006216:	00d9      	lsls	r1, r3, #3
 8006218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800621c:	00d0      	lsls	r0, r2, #3
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	eb12 0804 	adds.w	r8, r2, r4
 8006226:	eb43 0905 	adc.w	r9, r3, r5
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	4618      	mov	r0, r3
 8006230:	f04f 0100 	mov.w	r1, #0
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	008b      	lsls	r3, r1, #2
 800623e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006242:	0082      	lsls	r2, r0, #2
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f7fa fd1e 	bl	8000c88 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4b49      	ldr	r3, [pc, #292]	; (8006378 <UART_SetConfig+0x38c>)
 8006252:	fba3 2302 	umull	r2, r3, r3, r2
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	011e      	lsls	r6, r3, #4
 800625a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625c:	4618      	mov	r0, r3
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	1894      	adds	r4, r2, r2
 8006268:	60bc      	str	r4, [r7, #8]
 800626a:	415b      	adcs	r3, r3
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006272:	1812      	adds	r2, r2, r0
 8006274:	eb41 0303 	adc.w	r3, r1, r3
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	f04f 0500 	mov.w	r5, #0
 8006280:	00dd      	lsls	r5, r3, #3
 8006282:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006286:	00d4      	lsls	r4, r2, #3
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	1814      	adds	r4, r2, r0
 800628e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006290:	414b      	adcs	r3, r1
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	008b      	lsls	r3, r1, #2
 80062a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062ac:	0082      	lsls	r2, r0, #2
 80062ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80062b2:	f7fa fce9 	bl	8000c88 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <UART_SetConfig+0x38c>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	; 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	3332      	adds	r3, #50	; 0x32
 80062ce:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <UART_SetConfig+0x38c>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062da:	441e      	add	r6, r3
 80062dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062de:	4618      	mov	r0, r3
 80062e0:	f04f 0100 	mov.w	r1, #0
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	1894      	adds	r4, r2, r2
 80062ea:	603c      	str	r4, [r7, #0]
 80062ec:	415b      	adcs	r3, r3
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	1812      	adds	r2, r2, r0
 80062f6:	eb41 0303 	adc.w	r3, r1, r3
 80062fa:	f04f 0400 	mov.w	r4, #0
 80062fe:	f04f 0500 	mov.w	r5, #0
 8006302:	00dd      	lsls	r5, r3, #3
 8006304:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006308:	00d4      	lsls	r4, r2, #3
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	eb12 0a00 	adds.w	sl, r2, r0
 8006312:	eb43 0b01 	adc.w	fp, r3, r1
 8006316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4618      	mov	r0, r3
 800631c:	f04f 0100 	mov.w	r1, #0
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	008b      	lsls	r3, r1, #2
 800632a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800632e:	0082      	lsls	r2, r0, #2
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	f7fa fca8 	bl	8000c88 <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <UART_SetConfig+0x38c>)
 800633e:	fba3 1302 	umull	r1, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2164      	movs	r1, #100	; 0x64
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	; 0x32
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <UART_SetConfig+0x38c>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4432      	add	r2, r6
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	377c      	adds	r7, #124	; 0x7c
 8006368:	46bd      	mov	sp, r7
 800636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636e:	bf00      	nop
 8006370:	40011000 	.word	0x40011000
 8006374:	40011400 	.word	0x40011400
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <__errno>:
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <__errno+0x8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200000bc 	.word	0x200000bc

08006388 <__libc_init_array>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4d0d      	ldr	r5, [pc, #52]	; (80063c0 <__libc_init_array+0x38>)
 800638c:	4c0d      	ldr	r4, [pc, #52]	; (80063c4 <__libc_init_array+0x3c>)
 800638e:	1b64      	subs	r4, r4, r5
 8006390:	10a4      	asrs	r4, r4, #2
 8006392:	2600      	movs	r6, #0
 8006394:	42a6      	cmp	r6, r4
 8006396:	d109      	bne.n	80063ac <__libc_init_array+0x24>
 8006398:	4d0b      	ldr	r5, [pc, #44]	; (80063c8 <__libc_init_array+0x40>)
 800639a:	4c0c      	ldr	r4, [pc, #48]	; (80063cc <__libc_init_array+0x44>)
 800639c:	f003 f8cc 	bl	8009538 <_init>
 80063a0:	1b64      	subs	r4, r4, r5
 80063a2:	10a4      	asrs	r4, r4, #2
 80063a4:	2600      	movs	r6, #0
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	d105      	bne.n	80063b6 <__libc_init_array+0x2e>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b0:	4798      	blx	r3
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7ee      	b.n	8006394 <__libc_init_array+0xc>
 80063b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ba:	4798      	blx	r3
 80063bc:	3601      	adds	r6, #1
 80063be:	e7f2      	b.n	80063a6 <__libc_init_array+0x1e>
 80063c0:	08009994 	.word	0x08009994
 80063c4:	08009994 	.word	0x08009994
 80063c8:	08009994 	.word	0x08009994
 80063cc:	08009998 	.word	0x08009998

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <__cvt>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	ec55 4b10 	vmov	r4, r5, d0
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	460e      	mov	r6, r1
 80063ec:	4619      	mov	r1, r3
 80063ee:	462b      	mov	r3, r5
 80063f0:	bfbb      	ittet	lt
 80063f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063f6:	461d      	movlt	r5, r3
 80063f8:	2300      	movge	r3, #0
 80063fa:	232d      	movlt	r3, #45	; 0x2d
 80063fc:	700b      	strb	r3, [r1, #0]
 80063fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006400:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006404:	4691      	mov	r9, r2
 8006406:	f023 0820 	bic.w	r8, r3, #32
 800640a:	bfbc      	itt	lt
 800640c:	4622      	movlt	r2, r4
 800640e:	4614      	movlt	r4, r2
 8006410:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006414:	d005      	beq.n	8006422 <__cvt+0x42>
 8006416:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800641a:	d100      	bne.n	800641e <__cvt+0x3e>
 800641c:	3601      	adds	r6, #1
 800641e:	2102      	movs	r1, #2
 8006420:	e000      	b.n	8006424 <__cvt+0x44>
 8006422:	2103      	movs	r1, #3
 8006424:	ab03      	add	r3, sp, #12
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	ab02      	add	r3, sp, #8
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	ec45 4b10 	vmov	d0, r4, r5
 8006430:	4653      	mov	r3, sl
 8006432:	4632      	mov	r2, r6
 8006434:	f000 fce4 	bl	8006e00 <_dtoa_r>
 8006438:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800643c:	4607      	mov	r7, r0
 800643e:	d102      	bne.n	8006446 <__cvt+0x66>
 8006440:	f019 0f01 	tst.w	r9, #1
 8006444:	d022      	beq.n	800648c <__cvt+0xac>
 8006446:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800644a:	eb07 0906 	add.w	r9, r7, r6
 800644e:	d110      	bne.n	8006472 <__cvt+0x92>
 8006450:	783b      	ldrb	r3, [r7, #0]
 8006452:	2b30      	cmp	r3, #48	; 0x30
 8006454:	d10a      	bne.n	800646c <__cvt+0x8c>
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	4620      	mov	r0, r4
 800645c:	4629      	mov	r1, r5
 800645e:	f7fa fb53 	bl	8000b08 <__aeabi_dcmpeq>
 8006462:	b918      	cbnz	r0, 800646c <__cvt+0x8c>
 8006464:	f1c6 0601 	rsb	r6, r6, #1
 8006468:	f8ca 6000 	str.w	r6, [sl]
 800646c:	f8da 3000 	ldr.w	r3, [sl]
 8006470:	4499      	add	r9, r3
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa fb45 	bl	8000b08 <__aeabi_dcmpeq>
 800647e:	b108      	cbz	r0, 8006484 <__cvt+0xa4>
 8006480:	f8cd 900c 	str.w	r9, [sp, #12]
 8006484:	2230      	movs	r2, #48	; 0x30
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	454b      	cmp	r3, r9
 800648a:	d307      	bcc.n	800649c <__cvt+0xbc>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006490:	1bdb      	subs	r3, r3, r7
 8006492:	4638      	mov	r0, r7
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	b004      	add	sp, #16
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	9103      	str	r1, [sp, #12]
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e7f0      	b.n	8006486 <__cvt+0xa6>

080064a4 <__exponent>:
 80064a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a6:	4603      	mov	r3, r0
 80064a8:	2900      	cmp	r1, #0
 80064aa:	bfb8      	it	lt
 80064ac:	4249      	neglt	r1, r1
 80064ae:	f803 2b02 	strb.w	r2, [r3], #2
 80064b2:	bfb4      	ite	lt
 80064b4:	222d      	movlt	r2, #45	; 0x2d
 80064b6:	222b      	movge	r2, #43	; 0x2b
 80064b8:	2909      	cmp	r1, #9
 80064ba:	7042      	strb	r2, [r0, #1]
 80064bc:	dd2a      	ble.n	8006514 <__exponent+0x70>
 80064be:	f10d 0407 	add.w	r4, sp, #7
 80064c2:	46a4      	mov	ip, r4
 80064c4:	270a      	movs	r7, #10
 80064c6:	46a6      	mov	lr, r4
 80064c8:	460a      	mov	r2, r1
 80064ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80064ce:	fb07 1516 	mls	r5, r7, r6, r1
 80064d2:	3530      	adds	r5, #48	; 0x30
 80064d4:	2a63      	cmp	r2, #99	; 0x63
 80064d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80064da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064de:	4631      	mov	r1, r6
 80064e0:	dcf1      	bgt.n	80064c6 <__exponent+0x22>
 80064e2:	3130      	adds	r1, #48	; 0x30
 80064e4:	f1ae 0502 	sub.w	r5, lr, #2
 80064e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064ec:	1c44      	adds	r4, r0, #1
 80064ee:	4629      	mov	r1, r5
 80064f0:	4561      	cmp	r1, ip
 80064f2:	d30a      	bcc.n	800650a <__exponent+0x66>
 80064f4:	f10d 0209 	add.w	r2, sp, #9
 80064f8:	eba2 020e 	sub.w	r2, r2, lr
 80064fc:	4565      	cmp	r5, ip
 80064fe:	bf88      	it	hi
 8006500:	2200      	movhi	r2, #0
 8006502:	4413      	add	r3, r2
 8006504:	1a18      	subs	r0, r3, r0
 8006506:	b003      	add	sp, #12
 8006508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800650a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800650e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006512:	e7ed      	b.n	80064f0 <__exponent+0x4c>
 8006514:	2330      	movs	r3, #48	; 0x30
 8006516:	3130      	adds	r1, #48	; 0x30
 8006518:	7083      	strb	r3, [r0, #2]
 800651a:	70c1      	strb	r1, [r0, #3]
 800651c:	1d03      	adds	r3, r0, #4
 800651e:	e7f1      	b.n	8006504 <__exponent+0x60>

08006520 <_printf_float>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	ed2d 8b02 	vpush	{d8}
 8006528:	b08d      	sub	sp, #52	; 0x34
 800652a:	460c      	mov	r4, r1
 800652c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006530:	4616      	mov	r6, r2
 8006532:	461f      	mov	r7, r3
 8006534:	4605      	mov	r5, r0
 8006536:	f001 fb45 	bl	8007bc4 <_localeconv_r>
 800653a:	f8d0 a000 	ldr.w	sl, [r0]
 800653e:	4650      	mov	r0, sl
 8006540:	f7f9 fe66 	bl	8000210 <strlen>
 8006544:	2300      	movs	r3, #0
 8006546:	930a      	str	r3, [sp, #40]	; 0x28
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	f8d8 3000 	ldr.w	r3, [r8]
 8006550:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006554:	3307      	adds	r3, #7
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	f103 0208 	add.w	r2, r3, #8
 800655e:	f8c8 2000 	str.w	r2, [r8]
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800656a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800656e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	f8cd 8018 	str.w	r8, [sp, #24]
 8006578:	ee08 0a10 	vmov	s16, r0
 800657c:	4b9f      	ldr	r3, [pc, #636]	; (80067fc <_printf_float+0x2dc>)
 800657e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	f7fa faf1 	bl	8000b6c <__aeabi_dcmpun>
 800658a:	bb88      	cbnz	r0, 80065f0 <_printf_float+0xd0>
 800658c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006590:	4b9a      	ldr	r3, [pc, #616]	; (80067fc <_printf_float+0x2dc>)
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	f7fa facb 	bl	8000b30 <__aeabi_dcmple>
 800659a:	bb48      	cbnz	r0, 80065f0 <_printf_float+0xd0>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4640      	mov	r0, r8
 80065a2:	4649      	mov	r1, r9
 80065a4:	f7fa faba 	bl	8000b1c <__aeabi_dcmplt>
 80065a8:	b110      	cbz	r0, 80065b0 <_printf_float+0x90>
 80065aa:	232d      	movs	r3, #45	; 0x2d
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <_printf_float+0x2e0>)
 80065b2:	4894      	ldr	r0, [pc, #592]	; (8006804 <_printf_float+0x2e4>)
 80065b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065b8:	bf94      	ite	ls
 80065ba:	4698      	movls	r8, r3
 80065bc:	4680      	movhi	r8, r0
 80065be:	2303      	movs	r3, #3
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	9b05      	ldr	r3, [sp, #20]
 80065c4:	f023 0204 	bic.w	r2, r3, #4
 80065c8:	6022      	str	r2, [r4, #0]
 80065ca:	f04f 0900 	mov.w	r9, #0
 80065ce:	9700      	str	r7, [sp, #0]
 80065d0:	4633      	mov	r3, r6
 80065d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f9d8 	bl	800698c <_printf_common>
 80065dc:	3001      	adds	r0, #1
 80065de:	f040 8090 	bne.w	8006702 <_printf_float+0x1e2>
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	b00d      	add	sp, #52	; 0x34
 80065e8:	ecbd 8b02 	vpop	{d8}
 80065ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7fa fab8 	bl	8000b6c <__aeabi_dcmpun>
 80065fc:	b140      	cbz	r0, 8006610 <_printf_float+0xf0>
 80065fe:	464b      	mov	r3, r9
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfbc      	itt	lt
 8006604:	232d      	movlt	r3, #45	; 0x2d
 8006606:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800660a:	487f      	ldr	r0, [pc, #508]	; (8006808 <_printf_float+0x2e8>)
 800660c:	4b7f      	ldr	r3, [pc, #508]	; (800680c <_printf_float+0x2ec>)
 800660e:	e7d1      	b.n	80065b4 <_printf_float+0x94>
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006616:	9206      	str	r2, [sp, #24]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	d13f      	bne.n	800669c <_printf_float+0x17c>
 800661c:	2306      	movs	r3, #6
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	9b05      	ldr	r3, [sp, #20]
 8006622:	6861      	ldr	r1, [r4, #4]
 8006624:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006628:	2300      	movs	r3, #0
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	ab0a      	add	r3, sp, #40	; 0x28
 800662e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006632:	ab09      	add	r3, sp, #36	; 0x24
 8006634:	ec49 8b10 	vmov	d0, r8, r9
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006640:	4628      	mov	r0, r5
 8006642:	f7ff fecd 	bl	80063e0 <__cvt>
 8006646:	9b06      	ldr	r3, [sp, #24]
 8006648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800664a:	2b47      	cmp	r3, #71	; 0x47
 800664c:	4680      	mov	r8, r0
 800664e:	d108      	bne.n	8006662 <_printf_float+0x142>
 8006650:	1cc8      	adds	r0, r1, #3
 8006652:	db02      	blt.n	800665a <_printf_float+0x13a>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	4299      	cmp	r1, r3
 8006658:	dd41      	ble.n	80066de <_printf_float+0x1be>
 800665a:	f1ab 0b02 	sub.w	fp, fp, #2
 800665e:	fa5f fb8b 	uxtb.w	fp, fp
 8006662:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006666:	d820      	bhi.n	80066aa <_printf_float+0x18a>
 8006668:	3901      	subs	r1, #1
 800666a:	465a      	mov	r2, fp
 800666c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006670:	9109      	str	r1, [sp, #36]	; 0x24
 8006672:	f7ff ff17 	bl	80064a4 <__exponent>
 8006676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006678:	1813      	adds	r3, r2, r0
 800667a:	2a01      	cmp	r2, #1
 800667c:	4681      	mov	r9, r0
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	dc02      	bgt.n	8006688 <_printf_float+0x168>
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	07d2      	lsls	r2, r2, #31
 8006686:	d501      	bpl.n	800668c <_printf_float+0x16c>
 8006688:	3301      	adds	r3, #1
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006690:	2b00      	cmp	r3, #0
 8006692:	d09c      	beq.n	80065ce <_printf_float+0xae>
 8006694:	232d      	movs	r3, #45	; 0x2d
 8006696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800669a:	e798      	b.n	80065ce <_printf_float+0xae>
 800669c:	9a06      	ldr	r2, [sp, #24]
 800669e:	2a47      	cmp	r2, #71	; 0x47
 80066a0:	d1be      	bne.n	8006620 <_printf_float+0x100>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1bc      	bne.n	8006620 <_printf_float+0x100>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7b9      	b.n	800661e <_printf_float+0xfe>
 80066aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066ae:	d118      	bne.n	80066e2 <_printf_float+0x1c2>
 80066b0:	2900      	cmp	r1, #0
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	dd0b      	ble.n	80066ce <_printf_float+0x1ae>
 80066b6:	6121      	str	r1, [r4, #16]
 80066b8:	b913      	cbnz	r3, 80066c0 <_printf_float+0x1a0>
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	07d0      	lsls	r0, r2, #31
 80066be:	d502      	bpl.n	80066c6 <_printf_float+0x1a6>
 80066c0:	3301      	adds	r3, #1
 80066c2:	440b      	add	r3, r1
 80066c4:	6123      	str	r3, [r4, #16]
 80066c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80066c8:	f04f 0900 	mov.w	r9, #0
 80066cc:	e7de      	b.n	800668c <_printf_float+0x16c>
 80066ce:	b913      	cbnz	r3, 80066d6 <_printf_float+0x1b6>
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	07d2      	lsls	r2, r2, #31
 80066d4:	d501      	bpl.n	80066da <_printf_float+0x1ba>
 80066d6:	3302      	adds	r3, #2
 80066d8:	e7f4      	b.n	80066c4 <_printf_float+0x1a4>
 80066da:	2301      	movs	r3, #1
 80066dc:	e7f2      	b.n	80066c4 <_printf_float+0x1a4>
 80066de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e4:	4299      	cmp	r1, r3
 80066e6:	db05      	blt.n	80066f4 <_printf_float+0x1d4>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	6121      	str	r1, [r4, #16]
 80066ec:	07d8      	lsls	r0, r3, #31
 80066ee:	d5ea      	bpl.n	80066c6 <_printf_float+0x1a6>
 80066f0:	1c4b      	adds	r3, r1, #1
 80066f2:	e7e7      	b.n	80066c4 <_printf_float+0x1a4>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	bfd4      	ite	le
 80066f8:	f1c1 0202 	rsble	r2, r1, #2
 80066fc:	2201      	movgt	r2, #1
 80066fe:	4413      	add	r3, r2
 8006700:	e7e0      	b.n	80066c4 <_printf_float+0x1a4>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	055a      	lsls	r2, r3, #21
 8006706:	d407      	bmi.n	8006718 <_printf_float+0x1f8>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	4642      	mov	r2, r8
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	d12c      	bne.n	8006770 <_printf_float+0x250>
 8006716:	e764      	b.n	80065e2 <_printf_float+0xc2>
 8006718:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800671c:	f240 80e0 	bls.w	80068e0 <_printf_float+0x3c0>
 8006720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	f7fa f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800672c:	2800      	cmp	r0, #0
 800672e:	d034      	beq.n	800679a <_printf_float+0x27a>
 8006730:	4a37      	ldr	r2, [pc, #220]	; (8006810 <_printf_float+0x2f0>)
 8006732:	2301      	movs	r3, #1
 8006734:	4631      	mov	r1, r6
 8006736:	4628      	mov	r0, r5
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f af51 	beq.w	80065e2 <_printf_float+0xc2>
 8006740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006744:	429a      	cmp	r2, r3
 8006746:	db02      	blt.n	800674e <_printf_float+0x22e>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	07d8      	lsls	r0, r3, #31
 800674c:	d510      	bpl.n	8006770 <_printf_float+0x250>
 800674e:	ee18 3a10 	vmov	r3, s16
 8006752:	4652      	mov	r2, sl
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f af41 	beq.w	80065e2 <_printf_float+0xc2>
 8006760:	f04f 0800 	mov.w	r8, #0
 8006764:	f104 091a 	add.w	r9, r4, #26
 8006768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676a:	3b01      	subs	r3, #1
 800676c:	4543      	cmp	r3, r8
 800676e:	dc09      	bgt.n	8006784 <_printf_float+0x264>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	079b      	lsls	r3, r3, #30
 8006774:	f100 8105 	bmi.w	8006982 <_printf_float+0x462>
 8006778:	68e0      	ldr	r0, [r4, #12]
 800677a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677c:	4298      	cmp	r0, r3
 800677e:	bfb8      	it	lt
 8006780:	4618      	movlt	r0, r3
 8006782:	e730      	b.n	80065e6 <_printf_float+0xc6>
 8006784:	2301      	movs	r3, #1
 8006786:	464a      	mov	r2, r9
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af27 	beq.w	80065e2 <_printf_float+0xc2>
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	e7e6      	b.n	8006768 <_printf_float+0x248>
 800679a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc39      	bgt.n	8006814 <_printf_float+0x2f4>
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <_printf_float+0x2f0>)
 80067a2:	2301      	movs	r3, #1
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f af19 	beq.w	80065e2 <_printf_float+0xc2>
 80067b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d102      	bne.n	80067be <_printf_float+0x29e>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	07d9      	lsls	r1, r3, #31
 80067bc:	d5d8      	bpl.n	8006770 <_printf_float+0x250>
 80067be:	ee18 3a10 	vmov	r3, s16
 80067c2:	4652      	mov	r2, sl
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f af09 	beq.w	80065e2 <_printf_float+0xc2>
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	f104 0a1a 	add.w	sl, r4, #26
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	425b      	negs	r3, r3
 80067dc:	454b      	cmp	r3, r9
 80067de:	dc01      	bgt.n	80067e4 <_printf_float+0x2c4>
 80067e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e2:	e792      	b.n	800670a <_printf_float+0x1ea>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4652      	mov	r2, sl
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f aef7 	beq.w	80065e2 <_printf_float+0xc2>
 80067f4:	f109 0901 	add.w	r9, r9, #1
 80067f8:	e7ee      	b.n	80067d8 <_printf_float+0x2b8>
 80067fa:	bf00      	nop
 80067fc:	7fefffff 	.word	0x7fefffff
 8006800:	080095b0 	.word	0x080095b0
 8006804:	080095b4 	.word	0x080095b4
 8006808:	080095bc 	.word	0x080095bc
 800680c:	080095b8 	.word	0x080095b8
 8006810:	080095c0 	.word	0x080095c0
 8006814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006818:	429a      	cmp	r2, r3
 800681a:	bfa8      	it	ge
 800681c:	461a      	movge	r2, r3
 800681e:	2a00      	cmp	r2, #0
 8006820:	4691      	mov	r9, r2
 8006822:	dc37      	bgt.n	8006894 <_printf_float+0x374>
 8006824:	f04f 0b00 	mov.w	fp, #0
 8006828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800682c:	f104 021a 	add.w	r2, r4, #26
 8006830:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	eba3 0309 	sub.w	r3, r3, r9
 8006838:	455b      	cmp	r3, fp
 800683a:	dc33      	bgt.n	80068a4 <_printf_float+0x384>
 800683c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006840:	429a      	cmp	r2, r3
 8006842:	db3b      	blt.n	80068bc <_printf_float+0x39c>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	07da      	lsls	r2, r3, #31
 8006848:	d438      	bmi.n	80068bc <_printf_float+0x39c>
 800684a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684c:	9b05      	ldr	r3, [sp, #20]
 800684e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	eba2 0901 	sub.w	r9, r2, r1
 8006856:	4599      	cmp	r9, r3
 8006858:	bfa8      	it	ge
 800685a:	4699      	movge	r9, r3
 800685c:	f1b9 0f00 	cmp.w	r9, #0
 8006860:	dc35      	bgt.n	80068ce <_printf_float+0x3ae>
 8006862:	f04f 0800 	mov.w	r8, #0
 8006866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686a:	f104 0a1a 	add.w	sl, r4, #26
 800686e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	eba3 0309 	sub.w	r3, r3, r9
 8006878:	4543      	cmp	r3, r8
 800687a:	f77f af79 	ble.w	8006770 <_printf_float+0x250>
 800687e:	2301      	movs	r3, #1
 8006880:	4652      	mov	r2, sl
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f aeaa 	beq.w	80065e2 <_printf_float+0xc2>
 800688e:	f108 0801 	add.w	r8, r8, #1
 8006892:	e7ec      	b.n	800686e <_printf_float+0x34e>
 8006894:	4613      	mov	r3, r2
 8006896:	4631      	mov	r1, r6
 8006898:	4642      	mov	r2, r8
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	d1c0      	bne.n	8006824 <_printf_float+0x304>
 80068a2:	e69e      	b.n	80065e2 <_printf_float+0xc2>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	9205      	str	r2, [sp, #20]
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f ae97 	beq.w	80065e2 <_printf_float+0xc2>
 80068b4:	9a05      	ldr	r2, [sp, #20]
 80068b6:	f10b 0b01 	add.w	fp, fp, #1
 80068ba:	e7b9      	b.n	8006830 <_printf_float+0x310>
 80068bc:	ee18 3a10 	vmov	r3, s16
 80068c0:	4652      	mov	r2, sl
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	d1be      	bne.n	800684a <_printf_float+0x32a>
 80068cc:	e689      	b.n	80065e2 <_printf_float+0xc2>
 80068ce:	9a05      	ldr	r2, [sp, #20]
 80068d0:	464b      	mov	r3, r9
 80068d2:	4442      	add	r2, r8
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	d1c1      	bne.n	8006862 <_printf_float+0x342>
 80068de:	e680      	b.n	80065e2 <_printf_float+0xc2>
 80068e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	dc01      	bgt.n	80068ea <_printf_float+0x3ca>
 80068e6:	07db      	lsls	r3, r3, #31
 80068e8:	d538      	bpl.n	800695c <_printf_float+0x43c>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4642      	mov	r2, r8
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f ae74 	beq.w	80065e2 <_printf_float+0xc2>
 80068fa:	ee18 3a10 	vmov	r3, s16
 80068fe:	4652      	mov	r2, sl
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f ae6b 	beq.w	80065e2 <_printf_float+0xc2>
 800690c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f8f8 	bl	8000b08 <__aeabi_dcmpeq>
 8006918:	b9d8      	cbnz	r0, 8006952 <_printf_float+0x432>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	f108 0201 	add.w	r2, r8, #1
 8006920:	3b01      	subs	r3, #1
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	d10e      	bne.n	800694a <_printf_float+0x42a>
 800692c:	e659      	b.n	80065e2 <_printf_float+0xc2>
 800692e:	2301      	movs	r3, #1
 8006930:	4652      	mov	r2, sl
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f ae52 	beq.w	80065e2 <_printf_float+0xc2>
 800693e:	f108 0801 	add.w	r8, r8, #1
 8006942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006944:	3b01      	subs	r3, #1
 8006946:	4543      	cmp	r3, r8
 8006948:	dcf1      	bgt.n	800692e <_printf_float+0x40e>
 800694a:	464b      	mov	r3, r9
 800694c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006950:	e6dc      	b.n	800670c <_printf_float+0x1ec>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 0a1a 	add.w	sl, r4, #26
 800695a:	e7f2      	b.n	8006942 <_printf_float+0x422>
 800695c:	2301      	movs	r3, #1
 800695e:	4642      	mov	r2, r8
 8006960:	e7df      	b.n	8006922 <_printf_float+0x402>
 8006962:	2301      	movs	r3, #1
 8006964:	464a      	mov	r2, r9
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae38 	beq.w	80065e2 <_printf_float+0xc2>
 8006972:	f108 0801 	add.w	r8, r8, #1
 8006976:	68e3      	ldr	r3, [r4, #12]
 8006978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800697a:	1a5b      	subs	r3, r3, r1
 800697c:	4543      	cmp	r3, r8
 800697e:	dcf0      	bgt.n	8006962 <_printf_float+0x442>
 8006980:	e6fa      	b.n	8006778 <_printf_float+0x258>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	f104 0919 	add.w	r9, r4, #25
 800698a:	e7f4      	b.n	8006976 <_printf_float+0x456>

0800698c <_printf_common>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4616      	mov	r6, r2
 8006992:	4699      	mov	r9, r3
 8006994:	688a      	ldr	r2, [r1, #8]
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800699c:	4293      	cmp	r3, r2
 800699e:	bfb8      	it	lt
 80069a0:	4613      	movlt	r3, r2
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a8:	4607      	mov	r7, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b10a      	cbz	r2, 80069b2 <_printf_common+0x26>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	0699      	lsls	r1, r3, #26
 80069b6:	bf42      	ittt	mi
 80069b8:	6833      	ldrmi	r3, [r6, #0]
 80069ba:	3302      	addmi	r3, #2
 80069bc:	6033      	strmi	r3, [r6, #0]
 80069be:	6825      	ldr	r5, [r4, #0]
 80069c0:	f015 0506 	ands.w	r5, r5, #6
 80069c4:	d106      	bne.n	80069d4 <_printf_common+0x48>
 80069c6:	f104 0a19 	add.w	sl, r4, #25
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dc26      	bgt.n	8006a22 <_printf_common+0x96>
 80069d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d8:	1e13      	subs	r3, r2, #0
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	bf18      	it	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	0692      	lsls	r2, r2, #26
 80069e2:	d42b      	bmi.n	8006a3c <_printf_common+0xb0>
 80069e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d01e      	beq.n	8006a30 <_printf_common+0xa4>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	68e5      	ldr	r5, [r4, #12]
 80069f6:	6832      	ldr	r2, [r6, #0]
 80069f8:	f003 0306 	and.w	r3, r3, #6
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	bf08      	it	eq
 8006a00:	1aad      	subeq	r5, r5, r2
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	bf0c      	ite	eq
 8006a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a0c:	2500      	movne	r5, #0
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bfc4      	itt	gt
 8006a12:	1a9b      	subgt	r3, r3, r2
 8006a14:	18ed      	addgt	r5, r5, r3
 8006a16:	2600      	movs	r6, #0
 8006a18:	341a      	adds	r4, #26
 8006a1a:	42b5      	cmp	r5, r6
 8006a1c:	d11a      	bne.n	8006a54 <_printf_common+0xc8>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e008      	b.n	8006a34 <_printf_common+0xa8>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4652      	mov	r2, sl
 8006a26:	4649      	mov	r1, r9
 8006a28:	4638      	mov	r0, r7
 8006a2a:	47c0      	blx	r8
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d103      	bne.n	8006a38 <_printf_common+0xac>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	3501      	adds	r5, #1
 8006a3a:	e7c6      	b.n	80069ca <_printf_common+0x3e>
 8006a3c:	18e1      	adds	r1, r4, r3
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	2030      	movs	r0, #48	; 0x30
 8006a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a46:	4422      	add	r2, r4
 8006a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a50:	3302      	adds	r3, #2
 8006a52:	e7c7      	b.n	80069e4 <_printf_common+0x58>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4622      	mov	r2, r4
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0e6      	beq.n	8006a30 <_printf_common+0xa4>
 8006a62:	3601      	adds	r6, #1
 8006a64:	e7d9      	b.n	8006a1a <_printf_common+0x8e>
	...

08006a68 <_printf_i>:
 8006a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	4691      	mov	r9, r2
 8006a70:	7e27      	ldrb	r7, [r4, #24]
 8006a72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a74:	2f78      	cmp	r7, #120	; 0x78
 8006a76:	4680      	mov	r8, r0
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a7e:	d807      	bhi.n	8006a90 <_printf_i+0x28>
 8006a80:	2f62      	cmp	r7, #98	; 0x62
 8006a82:	d80a      	bhi.n	8006a9a <_printf_i+0x32>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f000 80d8 	beq.w	8006c3a <_printf_i+0x1d2>
 8006a8a:	2f58      	cmp	r7, #88	; 0x58
 8006a8c:	f000 80a3 	beq.w	8006bd6 <_printf_i+0x16e>
 8006a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a98:	e03a      	b.n	8006b10 <_printf_i+0xa8>
 8006a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9e:	2b15      	cmp	r3, #21
 8006aa0:	d8f6      	bhi.n	8006a90 <_printf_i+0x28>
 8006aa2:	a001      	add	r0, pc, #4	; (adr r0, 8006aa8 <_printf_i+0x40>)
 8006aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006a91 	.word	0x08006a91
 8006ab4:	08006a91 	.word	0x08006a91
 8006ab8:	08006a91 	.word	0x08006a91
 8006abc:	08006a91 	.word	0x08006a91
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a91 	.word	0x08006a91
 8006ac8:	08006a91 	.word	0x08006a91
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006c21 	.word	0x08006c21
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006c03 	.word	0x08006c03
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c43 	.word	0x08006c43
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006c0b 	.word	0x08006c0b
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	600a      	str	r2, [r1, #0]
 8006b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0a3      	b.n	8006c5c <_printf_i+0x1f4>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	6808      	ldr	r0, [r1, #0]
 8006b18:	062e      	lsls	r6, r5, #24
 8006b1a:	f100 0304 	add.w	r3, r0, #4
 8006b1e:	d50a      	bpl.n	8006b36 <_printf_i+0xce>
 8006b20:	6805      	ldr	r5, [r0, #0]
 8006b22:	600b      	str	r3, [r1, #0]
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	da03      	bge.n	8006b30 <_printf_i+0xc8>
 8006b28:	232d      	movs	r3, #45	; 0x2d
 8006b2a:	426d      	negs	r5, r5
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	485e      	ldr	r0, [pc, #376]	; (8006cac <_printf_i+0x244>)
 8006b32:	230a      	movs	r3, #10
 8006b34:	e019      	b.n	8006b6a <_printf_i+0x102>
 8006b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b3a:	6805      	ldr	r5, [r0, #0]
 8006b3c:	600b      	str	r3, [r1, #0]
 8006b3e:	bf18      	it	ne
 8006b40:	b22d      	sxthne	r5, r5
 8006b42:	e7ef      	b.n	8006b24 <_printf_i+0xbc>
 8006b44:	680b      	ldr	r3, [r1, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	1d18      	adds	r0, r3, #4
 8006b4a:	6008      	str	r0, [r1, #0]
 8006b4c:	0628      	lsls	r0, r5, #24
 8006b4e:	d501      	bpl.n	8006b54 <_printf_i+0xec>
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <_printf_i+0xf2>
 8006b54:	0669      	lsls	r1, r5, #25
 8006b56:	d5fb      	bpl.n	8006b50 <_printf_i+0xe8>
 8006b58:	881d      	ldrh	r5, [r3, #0]
 8006b5a:	4854      	ldr	r0, [pc, #336]	; (8006cac <_printf_i+0x244>)
 8006b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b5e:	bf0c      	ite	eq
 8006b60:	2308      	moveq	r3, #8
 8006b62:	230a      	movne	r3, #10
 8006b64:	2100      	movs	r1, #0
 8006b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b6a:	6866      	ldr	r6, [r4, #4]
 8006b6c:	60a6      	str	r6, [r4, #8]
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	bfa2      	ittt	ge
 8006b72:	6821      	ldrge	r1, [r4, #0]
 8006b74:	f021 0104 	bicge.w	r1, r1, #4
 8006b78:	6021      	strge	r1, [r4, #0]
 8006b7a:	b90d      	cbnz	r5, 8006b80 <_printf_i+0x118>
 8006b7c:	2e00      	cmp	r6, #0
 8006b7e:	d04d      	beq.n	8006c1c <_printf_i+0x1b4>
 8006b80:	4616      	mov	r6, r2
 8006b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b86:	fb03 5711 	mls	r7, r3, r1, r5
 8006b8a:	5dc7      	ldrb	r7, [r0, r7]
 8006b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b90:	462f      	mov	r7, r5
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	460d      	mov	r5, r1
 8006b96:	d9f4      	bls.n	8006b82 <_printf_i+0x11a>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d10b      	bne.n	8006bb4 <_printf_i+0x14c>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	07df      	lsls	r7, r3, #31
 8006ba0:	d508      	bpl.n	8006bb4 <_printf_i+0x14c>
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	6861      	ldr	r1, [r4, #4]
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	bfde      	ittt	le
 8006baa:	2330      	movle	r3, #48	; 0x30
 8006bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bb4:	1b92      	subs	r2, r2, r6
 8006bb6:	6122      	str	r2, [r4, #16]
 8006bb8:	f8cd a000 	str.w	sl, [sp]
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	aa03      	add	r2, sp, #12
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fee2 	bl	800698c <_printf_common>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d14c      	bne.n	8006c66 <_printf_i+0x1fe>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	b004      	add	sp, #16
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	4835      	ldr	r0, [pc, #212]	; (8006cac <_printf_i+0x244>)
 8006bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	680e      	ldr	r6, [r1, #0]
 8006be0:	061f      	lsls	r7, r3, #24
 8006be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006be6:	600e      	str	r6, [r1, #0]
 8006be8:	d514      	bpl.n	8006c14 <_printf_i+0x1ac>
 8006bea:	07d9      	lsls	r1, r3, #31
 8006bec:	bf44      	itt	mi
 8006bee:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf2:	6023      	strmi	r3, [r4, #0]
 8006bf4:	b91d      	cbnz	r5, 8006bfe <_printf_i+0x196>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f023 0320 	bic.w	r3, r3, #32
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	2310      	movs	r3, #16
 8006c00:	e7b0      	b.n	8006b64 <_printf_i+0xfc>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	f043 0320 	orr.w	r3, r3, #32
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	2378      	movs	r3, #120	; 0x78
 8006c0c:	4828      	ldr	r0, [pc, #160]	; (8006cb0 <_printf_i+0x248>)
 8006c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c12:	e7e3      	b.n	8006bdc <_printf_i+0x174>
 8006c14:	065e      	lsls	r6, r3, #25
 8006c16:	bf48      	it	mi
 8006c18:	b2ad      	uxthmi	r5, r5
 8006c1a:	e7e6      	b.n	8006bea <_printf_i+0x182>
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	e7bb      	b.n	8006b98 <_printf_i+0x130>
 8006c20:	680b      	ldr	r3, [r1, #0]
 8006c22:	6826      	ldr	r6, [r4, #0]
 8006c24:	6960      	ldr	r0, [r4, #20]
 8006c26:	1d1d      	adds	r5, r3, #4
 8006c28:	600d      	str	r5, [r1, #0]
 8006c2a:	0635      	lsls	r5, r6, #24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0x1cc>
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0x1d2>
 8006c34:	0671      	lsls	r1, r6, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0x1c8>
 8006c38:	8018      	strh	r0, [r3, #0]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	4616      	mov	r6, r2
 8006c40:	e7ba      	b.n	8006bb8 <_printf_i+0x150>
 8006c42:	680b      	ldr	r3, [r1, #0]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	600a      	str	r2, [r1, #0]
 8006c48:	681e      	ldr	r6, [r3, #0]
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7f9 fae6 	bl	8000220 <memchr>
 8006c54:	b108      	cbz	r0, 8006c5a <_printf_i+0x1f2>
 8006c56:	1b80      	subs	r0, r0, r6
 8006c58:	6060      	str	r0, [r4, #4]
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	e7a8      	b.n	8006bb8 <_printf_i+0x150>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	47d0      	blx	sl
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0ab      	beq.n	8006bcc <_printf_i+0x164>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	079b      	lsls	r3, r3, #30
 8006c78:	d413      	bmi.n	8006ca2 <_printf_i+0x23a>
 8006c7a:	68e0      	ldr	r0, [r4, #12]
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	bfb8      	it	lt
 8006c82:	4618      	movlt	r0, r3
 8006c84:	e7a4      	b.n	8006bd0 <_printf_i+0x168>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4632      	mov	r2, r6
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	47d0      	blx	sl
 8006c90:	3001      	adds	r0, #1
 8006c92:	d09b      	beq.n	8006bcc <_printf_i+0x164>
 8006c94:	3501      	adds	r5, #1
 8006c96:	68e3      	ldr	r3, [r4, #12]
 8006c98:	9903      	ldr	r1, [sp, #12]
 8006c9a:	1a5b      	subs	r3, r3, r1
 8006c9c:	42ab      	cmp	r3, r5
 8006c9e:	dcf2      	bgt.n	8006c86 <_printf_i+0x21e>
 8006ca0:	e7eb      	b.n	8006c7a <_printf_i+0x212>
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	f104 0619 	add.w	r6, r4, #25
 8006ca8:	e7f5      	b.n	8006c96 <_printf_i+0x22e>
 8006caa:	bf00      	nop
 8006cac:	080095c2 	.word	0x080095c2
 8006cb0:	080095d3 	.word	0x080095d3

08006cb4 <iprintf>:
 8006cb4:	b40f      	push	{r0, r1, r2, r3}
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <iprintf+0x2c>)
 8006cb8:	b513      	push	{r0, r1, r4, lr}
 8006cba:	681c      	ldr	r4, [r3, #0]
 8006cbc:	b124      	cbz	r4, 8006cc8 <iprintf+0x14>
 8006cbe:	69a3      	ldr	r3, [r4, #24]
 8006cc0:	b913      	cbnz	r3, 8006cc8 <iprintf+0x14>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fee0 	bl	8007a88 <__sinit>
 8006cc8:	ab05      	add	r3, sp, #20
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	68a1      	ldr	r1, [r4, #8]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f001 fbf7 	bl	80084c4 <_vfiprintf_r>
 8006cd6:	b002      	add	sp, #8
 8006cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cdc:	b004      	add	sp, #16
 8006cde:	4770      	bx	lr
 8006ce0:	200000bc 	.word	0x200000bc

08006ce4 <quorem>:
 8006ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	6903      	ldr	r3, [r0, #16]
 8006cea:	690c      	ldr	r4, [r1, #16]
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	4607      	mov	r7, r0
 8006cf0:	f2c0 8081 	blt.w	8006df6 <quorem+0x112>
 8006cf4:	3c01      	subs	r4, #1
 8006cf6:	f101 0814 	add.w	r8, r1, #20
 8006cfa:	f100 0514 	add.w	r5, r0, #20
 8006cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d1c:	d331      	bcc.n	8006d82 <quorem+0x9e>
 8006d1e:	f04f 0e00 	mov.w	lr, #0
 8006d22:	4640      	mov	r0, r8
 8006d24:	46ac      	mov	ip, r5
 8006d26:	46f2      	mov	sl, lr
 8006d28:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d2c:	b293      	uxth	r3, r2
 8006d2e:	fb06 e303 	mla	r3, r6, r3, lr
 8006d32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ebaa 0303 	sub.w	r3, sl, r3
 8006d3c:	0c12      	lsrs	r2, r2, #16
 8006d3e:	f8dc a000 	ldr.w	sl, [ip]
 8006d42:	fb06 e202 	mla	r2, r6, r2, lr
 8006d46:	fa13 f38a 	uxtah	r3, r3, sl
 8006d4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d4e:	fa1f fa82 	uxth.w	sl, r2
 8006d52:	f8dc 2000 	ldr.w	r2, [ip]
 8006d56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d64:	4581      	cmp	r9, r0
 8006d66:	f84c 3b04 	str.w	r3, [ip], #4
 8006d6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d6e:	d2db      	bcs.n	8006d28 <quorem+0x44>
 8006d70:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d74:	b92b      	cbnz	r3, 8006d82 <quorem+0x9e>
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	429d      	cmp	r5, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	d32e      	bcc.n	8006dde <quorem+0xfa>
 8006d80:	613c      	str	r4, [r7, #16]
 8006d82:	4638      	mov	r0, r7
 8006d84:	f001 f9ba 	bl	80080fc <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	db24      	blt.n	8006dd6 <quorem+0xf2>
 8006d8c:	3601      	adds	r6, #1
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f04f 0c00 	mov.w	ip, #0
 8006d94:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d98:	f8d0 e000 	ldr.w	lr, [r0]
 8006d9c:	b293      	uxth	r3, r2
 8006d9e:	ebac 0303 	sub.w	r3, ip, r3
 8006da2:	0c12      	lsrs	r2, r2, #16
 8006da4:	fa13 f38e 	uxtah	r3, r3, lr
 8006da8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db6:	45c1      	cmp	r9, r8
 8006db8:	f840 3b04 	str.w	r3, [r0], #4
 8006dbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006dc0:	d2e8      	bcs.n	8006d94 <quorem+0xb0>
 8006dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dca:	b922      	cbnz	r2, 8006dd6 <quorem+0xf2>
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	d30a      	bcc.n	8006dea <quorem+0x106>
 8006dd4:	613c      	str	r4, [r7, #16]
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	b003      	add	sp, #12
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	3b04      	subs	r3, #4
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d1cc      	bne.n	8006d80 <quorem+0x9c>
 8006de6:	3c01      	subs	r4, #1
 8006de8:	e7c7      	b.n	8006d7a <quorem+0x96>
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d1f0      	bne.n	8006dd4 <quorem+0xf0>
 8006df2:	3c01      	subs	r4, #1
 8006df4:	e7eb      	b.n	8006dce <quorem+0xea>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e7ee      	b.n	8006dd8 <quorem+0xf4>
 8006dfa:	0000      	movs	r0, r0
 8006dfc:	0000      	movs	r0, r0
	...

08006e00 <_dtoa_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	ed2d 8b02 	vpush	{d8}
 8006e08:	ec57 6b10 	vmov	r6, r7, d0
 8006e0c:	b095      	sub	sp, #84	; 0x54
 8006e0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e14:	9105      	str	r1, [sp, #20]
 8006e16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e20:	b975      	cbnz	r5, 8006e40 <_dtoa_r+0x40>
 8006e22:	2010      	movs	r0, #16
 8006e24:	f000 fed6 	bl	8007bd4 <malloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e2c:	b920      	cbnz	r0, 8006e38 <_dtoa_r+0x38>
 8006e2e:	4bb2      	ldr	r3, [pc, #712]	; (80070f8 <_dtoa_r+0x2f8>)
 8006e30:	21ea      	movs	r1, #234	; 0xea
 8006e32:	48b2      	ldr	r0, [pc, #712]	; (80070fc <_dtoa_r+0x2fc>)
 8006e34:	f001 fd9c 	bl	8008970 <__assert_func>
 8006e38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e3c:	6005      	str	r5, [r0, #0]
 8006e3e:	60c5      	str	r5, [r0, #12]
 8006e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	b151      	cbz	r1, 8006e5c <_dtoa_r+0x5c>
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	604a      	str	r2, [r1, #4]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4093      	lsls	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 ff15 	bl	8007c80 <_Bfree>
 8006e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	1e3b      	subs	r3, r7, #0
 8006e5e:	bfb9      	ittee	lt
 8006e60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	9303      	strlt	r3, [sp, #12]
 8006e66:	2300      	movge	r3, #0
 8006e68:	f8c8 3000 	strge.w	r3, [r8]
 8006e6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e70:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <_dtoa_r+0x300>)
 8006e72:	bfbc      	itt	lt
 8006e74:	2201      	movlt	r2, #1
 8006e76:	f8c8 2000 	strlt.w	r2, [r8]
 8006e7a:	ea33 0309 	bics.w	r3, r3, r9
 8006e7e:	d11b      	bne.n	8006eb8 <_dtoa_r+0xb8>
 8006e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e82:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e8c:	4333      	orrs	r3, r6
 8006e8e:	f000 857a 	beq.w	8007986 <_dtoa_r+0xb86>
 8006e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e94:	b963      	cbnz	r3, 8006eb0 <_dtoa_r+0xb0>
 8006e96:	4b9b      	ldr	r3, [pc, #620]	; (8007104 <_dtoa_r+0x304>)
 8006e98:	e024      	b.n	8006ee4 <_dtoa_r+0xe4>
 8006e9a:	4b9b      	ldr	r3, [pc, #620]	; (8007108 <_dtoa_r+0x308>)
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	9800      	ldr	r0, [sp, #0]
 8006ea6:	b015      	add	sp, #84	; 0x54
 8006ea8:	ecbd 8b02 	vpop	{d8}
 8006eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb0:	4b94      	ldr	r3, [pc, #592]	; (8007104 <_dtoa_r+0x304>)
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	3303      	adds	r3, #3
 8006eb6:	e7f3      	b.n	8006ea0 <_dtoa_r+0xa0>
 8006eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	ec51 0b17 	vmov	r0, r1, d7
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006ec8:	f7f9 fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	b158      	cbz	r0, 8006ee8 <_dtoa_r+0xe8>
 8006ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8551 	beq.w	8007980 <_dtoa_r+0xb80>
 8006ede:	488b      	ldr	r0, [pc, #556]	; (800710c <_dtoa_r+0x30c>)
 8006ee0:	6018      	str	r0, [r3, #0]
 8006ee2:	1e43      	subs	r3, r0, #1
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	e7dd      	b.n	8006ea4 <_dtoa_r+0xa4>
 8006ee8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006eec:	aa12      	add	r2, sp, #72	; 0x48
 8006eee:	a913      	add	r1, sp, #76	; 0x4c
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f001 f9a7 	bl	8008244 <__d2b>
 8006ef6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006efa:	4683      	mov	fp, r0
 8006efc:	2d00      	cmp	r5, #0
 8006efe:	d07c      	beq.n	8006ffa <_dtoa_r+0x1fa>
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f1a:	4b7d      	ldr	r3, [pc, #500]	; (8007110 <_dtoa_r+0x310>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 f9d1 	bl	80002c8 <__aeabi_dsub>
 8006f26:	a36e      	add	r3, pc, #440	; (adr r3, 80070e0 <_dtoa_r+0x2e0>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fb84 	bl	8000638 <__aeabi_dmul>
 8006f30:	a36d      	add	r3, pc, #436	; (adr r3, 80070e8 <_dtoa_r+0x2e8>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f9c9 	bl	80002cc <__adddf3>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	460f      	mov	r7, r1
 8006f40:	f7f9 fb10 	bl	8000564 <__aeabi_i2d>
 8006f44:	a36a      	add	r3, pc, #424	; (adr r3, 80070f0 <_dtoa_r+0x2f0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 fb75 	bl	8000638 <__aeabi_dmul>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4630      	mov	r0, r6
 8006f54:	4639      	mov	r1, r7
 8006f56:	f7f9 f9b9 	bl	80002cc <__adddf3>
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	f7f9 fe1b 	bl	8000b98 <__aeabi_d2iz>
 8006f62:	2200      	movs	r2, #0
 8006f64:	4682      	mov	sl, r0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdd6 	bl	8000b1c <__aeabi_dcmplt>
 8006f70:	b148      	cbz	r0, 8006f86 <_dtoa_r+0x186>
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 faf6 	bl	8000564 <__aeabi_i2d>
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	f7f9 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8006f80:	b908      	cbnz	r0, 8006f86 <_dtoa_r+0x186>
 8006f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f86:	f1ba 0f16 	cmp.w	sl, #22
 8006f8a:	d854      	bhi.n	8007036 <_dtoa_r+0x236>
 8006f8c:	4b61      	ldr	r3, [pc, #388]	; (8007114 <_dtoa_r+0x314>)
 8006f8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9a:	f7f9 fdbf 	bl	8000b1c <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d04b      	beq.n	800703a <_dtoa_r+0x23a>
 8006fa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	930e      	str	r3, [sp, #56]	; 0x38
 8006faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fac:	1b5d      	subs	r5, r3, r5
 8006fae:	1e6b      	subs	r3, r5, #1
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	bf43      	ittte	mi
 8006fb4:	2300      	movmi	r3, #0
 8006fb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006fba:	9304      	strmi	r3, [sp, #16]
 8006fbc:	f04f 0800 	movpl.w	r8, #0
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	db3b      	blt.n	800703e <_dtoa_r+0x23e>
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006fcc:	4453      	add	r3, sl
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9306      	str	r3, [sp, #24]
 8006fd4:	9b05      	ldr	r3, [sp, #20]
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d869      	bhi.n	80070ae <_dtoa_r+0x2ae>
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	bfc4      	itt	gt
 8006fde:	3b04      	subgt	r3, #4
 8006fe0:	9305      	strgt	r3, [sp, #20]
 8006fe2:	9b05      	ldr	r3, [sp, #20]
 8006fe4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fe8:	bfcc      	ite	gt
 8006fea:	2500      	movgt	r5, #0
 8006fec:	2501      	movle	r5, #1
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d869      	bhi.n	80070c6 <_dtoa_r+0x2c6>
 8006ff2:	e8df f003 	tbb	[pc, r3]
 8006ff6:	4e2c      	.short	0x4e2c
 8006ff8:	5a4c      	.short	0x5a4c
 8006ffa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ffe:	441d      	add	r5, r3
 8007000:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007004:	2b20      	cmp	r3, #32
 8007006:	bfc1      	itttt	gt
 8007008:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800700c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007010:	fa09 f303 	lslgt.w	r3, r9, r3
 8007014:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007018:	bfda      	itte	le
 800701a:	f1c3 0320 	rsble	r3, r3, #32
 800701e:	fa06 f003 	lslle.w	r0, r6, r3
 8007022:	4318      	orrgt	r0, r3
 8007024:	f7f9 fa8e 	bl	8000544 <__aeabi_ui2d>
 8007028:	2301      	movs	r3, #1
 800702a:	4606      	mov	r6, r0
 800702c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007030:	3d01      	subs	r5, #1
 8007032:	9310      	str	r3, [sp, #64]	; 0x40
 8007034:	e771      	b.n	8006f1a <_dtoa_r+0x11a>
 8007036:	2301      	movs	r3, #1
 8007038:	e7b6      	b.n	8006fa8 <_dtoa_r+0x1a8>
 800703a:	900e      	str	r0, [sp, #56]	; 0x38
 800703c:	e7b5      	b.n	8006faa <_dtoa_r+0x1aa>
 800703e:	f1ca 0300 	rsb	r3, sl, #0
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	2300      	movs	r3, #0
 8007046:	eba8 080a 	sub.w	r8, r8, sl
 800704a:	930d      	str	r3, [sp, #52]	; 0x34
 800704c:	e7c2      	b.n	8006fd4 <_dtoa_r+0x1d4>
 800704e:	2300      	movs	r3, #0
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc39      	bgt.n	80070cc <_dtoa_r+0x2cc>
 8007058:	f04f 0901 	mov.w	r9, #1
 800705c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007060:	464b      	mov	r3, r9
 8007062:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007066:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007068:	2200      	movs	r2, #0
 800706a:	6042      	str	r2, [r0, #4]
 800706c:	2204      	movs	r2, #4
 800706e:	f102 0614 	add.w	r6, r2, #20
 8007072:	429e      	cmp	r6, r3
 8007074:	6841      	ldr	r1, [r0, #4]
 8007076:	d92f      	bls.n	80070d8 <_dtoa_r+0x2d8>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fdc1 	bl	8007c00 <_Balloc>
 800707e:	9000      	str	r0, [sp, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d14b      	bne.n	800711c <_dtoa_r+0x31c>
 8007084:	4b24      	ldr	r3, [pc, #144]	; (8007118 <_dtoa_r+0x318>)
 8007086:	4602      	mov	r2, r0
 8007088:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800708c:	e6d1      	b.n	8006e32 <_dtoa_r+0x32>
 800708e:	2301      	movs	r3, #1
 8007090:	e7de      	b.n	8007050 <_dtoa_r+0x250>
 8007092:	2300      	movs	r3, #0
 8007094:	9308      	str	r3, [sp, #32]
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	eb0a 0903 	add.w	r9, sl, r3
 800709c:	f109 0301 	add.w	r3, r9, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	bfb8      	it	lt
 80070a6:	2301      	movlt	r3, #1
 80070a8:	e7dd      	b.n	8007066 <_dtoa_r+0x266>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e7f2      	b.n	8007094 <_dtoa_r+0x294>
 80070ae:	2501      	movs	r5, #1
 80070b0:	2300      	movs	r3, #0
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	9508      	str	r5, [sp, #32]
 80070b6:	f04f 39ff 	mov.w	r9, #4294967295
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070c0:	2312      	movs	r3, #18
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	e7cf      	b.n	8007066 <_dtoa_r+0x266>
 80070c6:	2301      	movs	r3, #1
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	e7f4      	b.n	80070b6 <_dtoa_r+0x2b6>
 80070cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80070d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80070d4:	464b      	mov	r3, r9
 80070d6:	e7c6      	b.n	8007066 <_dtoa_r+0x266>
 80070d8:	3101      	adds	r1, #1
 80070da:	6041      	str	r1, [r0, #4]
 80070dc:	0052      	lsls	r2, r2, #1
 80070de:	e7c6      	b.n	800706e <_dtoa_r+0x26e>
 80070e0:	636f4361 	.word	0x636f4361
 80070e4:	3fd287a7 	.word	0x3fd287a7
 80070e8:	8b60c8b3 	.word	0x8b60c8b3
 80070ec:	3fc68a28 	.word	0x3fc68a28
 80070f0:	509f79fb 	.word	0x509f79fb
 80070f4:	3fd34413 	.word	0x3fd34413
 80070f8:	080095f1 	.word	0x080095f1
 80070fc:	08009608 	.word	0x08009608
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	080095ed 	.word	0x080095ed
 8007108:	080095e4 	.word	0x080095e4
 800710c:	080095c1 	.word	0x080095c1
 8007110:	3ff80000 	.word	0x3ff80000
 8007114:	08009760 	.word	0x08009760
 8007118:	08009667 	.word	0x08009667
 800711c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711e:	9a00      	ldr	r2, [sp, #0]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	9b01      	ldr	r3, [sp, #4]
 8007124:	2b0e      	cmp	r3, #14
 8007126:	f200 80ad 	bhi.w	8007284 <_dtoa_r+0x484>
 800712a:	2d00      	cmp	r5, #0
 800712c:	f000 80aa 	beq.w	8007284 <_dtoa_r+0x484>
 8007130:	f1ba 0f00 	cmp.w	sl, #0
 8007134:	dd36      	ble.n	80071a4 <_dtoa_r+0x3a4>
 8007136:	4ac3      	ldr	r2, [pc, #780]	; (8007444 <_dtoa_r+0x644>)
 8007138:	f00a 030f 	and.w	r3, sl, #15
 800713c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007140:	ed93 7b00 	vldr	d7, [r3]
 8007144:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007148:	ea4f 172a 	mov.w	r7, sl, asr #4
 800714c:	eeb0 8a47 	vmov.f32	s16, s14
 8007150:	eef0 8a67 	vmov.f32	s17, s15
 8007154:	d016      	beq.n	8007184 <_dtoa_r+0x384>
 8007156:	4bbc      	ldr	r3, [pc, #752]	; (8007448 <_dtoa_r+0x648>)
 8007158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800715c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007160:	f7f9 fb94 	bl	800088c <__aeabi_ddiv>
 8007164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007168:	f007 070f 	and.w	r7, r7, #15
 800716c:	2503      	movs	r5, #3
 800716e:	4eb6      	ldr	r6, [pc, #728]	; (8007448 <_dtoa_r+0x648>)
 8007170:	b957      	cbnz	r7, 8007188 <_dtoa_r+0x388>
 8007172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007176:	ec53 2b18 	vmov	r2, r3, d8
 800717a:	f7f9 fb87 	bl	800088c <__aeabi_ddiv>
 800717e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007182:	e029      	b.n	80071d8 <_dtoa_r+0x3d8>
 8007184:	2502      	movs	r5, #2
 8007186:	e7f2      	b.n	800716e <_dtoa_r+0x36e>
 8007188:	07f9      	lsls	r1, r7, #31
 800718a:	d508      	bpl.n	800719e <_dtoa_r+0x39e>
 800718c:	ec51 0b18 	vmov	r0, r1, d8
 8007190:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007194:	f7f9 fa50 	bl	8000638 <__aeabi_dmul>
 8007198:	ec41 0b18 	vmov	d8, r0, r1
 800719c:	3501      	adds	r5, #1
 800719e:	107f      	asrs	r7, r7, #1
 80071a0:	3608      	adds	r6, #8
 80071a2:	e7e5      	b.n	8007170 <_dtoa_r+0x370>
 80071a4:	f000 80a6 	beq.w	80072f4 <_dtoa_r+0x4f4>
 80071a8:	f1ca 0600 	rsb	r6, sl, #0
 80071ac:	4ba5      	ldr	r3, [pc, #660]	; (8007444 <_dtoa_r+0x644>)
 80071ae:	4fa6      	ldr	r7, [pc, #664]	; (8007448 <_dtoa_r+0x648>)
 80071b0:	f006 020f 	and.w	r2, r6, #15
 80071b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071c0:	f7f9 fa3a 	bl	8000638 <__aeabi_dmul>
 80071c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c8:	1136      	asrs	r6, r6, #4
 80071ca:	2300      	movs	r3, #0
 80071cc:	2502      	movs	r5, #2
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	f040 8085 	bne.w	80072de <_dtoa_r+0x4de>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1d2      	bne.n	800717e <_dtoa_r+0x37e>
 80071d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 808c 	beq.w	80072f8 <_dtoa_r+0x4f8>
 80071e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071e4:	4b99      	ldr	r3, [pc, #612]	; (800744c <_dtoa_r+0x64c>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fc96 	bl	8000b1c <__aeabi_dcmplt>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 8081 	beq.w	80072f8 <_dtoa_r+0x4f8>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d07d      	beq.n	80072f8 <_dtoa_r+0x4f8>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	dd3c      	ble.n	800727c <_dtoa_r+0x47c>
 8007202:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007206:	9307      	str	r3, [sp, #28]
 8007208:	2200      	movs	r2, #0
 800720a:	4b91      	ldr	r3, [pc, #580]	; (8007450 <_dtoa_r+0x650>)
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fa12 	bl	8000638 <__aeabi_dmul>
 8007214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007218:	3501      	adds	r5, #1
 800721a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800721e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007222:	4628      	mov	r0, r5
 8007224:	f7f9 f99e 	bl	8000564 <__aeabi_i2d>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 fa04 	bl	8000638 <__aeabi_dmul>
 8007230:	4b88      	ldr	r3, [pc, #544]	; (8007454 <_dtoa_r+0x654>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 f84a 	bl	80002cc <__adddf3>
 8007238:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800723c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d15c      	bne.n	8007302 <_dtoa_r+0x502>
 8007248:	4b83      	ldr	r3, [pc, #524]	; (8007458 <_dtoa_r+0x658>)
 800724a:	2200      	movs	r2, #0
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f83a 	bl	80002c8 <__aeabi_dsub>
 8007254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	f7f9 fc7c 	bl	8000b58 <__aeabi_dcmpgt>
 8007260:	2800      	cmp	r0, #0
 8007262:	f040 8296 	bne.w	8007792 <_dtoa_r+0x992>
 8007266:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800726a:	4630      	mov	r0, r6
 800726c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007270:	4639      	mov	r1, r7
 8007272:	f7f9 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8288 	bne.w	800778c <_dtoa_r+0x98c>
 800727c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007286:	2b00      	cmp	r3, #0
 8007288:	f2c0 8158 	blt.w	800753c <_dtoa_r+0x73c>
 800728c:	f1ba 0f0e 	cmp.w	sl, #14
 8007290:	f300 8154 	bgt.w	800753c <_dtoa_r+0x73c>
 8007294:	4b6b      	ldr	r3, [pc, #428]	; (8007444 <_dtoa_r+0x644>)
 8007296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800729a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f280 80e3 	bge.w	800746c <_dtoa_r+0x66c>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f300 80df 	bgt.w	800746c <_dtoa_r+0x66c>
 80072ae:	f040 826d 	bne.w	800778c <_dtoa_r+0x98c>
 80072b2:	4b69      	ldr	r3, [pc, #420]	; (8007458 <_dtoa_r+0x658>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f9 f9bd 	bl	8000638 <__aeabi_dmul>
 80072be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c2:	f7f9 fc3f 	bl	8000b44 <__aeabi_dcmpge>
 80072c6:	9e01      	ldr	r6, [sp, #4]
 80072c8:	4637      	mov	r7, r6
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f040 8243 	bne.w	8007756 <_dtoa_r+0x956>
 80072d0:	9d00      	ldr	r5, [sp, #0]
 80072d2:	2331      	movs	r3, #49	; 0x31
 80072d4:	f805 3b01 	strb.w	r3, [r5], #1
 80072d8:	f10a 0a01 	add.w	sl, sl, #1
 80072dc:	e23f      	b.n	800775e <_dtoa_r+0x95e>
 80072de:	07f2      	lsls	r2, r6, #31
 80072e0:	d505      	bpl.n	80072ee <_dtoa_r+0x4ee>
 80072e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e6:	f7f9 f9a7 	bl	8000638 <__aeabi_dmul>
 80072ea:	3501      	adds	r5, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	1076      	asrs	r6, r6, #1
 80072f0:	3708      	adds	r7, #8
 80072f2:	e76c      	b.n	80071ce <_dtoa_r+0x3ce>
 80072f4:	2502      	movs	r5, #2
 80072f6:	e76f      	b.n	80071d8 <_dtoa_r+0x3d8>
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80072fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007300:	e78d      	b.n	800721e <_dtoa_r+0x41e>
 8007302:	9900      	ldr	r1, [sp, #0]
 8007304:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007308:	4b4e      	ldr	r3, [pc, #312]	; (8007444 <_dtoa_r+0x644>)
 800730a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800730e:	4401      	add	r1, r0
 8007310:	9102      	str	r1, [sp, #8]
 8007312:	9908      	ldr	r1, [sp, #32]
 8007314:	eeb0 8a47 	vmov.f32	s16, s14
 8007318:	eef0 8a67 	vmov.f32	s17, s15
 800731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007324:	2900      	cmp	r1, #0
 8007326:	d045      	beq.n	80073b4 <_dtoa_r+0x5b4>
 8007328:	494c      	ldr	r1, [pc, #304]	; (800745c <_dtoa_r+0x65c>)
 800732a:	2000      	movs	r0, #0
 800732c:	f7f9 faae 	bl	800088c <__aeabi_ddiv>
 8007330:	ec53 2b18 	vmov	r2, r3, d8
 8007334:	f7f8 ffc8 	bl	80002c8 <__aeabi_dsub>
 8007338:	9d00      	ldr	r5, [sp, #0]
 800733a:	ec41 0b18 	vmov	d8, r0, r1
 800733e:	4639      	mov	r1, r7
 8007340:	4630      	mov	r0, r6
 8007342:	f7f9 fc29 	bl	8000b98 <__aeabi_d2iz>
 8007346:	900c      	str	r0, [sp, #48]	; 0x30
 8007348:	f7f9 f90c 	bl	8000564 <__aeabi_i2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f8 ffb8 	bl	80002c8 <__aeabi_dsub>
 8007358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800735a:	3330      	adds	r3, #48	; 0x30
 800735c:	f805 3b01 	strb.w	r3, [r5], #1
 8007360:	ec53 2b18 	vmov	r2, r3, d8
 8007364:	4606      	mov	r6, r0
 8007366:	460f      	mov	r7, r1
 8007368:	f7f9 fbd8 	bl	8000b1c <__aeabi_dcmplt>
 800736c:	2800      	cmp	r0, #0
 800736e:	d165      	bne.n	800743c <_dtoa_r+0x63c>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	4935      	ldr	r1, [pc, #212]	; (800744c <_dtoa_r+0x64c>)
 8007376:	2000      	movs	r0, #0
 8007378:	f7f8 ffa6 	bl	80002c8 <__aeabi_dsub>
 800737c:	ec53 2b18 	vmov	r2, r3, d8
 8007380:	f7f9 fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f040 80b9 	bne.w	80074fc <_dtoa_r+0x6fc>
 800738a:	9b02      	ldr	r3, [sp, #8]
 800738c:	429d      	cmp	r5, r3
 800738e:	f43f af75 	beq.w	800727c <_dtoa_r+0x47c>
 8007392:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <_dtoa_r+0x650>)
 8007394:	ec51 0b18 	vmov	r0, r1, d8
 8007398:	2200      	movs	r2, #0
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_dmul>
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <_dtoa_r+0x650>)
 80073a0:	ec41 0b18 	vmov	d8, r0, r1
 80073a4:	2200      	movs	r2, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 f945 	bl	8000638 <__aeabi_dmul>
 80073ae:	4606      	mov	r6, r0
 80073b0:	460f      	mov	r7, r1
 80073b2:	e7c4      	b.n	800733e <_dtoa_r+0x53e>
 80073b4:	ec51 0b17 	vmov	r0, r1, d7
 80073b8:	f7f9 f93e 	bl	8000638 <__aeabi_dmul>
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	9d00      	ldr	r5, [sp, #0]
 80073c0:	930c      	str	r3, [sp, #48]	; 0x30
 80073c2:	ec41 0b18 	vmov	d8, r0, r1
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7f9 fbe5 	bl	8000b98 <__aeabi_d2iz>
 80073ce:	9011      	str	r0, [sp, #68]	; 0x44
 80073d0:	f7f9 f8c8 	bl	8000564 <__aeabi_i2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ff74 	bl	80002c8 <__aeabi_dsub>
 80073e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e2:	3330      	adds	r3, #48	; 0x30
 80073e4:	f805 3b01 	strb.w	r3, [r5], #1
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	429d      	cmp	r5, r3
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	d134      	bne.n	8007460 <_dtoa_r+0x660>
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <_dtoa_r+0x65c>)
 80073f8:	ec51 0b18 	vmov	r0, r1, d8
 80073fc:	f7f8 ff66 	bl	80002cc <__adddf3>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 fba6 	bl	8000b58 <__aeabi_dcmpgt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d175      	bne.n	80074fc <_dtoa_r+0x6fc>
 8007410:	ec53 2b18 	vmov	r2, r3, d8
 8007414:	4911      	ldr	r1, [pc, #68]	; (800745c <_dtoa_r+0x65c>)
 8007416:	2000      	movs	r0, #0
 8007418:	f7f8 ff56 	bl	80002c8 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb7a 	bl	8000b1c <__aeabi_dcmplt>
 8007428:	2800      	cmp	r0, #0
 800742a:	f43f af27 	beq.w	800727c <_dtoa_r+0x47c>
 800742e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007430:	1e6b      	subs	r3, r5, #1
 8007432:	930c      	str	r3, [sp, #48]	; 0x30
 8007434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d0f8      	beq.n	800742e <_dtoa_r+0x62e>
 800743c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007440:	e04a      	b.n	80074d8 <_dtoa_r+0x6d8>
 8007442:	bf00      	nop
 8007444:	08009760 	.word	0x08009760
 8007448:	08009738 	.word	0x08009738
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40240000 	.word	0x40240000
 8007454:	401c0000 	.word	0x401c0000
 8007458:	40140000 	.word	0x40140000
 800745c:	3fe00000 	.word	0x3fe00000
 8007460:	4baf      	ldr	r3, [pc, #700]	; (8007720 <_dtoa_r+0x920>)
 8007462:	f7f9 f8e9 	bl	8000638 <__aeabi_dmul>
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	e7ac      	b.n	80073c6 <_dtoa_r+0x5c6>
 800746c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007470:	9d00      	ldr	r5, [sp, #0]
 8007472:	4642      	mov	r2, r8
 8007474:	464b      	mov	r3, r9
 8007476:	4630      	mov	r0, r6
 8007478:	4639      	mov	r1, r7
 800747a:	f7f9 fa07 	bl	800088c <__aeabi_ddiv>
 800747e:	f7f9 fb8b 	bl	8000b98 <__aeabi_d2iz>
 8007482:	9002      	str	r0, [sp, #8]
 8007484:	f7f9 f86e 	bl	8000564 <__aeabi_i2d>
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	f7f9 f8d4 	bl	8000638 <__aeabi_dmul>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f8 ff16 	bl	80002c8 <__aeabi_dsub>
 800749c:	9e02      	ldr	r6, [sp, #8]
 800749e:	9f01      	ldr	r7, [sp, #4]
 80074a0:	3630      	adds	r6, #48	; 0x30
 80074a2:	f805 6b01 	strb.w	r6, [r5], #1
 80074a6:	9e00      	ldr	r6, [sp, #0]
 80074a8:	1bae      	subs	r6, r5, r6
 80074aa:	42b7      	cmp	r7, r6
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	d137      	bne.n	8007522 <_dtoa_r+0x722>
 80074b2:	f7f8 ff0b 	bl	80002cc <__adddf3>
 80074b6:	4642      	mov	r2, r8
 80074b8:	464b      	mov	r3, r9
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	f7f9 fb4b 	bl	8000b58 <__aeabi_dcmpgt>
 80074c2:	b9c8      	cbnz	r0, 80074f8 <_dtoa_r+0x6f8>
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 80074d0:	b110      	cbz	r0, 80074d8 <_dtoa_r+0x6d8>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	07d9      	lsls	r1, r3, #31
 80074d6:	d40f      	bmi.n	80074f8 <_dtoa_r+0x6f8>
 80074d8:	4620      	mov	r0, r4
 80074da:	4659      	mov	r1, fp
 80074dc:	f000 fbd0 	bl	8007c80 <_Bfree>
 80074e0:	2300      	movs	r3, #0
 80074e2:	702b      	strb	r3, [r5, #0]
 80074e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e6:	f10a 0001 	add.w	r0, sl, #1
 80074ea:	6018      	str	r0, [r3, #0]
 80074ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f43f acd8 	beq.w	8006ea4 <_dtoa_r+0xa4>
 80074f4:	601d      	str	r5, [r3, #0]
 80074f6:	e4d5      	b.n	8006ea4 <_dtoa_r+0xa4>
 80074f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80074fc:	462b      	mov	r3, r5
 80074fe:	461d      	mov	r5, r3
 8007500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007504:	2a39      	cmp	r2, #57	; 0x39
 8007506:	d108      	bne.n	800751a <_dtoa_r+0x71a>
 8007508:	9a00      	ldr	r2, [sp, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d1f7      	bne.n	80074fe <_dtoa_r+0x6fe>
 800750e:	9a07      	ldr	r2, [sp, #28]
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	3201      	adds	r2, #1
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	2230      	movs	r2, #48	; 0x30
 8007518:	700a      	strb	r2, [r1, #0]
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	3201      	adds	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e78c      	b.n	800743c <_dtoa_r+0x63c>
 8007522:	4b7f      	ldr	r3, [pc, #508]	; (8007720 <_dtoa_r+0x920>)
 8007524:	2200      	movs	r2, #0
 8007526:	f7f9 f887 	bl	8000638 <__aeabi_dmul>
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	f7f9 fae9 	bl	8000b08 <__aeabi_dcmpeq>
 8007536:	2800      	cmp	r0, #0
 8007538:	d09b      	beq.n	8007472 <_dtoa_r+0x672>
 800753a:	e7cd      	b.n	80074d8 <_dtoa_r+0x6d8>
 800753c:	9a08      	ldr	r2, [sp, #32]
 800753e:	2a00      	cmp	r2, #0
 8007540:	f000 80c4 	beq.w	80076cc <_dtoa_r+0x8cc>
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	2a01      	cmp	r2, #1
 8007548:	f300 80a8 	bgt.w	800769c <_dtoa_r+0x89c>
 800754c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800754e:	2a00      	cmp	r2, #0
 8007550:	f000 80a0 	beq.w	8007694 <_dtoa_r+0x894>
 8007554:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007558:	9e06      	ldr	r6, [sp, #24]
 800755a:	4645      	mov	r5, r8
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	2101      	movs	r1, #1
 8007560:	441a      	add	r2, r3
 8007562:	4620      	mov	r0, r4
 8007564:	4498      	add	r8, r3
 8007566:	9204      	str	r2, [sp, #16]
 8007568:	f000 fc46 	bl	8007df8 <__i2b>
 800756c:	4607      	mov	r7, r0
 800756e:	2d00      	cmp	r5, #0
 8007570:	dd0b      	ble.n	800758a <_dtoa_r+0x78a>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd08      	ble.n	800758a <_dtoa_r+0x78a>
 8007578:	42ab      	cmp	r3, r5
 800757a:	9a04      	ldr	r2, [sp, #16]
 800757c:	bfa8      	it	ge
 800757e:	462b      	movge	r3, r5
 8007580:	eba8 0803 	sub.w	r8, r8, r3
 8007584:	1aed      	subs	r5, r5, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	b1fb      	cbz	r3, 80075ce <_dtoa_r+0x7ce>
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 809f 	beq.w	80076d4 <_dtoa_r+0x8d4>
 8007596:	2e00      	cmp	r6, #0
 8007598:	dd11      	ble.n	80075be <_dtoa_r+0x7be>
 800759a:	4639      	mov	r1, r7
 800759c:	4632      	mov	r2, r6
 800759e:	4620      	mov	r0, r4
 80075a0:	f000 fce6 	bl	8007f70 <__pow5mult>
 80075a4:	465a      	mov	r2, fp
 80075a6:	4601      	mov	r1, r0
 80075a8:	4607      	mov	r7, r0
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fc3a 	bl	8007e24 <__multiply>
 80075b0:	4659      	mov	r1, fp
 80075b2:	9007      	str	r0, [sp, #28]
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fb63 	bl	8007c80 <_Bfree>
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	469b      	mov	fp, r3
 80075be:	9b06      	ldr	r3, [sp, #24]
 80075c0:	1b9a      	subs	r2, r3, r6
 80075c2:	d004      	beq.n	80075ce <_dtoa_r+0x7ce>
 80075c4:	4659      	mov	r1, fp
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fcd2 	bl	8007f70 <__pow5mult>
 80075cc:	4683      	mov	fp, r0
 80075ce:	2101      	movs	r1, #1
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fc11 	bl	8007df8 <__i2b>
 80075d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	4606      	mov	r6, r0
 80075dc:	dd7c      	ble.n	80076d8 <_dtoa_r+0x8d8>
 80075de:	461a      	mov	r2, r3
 80075e0:	4601      	mov	r1, r0
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fcc4 	bl	8007f70 <__pow5mult>
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	4606      	mov	r6, r0
 80075ee:	dd76      	ble.n	80076de <_dtoa_r+0x8de>
 80075f0:	2300      	movs	r3, #0
 80075f2:	9306      	str	r3, [sp, #24]
 80075f4:	6933      	ldr	r3, [r6, #16]
 80075f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075fa:	6918      	ldr	r0, [r3, #16]
 80075fc:	f000 fbac 	bl	8007d58 <__hi0bits>
 8007600:	f1c0 0020 	rsb	r0, r0, #32
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	4418      	add	r0, r3
 8007608:	f010 001f 	ands.w	r0, r0, #31
 800760c:	f000 8086 	beq.w	800771c <_dtoa_r+0x91c>
 8007610:	f1c0 0320 	rsb	r3, r0, #32
 8007614:	2b04      	cmp	r3, #4
 8007616:	dd7f      	ble.n	8007718 <_dtoa_r+0x918>
 8007618:	f1c0 001c 	rsb	r0, r0, #28
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	4403      	add	r3, r0
 8007620:	4480      	add	r8, r0
 8007622:	4405      	add	r5, r0
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	f1b8 0f00 	cmp.w	r8, #0
 800762a:	dd05      	ble.n	8007638 <_dtoa_r+0x838>
 800762c:	4659      	mov	r1, fp
 800762e:	4642      	mov	r2, r8
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fcf7 	bl	8008024 <__lshift>
 8007636:	4683      	mov	fp, r0
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd05      	ble.n	800764a <_dtoa_r+0x84a>
 800763e:	4631      	mov	r1, r6
 8007640:	461a      	mov	r2, r3
 8007642:	4620      	mov	r0, r4
 8007644:	f000 fcee 	bl	8008024 <__lshift>
 8007648:	4606      	mov	r6, r0
 800764a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d069      	beq.n	8007724 <_dtoa_r+0x924>
 8007650:	4631      	mov	r1, r6
 8007652:	4658      	mov	r0, fp
 8007654:	f000 fd52 	bl	80080fc <__mcmp>
 8007658:	2800      	cmp	r0, #0
 800765a:	da63      	bge.n	8007724 <_dtoa_r+0x924>
 800765c:	2300      	movs	r3, #0
 800765e:	4659      	mov	r1, fp
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fb2e 	bl	8007cc4 <__multadd>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800766e:	4683      	mov	fp, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 818f 	beq.w	8007994 <_dtoa_r+0xb94>
 8007676:	4639      	mov	r1, r7
 8007678:	2300      	movs	r3, #0
 800767a:	220a      	movs	r2, #10
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fb21 	bl	8007cc4 <__multadd>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	4607      	mov	r7, r0
 8007688:	f300 808e 	bgt.w	80077a8 <_dtoa_r+0x9a8>
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	2b02      	cmp	r3, #2
 8007690:	dc50      	bgt.n	8007734 <_dtoa_r+0x934>
 8007692:	e089      	b.n	80077a8 <_dtoa_r+0x9a8>
 8007694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800769a:	e75d      	b.n	8007558 <_dtoa_r+0x758>
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	1e5e      	subs	r6, r3, #1
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	42b3      	cmp	r3, r6
 80076a4:	bfbf      	itttt	lt
 80076a6:	9b06      	ldrlt	r3, [sp, #24]
 80076a8:	9606      	strlt	r6, [sp, #24]
 80076aa:	1af2      	sublt	r2, r6, r3
 80076ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80076ae:	bfb6      	itet	lt
 80076b0:	189b      	addlt	r3, r3, r2
 80076b2:	1b9e      	subge	r6, r3, r6
 80076b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	bfb8      	it	lt
 80076ba:	2600      	movlt	r6, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfb5      	itete	lt
 80076c0:	eba8 0503 	sublt.w	r5, r8, r3
 80076c4:	9b01      	ldrge	r3, [sp, #4]
 80076c6:	2300      	movlt	r3, #0
 80076c8:	4645      	movge	r5, r8
 80076ca:	e747      	b.n	800755c <_dtoa_r+0x75c>
 80076cc:	9e06      	ldr	r6, [sp, #24]
 80076ce:	9f08      	ldr	r7, [sp, #32]
 80076d0:	4645      	mov	r5, r8
 80076d2:	e74c      	b.n	800756e <_dtoa_r+0x76e>
 80076d4:	9a06      	ldr	r2, [sp, #24]
 80076d6:	e775      	b.n	80075c4 <_dtoa_r+0x7c4>
 80076d8:	9b05      	ldr	r3, [sp, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	dc18      	bgt.n	8007710 <_dtoa_r+0x910>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	b9b3      	cbnz	r3, 8007710 <_dtoa_r+0x910>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e8:	b9a3      	cbnz	r3, 8007714 <_dtoa_r+0x914>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	b12b      	cbz	r3, 8007702 <_dtoa_r+0x902>
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	2301      	movs	r3, #1
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	f47f af74 	bne.w	80075f4 <_dtoa_r+0x7f4>
 800770c:	2001      	movs	r0, #1
 800770e:	e779      	b.n	8007604 <_dtoa_r+0x804>
 8007710:	2300      	movs	r3, #0
 8007712:	e7f6      	b.n	8007702 <_dtoa_r+0x902>
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	e7f4      	b.n	8007702 <_dtoa_r+0x902>
 8007718:	d085      	beq.n	8007626 <_dtoa_r+0x826>
 800771a:	4618      	mov	r0, r3
 800771c:	301c      	adds	r0, #28
 800771e:	e77d      	b.n	800761c <_dtoa_r+0x81c>
 8007720:	40240000 	.word	0x40240000
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc38      	bgt.n	800779c <_dtoa_r+0x99c>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	2b02      	cmp	r3, #2
 800772e:	dd35      	ble.n	800779c <_dtoa_r+0x99c>
 8007730:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	d10d      	bne.n	8007756 <_dtoa_r+0x956>
 800773a:	4631      	mov	r1, r6
 800773c:	464b      	mov	r3, r9
 800773e:	2205      	movs	r2, #5
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fabf 	bl	8007cc4 <__multadd>
 8007746:	4601      	mov	r1, r0
 8007748:	4606      	mov	r6, r0
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fcd6 	bl	80080fc <__mcmp>
 8007750:	2800      	cmp	r0, #0
 8007752:	f73f adbd 	bgt.w	80072d0 <_dtoa_r+0x4d0>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	9d00      	ldr	r5, [sp, #0]
 800775a:	ea6f 0a03 	mvn.w	sl, r3
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	4631      	mov	r1, r6
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fa8b 	bl	8007c80 <_Bfree>
 800776a:	2f00      	cmp	r7, #0
 800776c:	f43f aeb4 	beq.w	80074d8 <_dtoa_r+0x6d8>
 8007770:	f1b8 0f00 	cmp.w	r8, #0
 8007774:	d005      	beq.n	8007782 <_dtoa_r+0x982>
 8007776:	45b8      	cmp	r8, r7
 8007778:	d003      	beq.n	8007782 <_dtoa_r+0x982>
 800777a:	4641      	mov	r1, r8
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fa7f 	bl	8007c80 <_Bfree>
 8007782:	4639      	mov	r1, r7
 8007784:	4620      	mov	r0, r4
 8007786:	f000 fa7b 	bl	8007c80 <_Bfree>
 800778a:	e6a5      	b.n	80074d8 <_dtoa_r+0x6d8>
 800778c:	2600      	movs	r6, #0
 800778e:	4637      	mov	r7, r6
 8007790:	e7e1      	b.n	8007756 <_dtoa_r+0x956>
 8007792:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007798:	4637      	mov	r7, r6
 800779a:	e599      	b.n	80072d0 <_dtoa_r+0x4d0>
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80fd 	beq.w	80079a2 <_dtoa_r+0xba2>
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	dd05      	ble.n	80077b8 <_dtoa_r+0x9b8>
 80077ac:	4639      	mov	r1, r7
 80077ae:	462a      	mov	r2, r5
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fc37 	bl	8008024 <__lshift>
 80077b6:	4607      	mov	r7, r0
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d05c      	beq.n	8007878 <_dtoa_r+0xa78>
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fa1d 	bl	8007c00 <_Balloc>
 80077c6:	4605      	mov	r5, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <_dtoa_r+0x9d6>
 80077ca:	4b80      	ldr	r3, [pc, #512]	; (80079cc <_dtoa_r+0xbcc>)
 80077cc:	4602      	mov	r2, r0
 80077ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077d2:	f7ff bb2e 	b.w	8006e32 <_dtoa_r+0x32>
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	3202      	adds	r2, #2
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	f107 010c 	add.w	r1, r7, #12
 80077e0:	300c      	adds	r0, #12
 80077e2:	f000 f9ff 	bl	8007be4 <memcpy>
 80077e6:	2201      	movs	r2, #1
 80077e8:	4629      	mov	r1, r5
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fc1a 	bl	8008024 <__lshift>
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	444b      	add	r3, r9
 80077fa:	9307      	str	r3, [sp, #28]
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	46b8      	mov	r8, r7
 8007804:	9306      	str	r3, [sp, #24]
 8007806:	4607      	mov	r7, r0
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	4631      	mov	r1, r6
 800780c:	3b01      	subs	r3, #1
 800780e:	4658      	mov	r0, fp
 8007810:	9302      	str	r3, [sp, #8]
 8007812:	f7ff fa67 	bl	8006ce4 <quorem>
 8007816:	4603      	mov	r3, r0
 8007818:	3330      	adds	r3, #48	; 0x30
 800781a:	9004      	str	r0, [sp, #16]
 800781c:	4641      	mov	r1, r8
 800781e:	4658      	mov	r0, fp
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	f000 fc6b 	bl	80080fc <__mcmp>
 8007826:	463a      	mov	r2, r7
 8007828:	4681      	mov	r9, r0
 800782a:	4631      	mov	r1, r6
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fc81 	bl	8008134 <__mdiff>
 8007832:	68c2      	ldr	r2, [r0, #12]
 8007834:	9b08      	ldr	r3, [sp, #32]
 8007836:	4605      	mov	r5, r0
 8007838:	bb02      	cbnz	r2, 800787c <_dtoa_r+0xa7c>
 800783a:	4601      	mov	r1, r0
 800783c:	4658      	mov	r0, fp
 800783e:	f000 fc5d 	bl	80080fc <__mcmp>
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	4602      	mov	r2, r0
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800784e:	f000 fa17 	bl	8007c80 <_Bfree>
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007856:	9d01      	ldr	r5, [sp, #4]
 8007858:	ea43 0102 	orr.w	r1, r3, r2
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	430b      	orrs	r3, r1
 8007860:	9b08      	ldr	r3, [sp, #32]
 8007862:	d10d      	bne.n	8007880 <_dtoa_r+0xa80>
 8007864:	2b39      	cmp	r3, #57	; 0x39
 8007866:	d029      	beq.n	80078bc <_dtoa_r+0xabc>
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	dd01      	ble.n	8007872 <_dtoa_r+0xa72>
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	3331      	adds	r3, #49	; 0x31
 8007872:	9a02      	ldr	r2, [sp, #8]
 8007874:	7013      	strb	r3, [r2, #0]
 8007876:	e774      	b.n	8007762 <_dtoa_r+0x962>
 8007878:	4638      	mov	r0, r7
 800787a:	e7b9      	b.n	80077f0 <_dtoa_r+0x9f0>
 800787c:	2201      	movs	r2, #1
 800787e:	e7e2      	b.n	8007846 <_dtoa_r+0xa46>
 8007880:	f1b9 0f00 	cmp.w	r9, #0
 8007884:	db06      	blt.n	8007894 <_dtoa_r+0xa94>
 8007886:	9905      	ldr	r1, [sp, #20]
 8007888:	ea41 0909 	orr.w	r9, r1, r9
 800788c:	9906      	ldr	r1, [sp, #24]
 800788e:	ea59 0101 	orrs.w	r1, r9, r1
 8007892:	d120      	bne.n	80078d6 <_dtoa_r+0xad6>
 8007894:	2a00      	cmp	r2, #0
 8007896:	ddec      	ble.n	8007872 <_dtoa_r+0xa72>
 8007898:	4659      	mov	r1, fp
 800789a:	2201      	movs	r2, #1
 800789c:	4620      	mov	r0, r4
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	f000 fbc0 	bl	8008024 <__lshift>
 80078a4:	4631      	mov	r1, r6
 80078a6:	4683      	mov	fp, r0
 80078a8:	f000 fc28 	bl	80080fc <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	dc02      	bgt.n	80078b8 <_dtoa_r+0xab8>
 80078b2:	d1de      	bne.n	8007872 <_dtoa_r+0xa72>
 80078b4:	07da      	lsls	r2, r3, #31
 80078b6:	d5dc      	bpl.n	8007872 <_dtoa_r+0xa72>
 80078b8:	2b39      	cmp	r3, #57	; 0x39
 80078ba:	d1d8      	bne.n	800786e <_dtoa_r+0xa6e>
 80078bc:	9a02      	ldr	r2, [sp, #8]
 80078be:	2339      	movs	r3, #57	; 0x39
 80078c0:	7013      	strb	r3, [r2, #0]
 80078c2:	462b      	mov	r3, r5
 80078c4:	461d      	mov	r5, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078cc:	2a39      	cmp	r2, #57	; 0x39
 80078ce:	d050      	beq.n	8007972 <_dtoa_r+0xb72>
 80078d0:	3201      	adds	r2, #1
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e745      	b.n	8007762 <_dtoa_r+0x962>
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	dd03      	ble.n	80078e2 <_dtoa_r+0xae2>
 80078da:	2b39      	cmp	r3, #57	; 0x39
 80078dc:	d0ee      	beq.n	80078bc <_dtoa_r+0xabc>
 80078de:	3301      	adds	r3, #1
 80078e0:	e7c7      	b.n	8007872 <_dtoa_r+0xa72>
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	9907      	ldr	r1, [sp, #28]
 80078e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078ea:	428a      	cmp	r2, r1
 80078ec:	d02a      	beq.n	8007944 <_dtoa_r+0xb44>
 80078ee:	4659      	mov	r1, fp
 80078f0:	2300      	movs	r3, #0
 80078f2:	220a      	movs	r2, #10
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 f9e5 	bl	8007cc4 <__multadd>
 80078fa:	45b8      	cmp	r8, r7
 80078fc:	4683      	mov	fp, r0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	f04f 020a 	mov.w	r2, #10
 8007906:	4641      	mov	r1, r8
 8007908:	4620      	mov	r0, r4
 800790a:	d107      	bne.n	800791c <_dtoa_r+0xb1c>
 800790c:	f000 f9da 	bl	8007cc4 <__multadd>
 8007910:	4680      	mov	r8, r0
 8007912:	4607      	mov	r7, r0
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	3301      	adds	r3, #1
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	e775      	b.n	8007808 <_dtoa_r+0xa08>
 800791c:	f000 f9d2 	bl	8007cc4 <__multadd>
 8007920:	4639      	mov	r1, r7
 8007922:	4680      	mov	r8, r0
 8007924:	2300      	movs	r3, #0
 8007926:	220a      	movs	r2, #10
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f9cb 	bl	8007cc4 <__multadd>
 800792e:	4607      	mov	r7, r0
 8007930:	e7f0      	b.n	8007914 <_dtoa_r+0xb14>
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	9a00      	ldr	r2, [sp, #0]
 8007938:	bfcc      	ite	gt
 800793a:	464d      	movgt	r5, r9
 800793c:	2501      	movle	r5, #1
 800793e:	4415      	add	r5, r2
 8007940:	f04f 0800 	mov.w	r8, #0
 8007944:	4659      	mov	r1, fp
 8007946:	2201      	movs	r2, #1
 8007948:	4620      	mov	r0, r4
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	f000 fb6a 	bl	8008024 <__lshift>
 8007950:	4631      	mov	r1, r6
 8007952:	4683      	mov	fp, r0
 8007954:	f000 fbd2 	bl	80080fc <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	dcb2      	bgt.n	80078c2 <_dtoa_r+0xac2>
 800795c:	d102      	bne.n	8007964 <_dtoa_r+0xb64>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	07db      	lsls	r3, r3, #31
 8007962:	d4ae      	bmi.n	80078c2 <_dtoa_r+0xac2>
 8007964:	462b      	mov	r3, r5
 8007966:	461d      	mov	r5, r3
 8007968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800796c:	2a30      	cmp	r2, #48	; 0x30
 800796e:	d0fa      	beq.n	8007966 <_dtoa_r+0xb66>
 8007970:	e6f7      	b.n	8007762 <_dtoa_r+0x962>
 8007972:	9a00      	ldr	r2, [sp, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d1a5      	bne.n	80078c4 <_dtoa_r+0xac4>
 8007978:	f10a 0a01 	add.w	sl, sl, #1
 800797c:	2331      	movs	r3, #49	; 0x31
 800797e:	e779      	b.n	8007874 <_dtoa_r+0xa74>
 8007980:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <_dtoa_r+0xbd0>)
 8007982:	f7ff baaf 	b.w	8006ee4 <_dtoa_r+0xe4>
 8007986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f aa86 	bne.w	8006e9a <_dtoa_r+0x9a>
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <_dtoa_r+0xbd4>)
 8007990:	f7ff baa8 	b.w	8006ee4 <_dtoa_r+0xe4>
 8007994:	f1b9 0f00 	cmp.w	r9, #0
 8007998:	dc03      	bgt.n	80079a2 <_dtoa_r+0xba2>
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	2b02      	cmp	r3, #2
 800799e:	f73f aec9 	bgt.w	8007734 <_dtoa_r+0x934>
 80079a2:	9d00      	ldr	r5, [sp, #0]
 80079a4:	4631      	mov	r1, r6
 80079a6:	4658      	mov	r0, fp
 80079a8:	f7ff f99c 	bl	8006ce4 <quorem>
 80079ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079b0:	f805 3b01 	strb.w	r3, [r5], #1
 80079b4:	9a00      	ldr	r2, [sp, #0]
 80079b6:	1aaa      	subs	r2, r5, r2
 80079b8:	4591      	cmp	r9, r2
 80079ba:	ddba      	ble.n	8007932 <_dtoa_r+0xb32>
 80079bc:	4659      	mov	r1, fp
 80079be:	2300      	movs	r3, #0
 80079c0:	220a      	movs	r2, #10
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 f97e 	bl	8007cc4 <__multadd>
 80079c8:	4683      	mov	fp, r0
 80079ca:	e7eb      	b.n	80079a4 <_dtoa_r+0xba4>
 80079cc:	08009667 	.word	0x08009667
 80079d0:	080095c0 	.word	0x080095c0
 80079d4:	080095e4 	.word	0x080095e4

080079d8 <std>:
 80079d8:	2300      	movs	r3, #0
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
 80079de:	e9c0 3300 	strd	r3, r3, [r0]
 80079e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079e6:	6083      	str	r3, [r0, #8]
 80079e8:	8181      	strh	r1, [r0, #12]
 80079ea:	6643      	str	r3, [r0, #100]	; 0x64
 80079ec:	81c2      	strh	r2, [r0, #14]
 80079ee:	6183      	str	r3, [r0, #24]
 80079f0:	4619      	mov	r1, r3
 80079f2:	2208      	movs	r2, #8
 80079f4:	305c      	adds	r0, #92	; 0x5c
 80079f6:	f7fe fceb 	bl	80063d0 <memset>
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <std+0x38>)
 80079fc:	6263      	str	r3, [r4, #36]	; 0x24
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <std+0x3c>)
 8007a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <std+0x40>)
 8007a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <std+0x44>)
 8007a08:	6224      	str	r4, [r4, #32]
 8007a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	bf00      	nop
 8007a10:	08008745 	.word	0x08008745
 8007a14:	08008767 	.word	0x08008767
 8007a18:	0800879f 	.word	0x0800879f
 8007a1c:	080087c3 	.word	0x080087c3

08007a20 <_cleanup_r>:
 8007a20:	4901      	ldr	r1, [pc, #4]	; (8007a28 <_cleanup_r+0x8>)
 8007a22:	f000 b8af 	b.w	8007b84 <_fwalk_reent>
 8007a26:	bf00      	nop
 8007a28:	08008ad9 	.word	0x08008ad9

08007a2c <__sfmoreglue>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	1e4a      	subs	r2, r1, #1
 8007a30:	2568      	movs	r5, #104	; 0x68
 8007a32:	4355      	muls	r5, r2
 8007a34:	460e      	mov	r6, r1
 8007a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a3a:	f000 fcbf 	bl	80083bc <_malloc_r>
 8007a3e:	4604      	mov	r4, r0
 8007a40:	b140      	cbz	r0, 8007a54 <__sfmoreglue+0x28>
 8007a42:	2100      	movs	r1, #0
 8007a44:	e9c0 1600 	strd	r1, r6, [r0]
 8007a48:	300c      	adds	r0, #12
 8007a4a:	60a0      	str	r0, [r4, #8]
 8007a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a50:	f7fe fcbe 	bl	80063d0 <memset>
 8007a54:	4620      	mov	r0, r4
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <__sfp_lock_acquire>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__sfp_lock_acquire+0x8>)
 8007a5a:	f000 b8b8 	b.w	8007bce <__retarget_lock_acquire_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20000500 	.word	0x20000500

08007a64 <__sfp_lock_release>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__sfp_lock_release+0x8>)
 8007a66:	f000 b8b3 	b.w	8007bd0 <__retarget_lock_release_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20000500 	.word	0x20000500

08007a70 <__sinit_lock_acquire>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__sinit_lock_acquire+0x8>)
 8007a72:	f000 b8ac 	b.w	8007bce <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	200004fb 	.word	0x200004fb

08007a7c <__sinit_lock_release>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	; (8007a84 <__sinit_lock_release+0x8>)
 8007a7e:	f000 b8a7 	b.w	8007bd0 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	200004fb 	.word	0x200004fb

08007a88 <__sinit>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	f7ff fff0 	bl	8007a70 <__sinit_lock_acquire>
 8007a90:	69a3      	ldr	r3, [r4, #24]
 8007a92:	b11b      	cbz	r3, 8007a9c <__sinit+0x14>
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f7ff bff0 	b.w	8007a7c <__sinit_lock_release>
 8007a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <__sinit+0x68>)
 8007aa4:	4a13      	ldr	r2, [pc, #76]	; (8007af4 <__sinit+0x6c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	bf04      	itt	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	61a3      	streq	r3, [r4, #24]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f820 	bl	8007af8 <__sfp>
 8007ab8:	6060      	str	r0, [r4, #4]
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f81c 	bl	8007af8 <__sfp>
 8007ac0:	60a0      	str	r0, [r4, #8]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f818 	bl	8007af8 <__sfp>
 8007ac8:	2200      	movs	r2, #0
 8007aca:	60e0      	str	r0, [r4, #12]
 8007acc:	2104      	movs	r1, #4
 8007ace:	6860      	ldr	r0, [r4, #4]
 8007ad0:	f7ff ff82 	bl	80079d8 <std>
 8007ad4:	68a0      	ldr	r0, [r4, #8]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	2109      	movs	r1, #9
 8007ada:	f7ff ff7d 	bl	80079d8 <std>
 8007ade:	68e0      	ldr	r0, [r4, #12]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	2112      	movs	r1, #18
 8007ae4:	f7ff ff78 	bl	80079d8 <std>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61a3      	str	r3, [r4, #24]
 8007aec:	e7d2      	b.n	8007a94 <__sinit+0xc>
 8007aee:	bf00      	nop
 8007af0:	080095ac 	.word	0x080095ac
 8007af4:	08007a21 	.word	0x08007a21

08007af8 <__sfp>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	4607      	mov	r7, r0
 8007afc:	f7ff ffac 	bl	8007a58 <__sfp_lock_acquire>
 8007b00:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <__sfp+0x84>)
 8007b02:	681e      	ldr	r6, [r3, #0]
 8007b04:	69b3      	ldr	r3, [r6, #24]
 8007b06:	b913      	cbnz	r3, 8007b0e <__sfp+0x16>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ffbd 	bl	8007a88 <__sinit>
 8007b0e:	3648      	adds	r6, #72	; 0x48
 8007b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	d503      	bpl.n	8007b20 <__sfp+0x28>
 8007b18:	6833      	ldr	r3, [r6, #0]
 8007b1a:	b30b      	cbz	r3, 8007b60 <__sfp+0x68>
 8007b1c:	6836      	ldr	r6, [r6, #0]
 8007b1e:	e7f7      	b.n	8007b10 <__sfp+0x18>
 8007b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b24:	b9d5      	cbnz	r5, 8007b5c <__sfp+0x64>
 8007b26:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <__sfp+0x88>)
 8007b28:	60e3      	str	r3, [r4, #12]
 8007b2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b30:	f000 f84c 	bl	8007bcc <__retarget_lock_init_recursive>
 8007b34:	f7ff ff96 	bl	8007a64 <__sfp_lock_release>
 8007b38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b40:	6025      	str	r5, [r4, #0]
 8007b42:	61a5      	str	r5, [r4, #24]
 8007b44:	2208      	movs	r2, #8
 8007b46:	4629      	mov	r1, r5
 8007b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b4c:	f7fe fc40 	bl	80063d0 <memset>
 8007b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b58:	4620      	mov	r0, r4
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5c:	3468      	adds	r4, #104	; 0x68
 8007b5e:	e7d9      	b.n	8007b14 <__sfp+0x1c>
 8007b60:	2104      	movs	r1, #4
 8007b62:	4638      	mov	r0, r7
 8007b64:	f7ff ff62 	bl	8007a2c <__sfmoreglue>
 8007b68:	4604      	mov	r4, r0
 8007b6a:	6030      	str	r0, [r6, #0]
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d1d5      	bne.n	8007b1c <__sfp+0x24>
 8007b70:	f7ff ff78 	bl	8007a64 <__sfp_lock_release>
 8007b74:	230c      	movs	r3, #12
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	e7ee      	b.n	8007b58 <__sfp+0x60>
 8007b7a:	bf00      	nop
 8007b7c:	080095ac 	.word	0x080095ac
 8007b80:	ffff0001 	.word	0xffff0001

08007b84 <_fwalk_reent>:
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4606      	mov	r6, r0
 8007b8a:	4688      	mov	r8, r1
 8007b8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b90:	2700      	movs	r7, #0
 8007b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b96:	f1b9 0901 	subs.w	r9, r9, #1
 8007b9a:	d505      	bpl.n	8007ba8 <_fwalk_reent+0x24>
 8007b9c:	6824      	ldr	r4, [r4, #0]
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d1f7      	bne.n	8007b92 <_fwalk_reent+0xe>
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba8:	89ab      	ldrh	r3, [r5, #12]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d907      	bls.n	8007bbe <_fwalk_reent+0x3a>
 8007bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	d003      	beq.n	8007bbe <_fwalk_reent+0x3a>
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4630      	mov	r0, r6
 8007bba:	47c0      	blx	r8
 8007bbc:	4307      	orrs	r7, r0
 8007bbe:	3568      	adds	r5, #104	; 0x68
 8007bc0:	e7e9      	b.n	8007b96 <_fwalk_reent+0x12>
	...

08007bc4 <_localeconv_r>:
 8007bc4:	4800      	ldr	r0, [pc, #0]	; (8007bc8 <_localeconv_r+0x4>)
 8007bc6:	4770      	bx	lr
 8007bc8:	20000210 	.word	0x20000210

08007bcc <__retarget_lock_init_recursive>:
 8007bcc:	4770      	bx	lr

08007bce <__retarget_lock_acquire_recursive>:
 8007bce:	4770      	bx	lr

08007bd0 <__retarget_lock_release_recursive>:
 8007bd0:	4770      	bx	lr
	...

08007bd4 <malloc>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <malloc+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f000 bbef 	b.w	80083bc <_malloc_r>
 8007bde:	bf00      	nop
 8007be0:	200000bc 	.word	0x200000bc

08007be4 <memcpy>:
 8007be4:	440a      	add	r2, r1
 8007be6:	4291      	cmp	r1, r2
 8007be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bec:	d100      	bne.n	8007bf0 <memcpy+0xc>
 8007bee:	4770      	bx	lr
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	d1f9      	bne.n	8007bf2 <memcpy+0xe>
 8007bfe:	bd10      	pop	{r4, pc}

08007c00 <_Balloc>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	b976      	cbnz	r6, 8007c28 <_Balloc+0x28>
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f7ff ffe2 	bl	8007bd4 <malloc>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6260      	str	r0, [r4, #36]	; 0x24
 8007c14:	b920      	cbnz	r0, 8007c20 <_Balloc+0x20>
 8007c16:	4b18      	ldr	r3, [pc, #96]	; (8007c78 <_Balloc+0x78>)
 8007c18:	4818      	ldr	r0, [pc, #96]	; (8007c7c <_Balloc+0x7c>)
 8007c1a:	2166      	movs	r1, #102	; 0x66
 8007c1c:	f000 fea8 	bl	8008970 <__assert_func>
 8007c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c24:	6006      	str	r6, [r0, #0]
 8007c26:	60c6      	str	r6, [r0, #12]
 8007c28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c2a:	68f3      	ldr	r3, [r6, #12]
 8007c2c:	b183      	cbz	r3, 8007c50 <_Balloc+0x50>
 8007c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c36:	b9b8      	cbnz	r0, 8007c68 <_Balloc+0x68>
 8007c38:	2101      	movs	r1, #1
 8007c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c3e:	1d72      	adds	r2, r6, #5
 8007c40:	0092      	lsls	r2, r2, #2
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fb5a 	bl	80082fc <_calloc_r>
 8007c48:	b160      	cbz	r0, 8007c64 <_Balloc+0x64>
 8007c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c4e:	e00e      	b.n	8007c6e <_Balloc+0x6e>
 8007c50:	2221      	movs	r2, #33	; 0x21
 8007c52:	2104      	movs	r1, #4
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fb51 	bl	80082fc <_calloc_r>
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	60f0      	str	r0, [r6, #12]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e4      	bne.n	8007c2e <_Balloc+0x2e>
 8007c64:	2000      	movs	r0, #0
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	6802      	ldr	r2, [r0, #0]
 8007c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c74:	e7f7      	b.n	8007c66 <_Balloc+0x66>
 8007c76:	bf00      	nop
 8007c78:	080095f1 	.word	0x080095f1
 8007c7c:	080096d8 	.word	0x080096d8

08007c80 <_Bfree>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c84:	4605      	mov	r5, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b976      	cbnz	r6, 8007ca8 <_Bfree+0x28>
 8007c8a:	2010      	movs	r0, #16
 8007c8c:	f7ff ffa2 	bl	8007bd4 <malloc>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6268      	str	r0, [r5, #36]	; 0x24
 8007c94:	b920      	cbnz	r0, 8007ca0 <_Bfree+0x20>
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <_Bfree+0x3c>)
 8007c98:	4809      	ldr	r0, [pc, #36]	; (8007cc0 <_Bfree+0x40>)
 8007c9a:	218a      	movs	r1, #138	; 0x8a
 8007c9c:	f000 fe68 	bl	8008970 <__assert_func>
 8007ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca4:	6006      	str	r6, [r0, #0]
 8007ca6:	60c6      	str	r6, [r0, #12]
 8007ca8:	b13c      	cbz	r4, 8007cba <_Bfree+0x3a>
 8007caa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cac:	6862      	ldr	r2, [r4, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cb4:	6021      	str	r1, [r4, #0]
 8007cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	080095f1 	.word	0x080095f1
 8007cc0:	080096d8 	.word	0x080096d8

08007cc4 <__multadd>:
 8007cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	690e      	ldr	r6, [r1, #16]
 8007cca:	4607      	mov	r7, r0
 8007ccc:	4698      	mov	r8, r3
 8007cce:	460c      	mov	r4, r1
 8007cd0:	f101 0014 	add.w	r0, r1, #20
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6805      	ldr	r5, [r0, #0]
 8007cd8:	b2a9      	uxth	r1, r5
 8007cda:	fb02 8101 	mla	r1, r2, r1, r8
 8007cde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ce2:	0c2d      	lsrs	r5, r5, #16
 8007ce4:	fb02 c505 	mla	r5, r2, r5, ip
 8007ce8:	b289      	uxth	r1, r1
 8007cea:	3301      	adds	r3, #1
 8007cec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007cf0:	429e      	cmp	r6, r3
 8007cf2:	f840 1b04 	str.w	r1, [r0], #4
 8007cf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007cfa:	dcec      	bgt.n	8007cd6 <__multadd+0x12>
 8007cfc:	f1b8 0f00 	cmp.w	r8, #0
 8007d00:	d022      	beq.n	8007d48 <__multadd+0x84>
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	42b3      	cmp	r3, r6
 8007d06:	dc19      	bgt.n	8007d3c <__multadd+0x78>
 8007d08:	6861      	ldr	r1, [r4, #4]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	f7ff ff77 	bl	8007c00 <_Balloc>
 8007d12:	4605      	mov	r5, r0
 8007d14:	b928      	cbnz	r0, 8007d22 <__multadd+0x5e>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <__multadd+0x8c>)
 8007d1a:	480e      	ldr	r0, [pc, #56]	; (8007d54 <__multadd+0x90>)
 8007d1c:	21b5      	movs	r1, #181	; 0xb5
 8007d1e:	f000 fe27 	bl	8008970 <__assert_func>
 8007d22:	6922      	ldr	r2, [r4, #16]
 8007d24:	3202      	adds	r2, #2
 8007d26:	f104 010c 	add.w	r1, r4, #12
 8007d2a:	0092      	lsls	r2, r2, #2
 8007d2c:	300c      	adds	r0, #12
 8007d2e:	f7ff ff59 	bl	8007be4 <memcpy>
 8007d32:	4621      	mov	r1, r4
 8007d34:	4638      	mov	r0, r7
 8007d36:	f7ff ffa3 	bl	8007c80 <_Bfree>
 8007d3a:	462c      	mov	r4, r5
 8007d3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d40:	3601      	adds	r6, #1
 8007d42:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d46:	6126      	str	r6, [r4, #16]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4e:	bf00      	nop
 8007d50:	08009667 	.word	0x08009667
 8007d54:	080096d8 	.word	0x080096d8

08007d58 <__hi0bits>:
 8007d58:	0c03      	lsrs	r3, r0, #16
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	b9d3      	cbnz	r3, 8007d94 <__hi0bits+0x3c>
 8007d5e:	0400      	lsls	r0, r0, #16
 8007d60:	2310      	movs	r3, #16
 8007d62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d66:	bf04      	itt	eq
 8007d68:	0200      	lsleq	r0, r0, #8
 8007d6a:	3308      	addeq	r3, #8
 8007d6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d70:	bf04      	itt	eq
 8007d72:	0100      	lsleq	r0, r0, #4
 8007d74:	3304      	addeq	r3, #4
 8007d76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d7a:	bf04      	itt	eq
 8007d7c:	0080      	lsleq	r0, r0, #2
 8007d7e:	3302      	addeq	r3, #2
 8007d80:	2800      	cmp	r0, #0
 8007d82:	db05      	blt.n	8007d90 <__hi0bits+0x38>
 8007d84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d88:	f103 0301 	add.w	r3, r3, #1
 8007d8c:	bf08      	it	eq
 8007d8e:	2320      	moveq	r3, #32
 8007d90:	4618      	mov	r0, r3
 8007d92:	4770      	bx	lr
 8007d94:	2300      	movs	r3, #0
 8007d96:	e7e4      	b.n	8007d62 <__hi0bits+0xa>

08007d98 <__lo0bits>:
 8007d98:	6803      	ldr	r3, [r0, #0]
 8007d9a:	f013 0207 	ands.w	r2, r3, #7
 8007d9e:	4601      	mov	r1, r0
 8007da0:	d00b      	beq.n	8007dba <__lo0bits+0x22>
 8007da2:	07da      	lsls	r2, r3, #31
 8007da4:	d424      	bmi.n	8007df0 <__lo0bits+0x58>
 8007da6:	0798      	lsls	r0, r3, #30
 8007da8:	bf49      	itett	mi
 8007daa:	085b      	lsrmi	r3, r3, #1
 8007dac:	089b      	lsrpl	r3, r3, #2
 8007dae:	2001      	movmi	r0, #1
 8007db0:	600b      	strmi	r3, [r1, #0]
 8007db2:	bf5c      	itt	pl
 8007db4:	600b      	strpl	r3, [r1, #0]
 8007db6:	2002      	movpl	r0, #2
 8007db8:	4770      	bx	lr
 8007dba:	b298      	uxth	r0, r3
 8007dbc:	b9b0      	cbnz	r0, 8007dec <__lo0bits+0x54>
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	2010      	movs	r0, #16
 8007dc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dc6:	bf04      	itt	eq
 8007dc8:	0a1b      	lsreq	r3, r3, #8
 8007dca:	3008      	addeq	r0, #8
 8007dcc:	071a      	lsls	r2, r3, #28
 8007dce:	bf04      	itt	eq
 8007dd0:	091b      	lsreq	r3, r3, #4
 8007dd2:	3004      	addeq	r0, #4
 8007dd4:	079a      	lsls	r2, r3, #30
 8007dd6:	bf04      	itt	eq
 8007dd8:	089b      	lsreq	r3, r3, #2
 8007dda:	3002      	addeq	r0, #2
 8007ddc:	07da      	lsls	r2, r3, #31
 8007dde:	d403      	bmi.n	8007de8 <__lo0bits+0x50>
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	f100 0001 	add.w	r0, r0, #1
 8007de6:	d005      	beq.n	8007df4 <__lo0bits+0x5c>
 8007de8:	600b      	str	r3, [r1, #0]
 8007dea:	4770      	bx	lr
 8007dec:	4610      	mov	r0, r2
 8007dee:	e7e8      	b.n	8007dc2 <__lo0bits+0x2a>
 8007df0:	2000      	movs	r0, #0
 8007df2:	4770      	bx	lr
 8007df4:	2020      	movs	r0, #32
 8007df6:	4770      	bx	lr

08007df8 <__i2b>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	f7ff feff 	bl	8007c00 <_Balloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	b928      	cbnz	r0, 8007e12 <__i2b+0x1a>
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <__i2b+0x24>)
 8007e08:	4805      	ldr	r0, [pc, #20]	; (8007e20 <__i2b+0x28>)
 8007e0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e0e:	f000 fdaf 	bl	8008970 <__assert_func>
 8007e12:	2301      	movs	r3, #1
 8007e14:	6144      	str	r4, [r0, #20]
 8007e16:	6103      	str	r3, [r0, #16]
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08009667 	.word	0x08009667
 8007e20:	080096d8 	.word	0x080096d8

08007e24 <__multiply>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	4614      	mov	r4, r2
 8007e2a:	690a      	ldr	r2, [r1, #16]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	bfb8      	it	lt
 8007e32:	460b      	movlt	r3, r1
 8007e34:	460d      	mov	r5, r1
 8007e36:	bfbc      	itt	lt
 8007e38:	4625      	movlt	r5, r4
 8007e3a:	461c      	movlt	r4, r3
 8007e3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e44:	68ab      	ldr	r3, [r5, #8]
 8007e46:	6869      	ldr	r1, [r5, #4]
 8007e48:	eb0a 0709 	add.w	r7, sl, r9
 8007e4c:	42bb      	cmp	r3, r7
 8007e4e:	b085      	sub	sp, #20
 8007e50:	bfb8      	it	lt
 8007e52:	3101      	addlt	r1, #1
 8007e54:	f7ff fed4 	bl	8007c00 <_Balloc>
 8007e58:	b930      	cbnz	r0, 8007e68 <__multiply+0x44>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <__multiply+0x144>)
 8007e5e:	4843      	ldr	r0, [pc, #268]	; (8007f6c <__multiply+0x148>)
 8007e60:	f240 115d 	movw	r1, #349	; 0x15d
 8007e64:	f000 fd84 	bl	8008970 <__assert_func>
 8007e68:	f100 0614 	add.w	r6, r0, #20
 8007e6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e70:	4633      	mov	r3, r6
 8007e72:	2200      	movs	r2, #0
 8007e74:	4543      	cmp	r3, r8
 8007e76:	d31e      	bcc.n	8007eb6 <__multiply+0x92>
 8007e78:	f105 0c14 	add.w	ip, r5, #20
 8007e7c:	f104 0314 	add.w	r3, r4, #20
 8007e80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e88:	9202      	str	r2, [sp, #8]
 8007e8a:	ebac 0205 	sub.w	r2, ip, r5
 8007e8e:	3a15      	subs	r2, #21
 8007e90:	f022 0203 	bic.w	r2, r2, #3
 8007e94:	3204      	adds	r2, #4
 8007e96:	f105 0115 	add.w	r1, r5, #21
 8007e9a:	458c      	cmp	ip, r1
 8007e9c:	bf38      	it	cc
 8007e9e:	2204      	movcc	r2, #4
 8007ea0:	9201      	str	r2, [sp, #4]
 8007ea2:	9a02      	ldr	r2, [sp, #8]
 8007ea4:	9303      	str	r3, [sp, #12]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d808      	bhi.n	8007ebc <__multiply+0x98>
 8007eaa:	2f00      	cmp	r7, #0
 8007eac:	dc55      	bgt.n	8007f5a <__multiply+0x136>
 8007eae:	6107      	str	r7, [r0, #16]
 8007eb0:	b005      	add	sp, #20
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	f843 2b04 	str.w	r2, [r3], #4
 8007eba:	e7db      	b.n	8007e74 <__multiply+0x50>
 8007ebc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ec0:	f1ba 0f00 	cmp.w	sl, #0
 8007ec4:	d020      	beq.n	8007f08 <__multiply+0xe4>
 8007ec6:	f105 0e14 	add.w	lr, r5, #20
 8007eca:	46b1      	mov	r9, r6
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ed2:	f8d9 b000 	ldr.w	fp, [r9]
 8007ed6:	b2a1      	uxth	r1, r4
 8007ed8:	fa1f fb8b 	uxth.w	fp, fp
 8007edc:	fb0a b101 	mla	r1, sl, r1, fp
 8007ee0:	4411      	add	r1, r2
 8007ee2:	f8d9 2000 	ldr.w	r2, [r9]
 8007ee6:	0c24      	lsrs	r4, r4, #16
 8007ee8:	0c12      	lsrs	r2, r2, #16
 8007eea:	fb0a 2404 	mla	r4, sl, r4, r2
 8007eee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ef2:	b289      	uxth	r1, r1
 8007ef4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ef8:	45f4      	cmp	ip, lr
 8007efa:	f849 1b04 	str.w	r1, [r9], #4
 8007efe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007f02:	d8e4      	bhi.n	8007ece <__multiply+0xaa>
 8007f04:	9901      	ldr	r1, [sp, #4]
 8007f06:	5072      	str	r2, [r6, r1]
 8007f08:	9a03      	ldr	r2, [sp, #12]
 8007f0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	f1b9 0f00 	cmp.w	r9, #0
 8007f14:	d01f      	beq.n	8007f56 <__multiply+0x132>
 8007f16:	6834      	ldr	r4, [r6, #0]
 8007f18:	f105 0114 	add.w	r1, r5, #20
 8007f1c:	46b6      	mov	lr, r6
 8007f1e:	f04f 0a00 	mov.w	sl, #0
 8007f22:	880a      	ldrh	r2, [r1, #0]
 8007f24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f28:	fb09 b202 	mla	r2, r9, r2, fp
 8007f2c:	4492      	add	sl, r2
 8007f2e:	b2a4      	uxth	r4, r4
 8007f30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f34:	f84e 4b04 	str.w	r4, [lr], #4
 8007f38:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f3c:	f8be 2000 	ldrh.w	r2, [lr]
 8007f40:	0c24      	lsrs	r4, r4, #16
 8007f42:	fb09 2404 	mla	r4, r9, r4, r2
 8007f46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f4a:	458c      	cmp	ip, r1
 8007f4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f50:	d8e7      	bhi.n	8007f22 <__multiply+0xfe>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	50b4      	str	r4, [r6, r2]
 8007f56:	3604      	adds	r6, #4
 8007f58:	e7a3      	b.n	8007ea2 <__multiply+0x7e>
 8007f5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1a5      	bne.n	8007eae <__multiply+0x8a>
 8007f62:	3f01      	subs	r7, #1
 8007f64:	e7a1      	b.n	8007eaa <__multiply+0x86>
 8007f66:	bf00      	nop
 8007f68:	08009667 	.word	0x08009667
 8007f6c:	080096d8 	.word	0x080096d8

08007f70 <__pow5mult>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	4615      	mov	r5, r2
 8007f76:	f012 0203 	ands.w	r2, r2, #3
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	d007      	beq.n	8007f90 <__pow5mult+0x20>
 8007f80:	4c25      	ldr	r4, [pc, #148]	; (8008018 <__pow5mult+0xa8>)
 8007f82:	3a01      	subs	r2, #1
 8007f84:	2300      	movs	r3, #0
 8007f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f8a:	f7ff fe9b 	bl	8007cc4 <__multadd>
 8007f8e:	4607      	mov	r7, r0
 8007f90:	10ad      	asrs	r5, r5, #2
 8007f92:	d03d      	beq.n	8008010 <__pow5mult+0xa0>
 8007f94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f96:	b97c      	cbnz	r4, 8007fb8 <__pow5mult+0x48>
 8007f98:	2010      	movs	r0, #16
 8007f9a:	f7ff fe1b 	bl	8007bd4 <malloc>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fa2:	b928      	cbnz	r0, 8007fb0 <__pow5mult+0x40>
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	; (800801c <__pow5mult+0xac>)
 8007fa6:	481e      	ldr	r0, [pc, #120]	; (8008020 <__pow5mult+0xb0>)
 8007fa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fac:	f000 fce0 	bl	8008970 <__assert_func>
 8007fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fb4:	6004      	str	r4, [r0, #0]
 8007fb6:	60c4      	str	r4, [r0, #12]
 8007fb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fc0:	b94c      	cbnz	r4, 8007fd6 <__pow5mult+0x66>
 8007fc2:	f240 2171 	movw	r1, #625	; 0x271
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff16 	bl	8007df8 <__i2b>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	f04f 0900 	mov.w	r9, #0
 8007fda:	07eb      	lsls	r3, r5, #31
 8007fdc:	d50a      	bpl.n	8007ff4 <__pow5mult+0x84>
 8007fde:	4639      	mov	r1, r7
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff ff1e 	bl	8007e24 <__multiply>
 8007fe8:	4639      	mov	r1, r7
 8007fea:	4680      	mov	r8, r0
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff fe47 	bl	8007c80 <_Bfree>
 8007ff2:	4647      	mov	r7, r8
 8007ff4:	106d      	asrs	r5, r5, #1
 8007ff6:	d00b      	beq.n	8008010 <__pow5mult+0xa0>
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	b938      	cbnz	r0, 800800c <__pow5mult+0x9c>
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	4621      	mov	r1, r4
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff ff0f 	bl	8007e24 <__multiply>
 8008006:	6020      	str	r0, [r4, #0]
 8008008:	f8c0 9000 	str.w	r9, [r0]
 800800c:	4604      	mov	r4, r0
 800800e:	e7e4      	b.n	8007fda <__pow5mult+0x6a>
 8008010:	4638      	mov	r0, r7
 8008012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008016:	bf00      	nop
 8008018:	08009828 	.word	0x08009828
 800801c:	080095f1 	.word	0x080095f1
 8008020:	080096d8 	.word	0x080096d8

08008024 <__lshift>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	460c      	mov	r4, r1
 800802a:	6849      	ldr	r1, [r1, #4]
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	4607      	mov	r7, r0
 8008036:	4691      	mov	r9, r2
 8008038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800803c:	f108 0601 	add.w	r6, r8, #1
 8008040:	42b3      	cmp	r3, r6
 8008042:	db0b      	blt.n	800805c <__lshift+0x38>
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fddb 	bl	8007c00 <_Balloc>
 800804a:	4605      	mov	r5, r0
 800804c:	b948      	cbnz	r0, 8008062 <__lshift+0x3e>
 800804e:	4602      	mov	r2, r0
 8008050:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <__lshift+0xd0>)
 8008052:	4829      	ldr	r0, [pc, #164]	; (80080f8 <__lshift+0xd4>)
 8008054:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008058:	f000 fc8a 	bl	8008970 <__assert_func>
 800805c:	3101      	adds	r1, #1
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	e7ee      	b.n	8008040 <__lshift+0x1c>
 8008062:	2300      	movs	r3, #0
 8008064:	f100 0114 	add.w	r1, r0, #20
 8008068:	f100 0210 	add.w	r2, r0, #16
 800806c:	4618      	mov	r0, r3
 800806e:	4553      	cmp	r3, sl
 8008070:	db33      	blt.n	80080da <__lshift+0xb6>
 8008072:	6920      	ldr	r0, [r4, #16]
 8008074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008078:	f104 0314 	add.w	r3, r4, #20
 800807c:	f019 091f 	ands.w	r9, r9, #31
 8008080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008088:	d02b      	beq.n	80080e2 <__lshift+0xbe>
 800808a:	f1c9 0e20 	rsb	lr, r9, #32
 800808e:	468a      	mov	sl, r1
 8008090:	2200      	movs	r2, #0
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	fa00 f009 	lsl.w	r0, r0, r9
 8008098:	4302      	orrs	r2, r0
 800809a:	f84a 2b04 	str.w	r2, [sl], #4
 800809e:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a2:	459c      	cmp	ip, r3
 80080a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80080a8:	d8f3      	bhi.n	8008092 <__lshift+0x6e>
 80080aa:	ebac 0304 	sub.w	r3, ip, r4
 80080ae:	3b15      	subs	r3, #21
 80080b0:	f023 0303 	bic.w	r3, r3, #3
 80080b4:	3304      	adds	r3, #4
 80080b6:	f104 0015 	add.w	r0, r4, #21
 80080ba:	4584      	cmp	ip, r0
 80080bc:	bf38      	it	cc
 80080be:	2304      	movcc	r3, #4
 80080c0:	50ca      	str	r2, [r1, r3]
 80080c2:	b10a      	cbz	r2, 80080c8 <__lshift+0xa4>
 80080c4:	f108 0602 	add.w	r6, r8, #2
 80080c8:	3e01      	subs	r6, #1
 80080ca:	4638      	mov	r0, r7
 80080cc:	612e      	str	r6, [r5, #16]
 80080ce:	4621      	mov	r1, r4
 80080d0:	f7ff fdd6 	bl	8007c80 <_Bfree>
 80080d4:	4628      	mov	r0, r5
 80080d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080da:	f842 0f04 	str.w	r0, [r2, #4]!
 80080de:	3301      	adds	r3, #1
 80080e0:	e7c5      	b.n	800806e <__lshift+0x4a>
 80080e2:	3904      	subs	r1, #4
 80080e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80080ec:	459c      	cmp	ip, r3
 80080ee:	d8f9      	bhi.n	80080e4 <__lshift+0xc0>
 80080f0:	e7ea      	b.n	80080c8 <__lshift+0xa4>
 80080f2:	bf00      	nop
 80080f4:	08009667 	.word	0x08009667
 80080f8:	080096d8 	.word	0x080096d8

080080fc <__mcmp>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	6902      	ldr	r2, [r0, #16]
 8008100:	690c      	ldr	r4, [r1, #16]
 8008102:	1b12      	subs	r2, r2, r4
 8008104:	d10e      	bne.n	8008124 <__mcmp+0x28>
 8008106:	f100 0314 	add.w	r3, r0, #20
 800810a:	3114      	adds	r1, #20
 800810c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800811c:	42a5      	cmp	r5, r4
 800811e:	d003      	beq.n	8008128 <__mcmp+0x2c>
 8008120:	d305      	bcc.n	800812e <__mcmp+0x32>
 8008122:	2201      	movs	r2, #1
 8008124:	4610      	mov	r0, r2
 8008126:	bd30      	pop	{r4, r5, pc}
 8008128:	4283      	cmp	r3, r0
 800812a:	d3f3      	bcc.n	8008114 <__mcmp+0x18>
 800812c:	e7fa      	b.n	8008124 <__mcmp+0x28>
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	e7f7      	b.n	8008124 <__mcmp+0x28>

08008134 <__mdiff>:
 8008134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	4606      	mov	r6, r0
 800813c:	4611      	mov	r1, r2
 800813e:	4620      	mov	r0, r4
 8008140:	4617      	mov	r7, r2
 8008142:	f7ff ffdb 	bl	80080fc <__mcmp>
 8008146:	1e05      	subs	r5, r0, #0
 8008148:	d110      	bne.n	800816c <__mdiff+0x38>
 800814a:	4629      	mov	r1, r5
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff fd57 	bl	8007c00 <_Balloc>
 8008152:	b930      	cbnz	r0, 8008162 <__mdiff+0x2e>
 8008154:	4b39      	ldr	r3, [pc, #228]	; (800823c <__mdiff+0x108>)
 8008156:	4602      	mov	r2, r0
 8008158:	f240 2132 	movw	r1, #562	; 0x232
 800815c:	4838      	ldr	r0, [pc, #224]	; (8008240 <__mdiff+0x10c>)
 800815e:	f000 fc07 	bl	8008970 <__assert_func>
 8008162:	2301      	movs	r3, #1
 8008164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	bfa4      	itt	ge
 800816e:	463b      	movge	r3, r7
 8008170:	4627      	movge	r7, r4
 8008172:	4630      	mov	r0, r6
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	bfa6      	itte	ge
 8008178:	461c      	movge	r4, r3
 800817a:	2500      	movge	r5, #0
 800817c:	2501      	movlt	r5, #1
 800817e:	f7ff fd3f 	bl	8007c00 <_Balloc>
 8008182:	b920      	cbnz	r0, 800818e <__mdiff+0x5a>
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <__mdiff+0x108>)
 8008186:	4602      	mov	r2, r0
 8008188:	f44f 7110 	mov.w	r1, #576	; 0x240
 800818c:	e7e6      	b.n	800815c <__mdiff+0x28>
 800818e:	693e      	ldr	r6, [r7, #16]
 8008190:	60c5      	str	r5, [r0, #12]
 8008192:	6925      	ldr	r5, [r4, #16]
 8008194:	f107 0114 	add.w	r1, r7, #20
 8008198:	f104 0914 	add.w	r9, r4, #20
 800819c:	f100 0e14 	add.w	lr, r0, #20
 80081a0:	f107 0210 	add.w	r2, r7, #16
 80081a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80081a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80081ac:	46f2      	mov	sl, lr
 80081ae:	2700      	movs	r7, #0
 80081b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081b8:	fa1f f883 	uxth.w	r8, r3
 80081bc:	fa17 f78b 	uxtah	r7, r7, fp
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	eba7 0808 	sub.w	r8, r7, r8
 80081c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081ce:	fa1f f888 	uxth.w	r8, r8
 80081d2:	141f      	asrs	r7, r3, #16
 80081d4:	454d      	cmp	r5, r9
 80081d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081da:	f84a 3b04 	str.w	r3, [sl], #4
 80081de:	d8e7      	bhi.n	80081b0 <__mdiff+0x7c>
 80081e0:	1b2b      	subs	r3, r5, r4
 80081e2:	3b15      	subs	r3, #21
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	3304      	adds	r3, #4
 80081ea:	3415      	adds	r4, #21
 80081ec:	42a5      	cmp	r5, r4
 80081ee:	bf38      	it	cc
 80081f0:	2304      	movcc	r3, #4
 80081f2:	4419      	add	r1, r3
 80081f4:	4473      	add	r3, lr
 80081f6:	469e      	mov	lr, r3
 80081f8:	460d      	mov	r5, r1
 80081fa:	4565      	cmp	r5, ip
 80081fc:	d30e      	bcc.n	800821c <__mdiff+0xe8>
 80081fe:	f10c 0203 	add.w	r2, ip, #3
 8008202:	1a52      	subs	r2, r2, r1
 8008204:	f022 0203 	bic.w	r2, r2, #3
 8008208:	3903      	subs	r1, #3
 800820a:	458c      	cmp	ip, r1
 800820c:	bf38      	it	cc
 800820e:	2200      	movcc	r2, #0
 8008210:	441a      	add	r2, r3
 8008212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008216:	b17b      	cbz	r3, 8008238 <__mdiff+0x104>
 8008218:	6106      	str	r6, [r0, #16]
 800821a:	e7a5      	b.n	8008168 <__mdiff+0x34>
 800821c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008220:	fa17 f488 	uxtah	r4, r7, r8
 8008224:	1422      	asrs	r2, r4, #16
 8008226:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800822a:	b2a4      	uxth	r4, r4
 800822c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008230:	f84e 4b04 	str.w	r4, [lr], #4
 8008234:	1417      	asrs	r7, r2, #16
 8008236:	e7e0      	b.n	80081fa <__mdiff+0xc6>
 8008238:	3e01      	subs	r6, #1
 800823a:	e7ea      	b.n	8008212 <__mdiff+0xde>
 800823c:	08009667 	.word	0x08009667
 8008240:	080096d8 	.word	0x080096d8

08008244 <__d2b>:
 8008244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4689      	mov	r9, r1
 800824a:	2101      	movs	r1, #1
 800824c:	ec57 6b10 	vmov	r6, r7, d0
 8008250:	4690      	mov	r8, r2
 8008252:	f7ff fcd5 	bl	8007c00 <_Balloc>
 8008256:	4604      	mov	r4, r0
 8008258:	b930      	cbnz	r0, 8008268 <__d2b+0x24>
 800825a:	4602      	mov	r2, r0
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <__d2b+0xb0>)
 800825e:	4826      	ldr	r0, [pc, #152]	; (80082f8 <__d2b+0xb4>)
 8008260:	f240 310a 	movw	r1, #778	; 0x30a
 8008264:	f000 fb84 	bl	8008970 <__assert_func>
 8008268:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800826c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008270:	bb35      	cbnz	r5, 80082c0 <__d2b+0x7c>
 8008272:	2e00      	cmp	r6, #0
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	d028      	beq.n	80082ca <__d2b+0x86>
 8008278:	4668      	mov	r0, sp
 800827a:	9600      	str	r6, [sp, #0]
 800827c:	f7ff fd8c 	bl	8007d98 <__lo0bits>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	b300      	cbz	r0, 80082c6 <__d2b+0x82>
 8008284:	9a01      	ldr	r2, [sp, #4]
 8008286:	f1c0 0320 	rsb	r3, r0, #32
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	430b      	orrs	r3, r1
 8008290:	40c2      	lsrs	r2, r0
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	61a3      	str	r3, [r4, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2202      	movne	r2, #2
 80082a0:	2201      	moveq	r2, #1
 80082a2:	6122      	str	r2, [r4, #16]
 80082a4:	b1d5      	cbz	r5, 80082dc <__d2b+0x98>
 80082a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082aa:	4405      	add	r5, r0
 80082ac:	f8c9 5000 	str.w	r5, [r9]
 80082b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082b4:	f8c8 0000 	str.w	r0, [r8]
 80082b8:	4620      	mov	r0, r4
 80082ba:	b003      	add	sp, #12
 80082bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c4:	e7d5      	b.n	8008272 <__d2b+0x2e>
 80082c6:	6161      	str	r1, [r4, #20]
 80082c8:	e7e5      	b.n	8008296 <__d2b+0x52>
 80082ca:	a801      	add	r0, sp, #4
 80082cc:	f7ff fd64 	bl	8007d98 <__lo0bits>
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	2201      	movs	r2, #1
 80082d6:	6122      	str	r2, [r4, #16]
 80082d8:	3020      	adds	r0, #32
 80082da:	e7e3      	b.n	80082a4 <__d2b+0x60>
 80082dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082e4:	f8c9 0000 	str.w	r0, [r9]
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f7ff fd35 	bl	8007d58 <__hi0bits>
 80082ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082f2:	e7df      	b.n	80082b4 <__d2b+0x70>
 80082f4:	08009667 	.word	0x08009667
 80082f8:	080096d8 	.word	0x080096d8

080082fc <_calloc_r>:
 80082fc:	b513      	push	{r0, r1, r4, lr}
 80082fe:	434a      	muls	r2, r1
 8008300:	4611      	mov	r1, r2
 8008302:	9201      	str	r2, [sp, #4]
 8008304:	f000 f85a 	bl	80083bc <_malloc_r>
 8008308:	4604      	mov	r4, r0
 800830a:	b118      	cbz	r0, 8008314 <_calloc_r+0x18>
 800830c:	9a01      	ldr	r2, [sp, #4]
 800830e:	2100      	movs	r1, #0
 8008310:	f7fe f85e 	bl	80063d0 <memset>
 8008314:	4620      	mov	r0, r4
 8008316:	b002      	add	sp, #8
 8008318:	bd10      	pop	{r4, pc}
	...

0800831c <_free_r>:
 800831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831e:	2900      	cmp	r1, #0
 8008320:	d048      	beq.n	80083b4 <_free_r+0x98>
 8008322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008326:	9001      	str	r0, [sp, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f1a1 0404 	sub.w	r4, r1, #4
 800832e:	bfb8      	it	lt
 8008330:	18e4      	addlt	r4, r4, r3
 8008332:	f000 fca7 	bl	8008c84 <__malloc_lock>
 8008336:	4a20      	ldr	r2, [pc, #128]	; (80083b8 <_free_r+0x9c>)
 8008338:	9801      	ldr	r0, [sp, #4]
 800833a:	6813      	ldr	r3, [r2, #0]
 800833c:	4615      	mov	r5, r2
 800833e:	b933      	cbnz	r3, 800834e <_free_r+0x32>
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	6014      	str	r4, [r2, #0]
 8008344:	b003      	add	sp, #12
 8008346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834a:	f000 bca1 	b.w	8008c90 <__malloc_unlock>
 800834e:	42a3      	cmp	r3, r4
 8008350:	d90b      	bls.n	800836a <_free_r+0x4e>
 8008352:	6821      	ldr	r1, [r4, #0]
 8008354:	1862      	adds	r2, r4, r1
 8008356:	4293      	cmp	r3, r2
 8008358:	bf04      	itt	eq
 800835a:	681a      	ldreq	r2, [r3, #0]
 800835c:	685b      	ldreq	r3, [r3, #4]
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	bf04      	itt	eq
 8008362:	1852      	addeq	r2, r2, r1
 8008364:	6022      	streq	r2, [r4, #0]
 8008366:	602c      	str	r4, [r5, #0]
 8008368:	e7ec      	b.n	8008344 <_free_r+0x28>
 800836a:	461a      	mov	r2, r3
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b10b      	cbz	r3, 8008374 <_free_r+0x58>
 8008370:	42a3      	cmp	r3, r4
 8008372:	d9fa      	bls.n	800836a <_free_r+0x4e>
 8008374:	6811      	ldr	r1, [r2, #0]
 8008376:	1855      	adds	r5, r2, r1
 8008378:	42a5      	cmp	r5, r4
 800837a:	d10b      	bne.n	8008394 <_free_r+0x78>
 800837c:	6824      	ldr	r4, [r4, #0]
 800837e:	4421      	add	r1, r4
 8008380:	1854      	adds	r4, r2, r1
 8008382:	42a3      	cmp	r3, r4
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	d1dd      	bne.n	8008344 <_free_r+0x28>
 8008388:	681c      	ldr	r4, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	6053      	str	r3, [r2, #4]
 800838e:	4421      	add	r1, r4
 8008390:	6011      	str	r1, [r2, #0]
 8008392:	e7d7      	b.n	8008344 <_free_r+0x28>
 8008394:	d902      	bls.n	800839c <_free_r+0x80>
 8008396:	230c      	movs	r3, #12
 8008398:	6003      	str	r3, [r0, #0]
 800839a:	e7d3      	b.n	8008344 <_free_r+0x28>
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	1961      	adds	r1, r4, r5
 80083a0:	428b      	cmp	r3, r1
 80083a2:	bf04      	itt	eq
 80083a4:	6819      	ldreq	r1, [r3, #0]
 80083a6:	685b      	ldreq	r3, [r3, #4]
 80083a8:	6063      	str	r3, [r4, #4]
 80083aa:	bf04      	itt	eq
 80083ac:	1949      	addeq	r1, r1, r5
 80083ae:	6021      	streq	r1, [r4, #0]
 80083b0:	6054      	str	r4, [r2, #4]
 80083b2:	e7c7      	b.n	8008344 <_free_r+0x28>
 80083b4:	b003      	add	sp, #12
 80083b6:	bd30      	pop	{r4, r5, pc}
 80083b8:	20000354 	.word	0x20000354

080083bc <_malloc_r>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	1ccd      	adds	r5, r1, #3
 80083c0:	f025 0503 	bic.w	r5, r5, #3
 80083c4:	3508      	adds	r5, #8
 80083c6:	2d0c      	cmp	r5, #12
 80083c8:	bf38      	it	cc
 80083ca:	250c      	movcc	r5, #12
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	4606      	mov	r6, r0
 80083d0:	db01      	blt.n	80083d6 <_malloc_r+0x1a>
 80083d2:	42a9      	cmp	r1, r5
 80083d4:	d903      	bls.n	80083de <_malloc_r+0x22>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6033      	str	r3, [r6, #0]
 80083da:	2000      	movs	r0, #0
 80083dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083de:	f000 fc51 	bl	8008c84 <__malloc_lock>
 80083e2:	4921      	ldr	r1, [pc, #132]	; (8008468 <_malloc_r+0xac>)
 80083e4:	680a      	ldr	r2, [r1, #0]
 80083e6:	4614      	mov	r4, r2
 80083e8:	b99c      	cbnz	r4, 8008412 <_malloc_r+0x56>
 80083ea:	4f20      	ldr	r7, [pc, #128]	; (800846c <_malloc_r+0xb0>)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	b923      	cbnz	r3, 80083fa <_malloc_r+0x3e>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4630      	mov	r0, r6
 80083f4:	f000 f996 	bl	8008724 <_sbrk_r>
 80083f8:	6038      	str	r0, [r7, #0]
 80083fa:	4629      	mov	r1, r5
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 f991 	bl	8008724 <_sbrk_r>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d123      	bne.n	800844e <_malloc_r+0x92>
 8008406:	230c      	movs	r3, #12
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	4630      	mov	r0, r6
 800840c:	f000 fc40 	bl	8008c90 <__malloc_unlock>
 8008410:	e7e3      	b.n	80083da <_malloc_r+0x1e>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	1b5b      	subs	r3, r3, r5
 8008416:	d417      	bmi.n	8008448 <_malloc_r+0x8c>
 8008418:	2b0b      	cmp	r3, #11
 800841a:	d903      	bls.n	8008424 <_malloc_r+0x68>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	441c      	add	r4, r3
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	e004      	b.n	800842e <_malloc_r+0x72>
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	42a2      	cmp	r2, r4
 8008428:	bf0c      	ite	eq
 800842a:	600b      	streq	r3, [r1, #0]
 800842c:	6053      	strne	r3, [r2, #4]
 800842e:	4630      	mov	r0, r6
 8008430:	f000 fc2e 	bl	8008c90 <__malloc_unlock>
 8008434:	f104 000b 	add.w	r0, r4, #11
 8008438:	1d23      	adds	r3, r4, #4
 800843a:	f020 0007 	bic.w	r0, r0, #7
 800843e:	1ac2      	subs	r2, r0, r3
 8008440:	d0cc      	beq.n	80083dc <_malloc_r+0x20>
 8008442:	1a1b      	subs	r3, r3, r0
 8008444:	50a3      	str	r3, [r4, r2]
 8008446:	e7c9      	b.n	80083dc <_malloc_r+0x20>
 8008448:	4622      	mov	r2, r4
 800844a:	6864      	ldr	r4, [r4, #4]
 800844c:	e7cc      	b.n	80083e8 <_malloc_r+0x2c>
 800844e:	1cc4      	adds	r4, r0, #3
 8008450:	f024 0403 	bic.w	r4, r4, #3
 8008454:	42a0      	cmp	r0, r4
 8008456:	d0e3      	beq.n	8008420 <_malloc_r+0x64>
 8008458:	1a21      	subs	r1, r4, r0
 800845a:	4630      	mov	r0, r6
 800845c:	f000 f962 	bl	8008724 <_sbrk_r>
 8008460:	3001      	adds	r0, #1
 8008462:	d1dd      	bne.n	8008420 <_malloc_r+0x64>
 8008464:	e7cf      	b.n	8008406 <_malloc_r+0x4a>
 8008466:	bf00      	nop
 8008468:	20000354 	.word	0x20000354
 800846c:	20000358 	.word	0x20000358

08008470 <__sfputc_r>:
 8008470:	6893      	ldr	r3, [r2, #8]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	b410      	push	{r4}
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	da08      	bge.n	800848e <__sfputc_r+0x1e>
 800847c:	6994      	ldr	r4, [r2, #24]
 800847e:	42a3      	cmp	r3, r4
 8008480:	db01      	blt.n	8008486 <__sfputc_r+0x16>
 8008482:	290a      	cmp	r1, #10
 8008484:	d103      	bne.n	800848e <__sfputc_r+0x1e>
 8008486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800848a:	f000 b99f 	b.w	80087cc <__swbuf_r>
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	1c58      	adds	r0, r3, #1
 8008492:	6010      	str	r0, [r2, #0]
 8008494:	7019      	strb	r1, [r3, #0]
 8008496:	4608      	mov	r0, r1
 8008498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849c:	4770      	bx	lr

0800849e <__sfputs_r>:
 800849e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a0:	4606      	mov	r6, r0
 80084a2:	460f      	mov	r7, r1
 80084a4:	4614      	mov	r4, r2
 80084a6:	18d5      	adds	r5, r2, r3
 80084a8:	42ac      	cmp	r4, r5
 80084aa:	d101      	bne.n	80084b0 <__sfputs_r+0x12>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e007      	b.n	80084c0 <__sfputs_r+0x22>
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	463a      	mov	r2, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff ffda 	bl	8008470 <__sfputc_r>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d1f3      	bne.n	80084a8 <__sfputs_r+0xa>
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c4 <_vfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	460d      	mov	r5, r1
 80084ca:	b09d      	sub	sp, #116	; 0x74
 80084cc:	4614      	mov	r4, r2
 80084ce:	4698      	mov	r8, r3
 80084d0:	4606      	mov	r6, r0
 80084d2:	b118      	cbz	r0, 80084dc <_vfiprintf_r+0x18>
 80084d4:	6983      	ldr	r3, [r0, #24]
 80084d6:	b90b      	cbnz	r3, 80084dc <_vfiprintf_r+0x18>
 80084d8:	f7ff fad6 	bl	8007a88 <__sinit>
 80084dc:	4b89      	ldr	r3, [pc, #548]	; (8008704 <_vfiprintf_r+0x240>)
 80084de:	429d      	cmp	r5, r3
 80084e0:	d11b      	bne.n	800851a <_vfiprintf_r+0x56>
 80084e2:	6875      	ldr	r5, [r6, #4]
 80084e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d405      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d402      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f2:	f7ff fb6c 	bl	8007bce <__retarget_lock_acquire_recursive>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	d501      	bpl.n	8008500 <_vfiprintf_r+0x3c>
 80084fc:	692b      	ldr	r3, [r5, #16]
 80084fe:	b9eb      	cbnz	r3, 800853c <_vfiprintf_r+0x78>
 8008500:	4629      	mov	r1, r5
 8008502:	4630      	mov	r0, r6
 8008504:	f000 f9c6 	bl	8008894 <__swsetup_r>
 8008508:	b1c0      	cbz	r0, 800853c <_vfiprintf_r+0x78>
 800850a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850c:	07dc      	lsls	r4, r3, #31
 800850e:	d50e      	bpl.n	800852e <_vfiprintf_r+0x6a>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b01d      	add	sp, #116	; 0x74
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <_vfiprintf_r+0x244>)
 800851c:	429d      	cmp	r5, r3
 800851e:	d101      	bne.n	8008524 <_vfiprintf_r+0x60>
 8008520:	68b5      	ldr	r5, [r6, #8]
 8008522:	e7df      	b.n	80084e4 <_vfiprintf_r+0x20>
 8008524:	4b79      	ldr	r3, [pc, #484]	; (800870c <_vfiprintf_r+0x248>)
 8008526:	429d      	cmp	r5, r3
 8008528:	bf08      	it	eq
 800852a:	68f5      	ldreq	r5, [r6, #12]
 800852c:	e7da      	b.n	80084e4 <_vfiprintf_r+0x20>
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4ed      	bmi.n	8008510 <_vfiprintf_r+0x4c>
 8008534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008536:	f7ff fb4b 	bl	8007bd0 <__retarget_lock_release_recursive>
 800853a:	e7e9      	b.n	8008510 <_vfiprintf_r+0x4c>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008710 <_vfiprintf_r+0x24c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0xa2>
 8008562:	2a25      	cmp	r2, #37	; 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x96>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xc0>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ff93 	bl	800849e <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80aa 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	; 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80a2 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a4:	931a      	str	r3, [sp, #104]	; 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4858      	ldr	r0, [pc, #352]	; (8008710 <_vfiprintf_r+0x24c>)
 80085b0:	f7f7 fe36 	bl	8000220 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x12c>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	; 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x13c>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	; 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94e      	bls.n	8008688 <_vfiprintf_r+0x1c4>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x156>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x156>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xe2>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	; 0x2e
 800861e:	d10c      	bne.n	800863a <_vfiprintf_r+0x176>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	; 0x2a
 8008624:	d135      	bne.n	8008692 <_vfiprintf_r+0x1ce>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	f04f 33ff 	movlt.w	r3, #4294967295
 8008636:	3402      	adds	r4, #2
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008720 <_vfiprintf_r+0x25c>
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	2203      	movs	r2, #3
 8008642:	4650      	mov	r0, sl
 8008644:	f7f7 fdec 	bl	8000220 <memchr>
 8008648:	b140      	cbz	r0, 800865c <_vfiprintf_r+0x198>
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	eba0 000a 	sub.w	r0, r0, sl
 8008650:	fa03 f000 	lsl.w	r0, r3, r0
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	4303      	orrs	r3, r0
 8008658:	3401      	adds	r4, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	482c      	ldr	r0, [pc, #176]	; (8008714 <_vfiprintf_r+0x250>)
 8008662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008666:	2206      	movs	r2, #6
 8008668:	f7f7 fdda 	bl	8000220 <memchr>
 800866c:	2800      	cmp	r0, #0
 800866e:	d03f      	beq.n	80086f0 <_vfiprintf_r+0x22c>
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <_vfiprintf_r+0x254>)
 8008672:	bb1b      	cbnz	r3, 80086bc <_vfiprintf_r+0x1f8>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	3307      	adds	r3, #7
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	3308      	adds	r3, #8
 800867e:	9303      	str	r3, [sp, #12]
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	443b      	add	r3, r7
 8008684:	9309      	str	r3, [sp, #36]	; 0x24
 8008686:	e767      	b.n	8008558 <_vfiprintf_r+0x94>
 8008688:	fb0c 3202 	mla	r2, ip, r2, r3
 800868c:	460c      	mov	r4, r1
 800868e:	2001      	movs	r0, #1
 8008690:	e7a5      	b.n	80085de <_vfiprintf_r+0x11a>
 8008692:	2300      	movs	r3, #0
 8008694:	3401      	adds	r4, #1
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	4619      	mov	r1, r3
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4620      	mov	r0, r4
 80086a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a4:	3a30      	subs	r2, #48	; 0x30
 80086a6:	2a09      	cmp	r2, #9
 80086a8:	d903      	bls.n	80086b2 <_vfiprintf_r+0x1ee>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0c5      	beq.n	800863a <_vfiprintf_r+0x176>
 80086ae:	9105      	str	r1, [sp, #20]
 80086b0:	e7c3      	b.n	800863a <_vfiprintf_r+0x176>
 80086b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b6:	4604      	mov	r4, r0
 80086b8:	2301      	movs	r3, #1
 80086ba:	e7f0      	b.n	800869e <_vfiprintf_r+0x1da>
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <_vfiprintf_r+0x258>)
 80086c4:	a904      	add	r1, sp, #16
 80086c6:	4630      	mov	r0, r6
 80086c8:	f7fd ff2a 	bl	8006520 <_printf_float>
 80086cc:	4607      	mov	r7, r0
 80086ce:	1c78      	adds	r0, r7, #1
 80086d0:	d1d6      	bne.n	8008680 <_vfiprintf_r+0x1bc>
 80086d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	d405      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086d8:	89ab      	ldrh	r3, [r5, #12]
 80086da:	059a      	lsls	r2, r3, #22
 80086dc:	d402      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e0:	f7ff fa76 	bl	8007bd0 <__retarget_lock_release_recursive>
 80086e4:	89ab      	ldrh	r3, [r5, #12]
 80086e6:	065b      	lsls	r3, r3, #25
 80086e8:	f53f af12 	bmi.w	8008510 <_vfiprintf_r+0x4c>
 80086ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ee:	e711      	b.n	8008514 <_vfiprintf_r+0x50>
 80086f0:	ab03      	add	r3, sp, #12
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	462a      	mov	r2, r5
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <_vfiprintf_r+0x258>)
 80086f8:	a904      	add	r1, sp, #16
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7fe f9b4 	bl	8006a68 <_printf_i>
 8008700:	e7e4      	b.n	80086cc <_vfiprintf_r+0x208>
 8008702:	bf00      	nop
 8008704:	08009698 	.word	0x08009698
 8008708:	080096b8 	.word	0x080096b8
 800870c:	08009678 	.word	0x08009678
 8008710:	08009834 	.word	0x08009834
 8008714:	0800983e 	.word	0x0800983e
 8008718:	08006521 	.word	0x08006521
 800871c:	0800849f 	.word	0x0800849f
 8008720:	0800983a 	.word	0x0800983a

08008724 <_sbrk_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d06      	ldr	r5, [pc, #24]	; (8008740 <_sbrk_r+0x1c>)
 8008728:	2300      	movs	r3, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7fa fa58 	bl	8002be4 <_sbrk>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_sbrk_r+0x1a>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_sbrk_r+0x1a>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20000504 	.word	0x20000504

08008744 <__sread>:
 8008744:	b510      	push	{r4, lr}
 8008746:	460c      	mov	r4, r1
 8008748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874c:	f000 faa6 	bl	8008c9c <_read_r>
 8008750:	2800      	cmp	r0, #0
 8008752:	bfab      	itete	ge
 8008754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008756:	89a3      	ldrhlt	r3, [r4, #12]
 8008758:	181b      	addge	r3, r3, r0
 800875a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800875e:	bfac      	ite	ge
 8008760:	6563      	strge	r3, [r4, #84]	; 0x54
 8008762:	81a3      	strhlt	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__swrite>:
 8008766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876a:	461f      	mov	r7, r3
 800876c:	898b      	ldrh	r3, [r1, #12]
 800876e:	05db      	lsls	r3, r3, #23
 8008770:	4605      	mov	r5, r0
 8008772:	460c      	mov	r4, r1
 8008774:	4616      	mov	r6, r2
 8008776:	d505      	bpl.n	8008784 <__swrite+0x1e>
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	2302      	movs	r3, #2
 800877e:	2200      	movs	r2, #0
 8008780:	f000 f9f8 	bl	8008b74 <_lseek_r>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	4632      	mov	r2, r6
 8008792:	463b      	mov	r3, r7
 8008794:	4628      	mov	r0, r5
 8008796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	f000 b869 	b.w	8008870 <_write_r>

0800879e <__sseek>:
 800879e:	b510      	push	{r4, lr}
 80087a0:	460c      	mov	r4, r1
 80087a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a6:	f000 f9e5 	bl	8008b74 <_lseek_r>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	bf15      	itete	ne
 80087b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087ba:	81a3      	strheq	r3, [r4, #12]
 80087bc:	bf18      	it	ne
 80087be:	81a3      	strhne	r3, [r4, #12]
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <__sclose>:
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 b8f1 	b.w	80089ac <_close_r>
	...

080087cc <__swbuf_r>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	460e      	mov	r6, r1
 80087d0:	4614      	mov	r4, r2
 80087d2:	4605      	mov	r5, r0
 80087d4:	b118      	cbz	r0, 80087de <__swbuf_r+0x12>
 80087d6:	6983      	ldr	r3, [r0, #24]
 80087d8:	b90b      	cbnz	r3, 80087de <__swbuf_r+0x12>
 80087da:	f7ff f955 	bl	8007a88 <__sinit>
 80087de:	4b21      	ldr	r3, [pc, #132]	; (8008864 <__swbuf_r+0x98>)
 80087e0:	429c      	cmp	r4, r3
 80087e2:	d12b      	bne.n	800883c <__swbuf_r+0x70>
 80087e4:	686c      	ldr	r4, [r5, #4]
 80087e6:	69a3      	ldr	r3, [r4, #24]
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	071a      	lsls	r2, r3, #28
 80087ee:	d52f      	bpl.n	8008850 <__swbuf_r+0x84>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	b36b      	cbz	r3, 8008850 <__swbuf_r+0x84>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	1ac0      	subs	r0, r0, r3
 80087fa:	6963      	ldr	r3, [r4, #20]
 80087fc:	b2f6      	uxtb	r6, r6
 80087fe:	4283      	cmp	r3, r0
 8008800:	4637      	mov	r7, r6
 8008802:	dc04      	bgt.n	800880e <__swbuf_r+0x42>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f966 	bl	8008ad8 <_fflush_r>
 800880c:	bb30      	cbnz	r0, 800885c <__swbuf_r+0x90>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	3b01      	subs	r3, #1
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	701e      	strb	r6, [r3, #0]
 800881c:	6963      	ldr	r3, [r4, #20]
 800881e:	3001      	adds	r0, #1
 8008820:	4283      	cmp	r3, r0
 8008822:	d004      	beq.n	800882e <__swbuf_r+0x62>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	07db      	lsls	r3, r3, #31
 8008828:	d506      	bpl.n	8008838 <__swbuf_r+0x6c>
 800882a:	2e0a      	cmp	r6, #10
 800882c:	d104      	bne.n	8008838 <__swbuf_r+0x6c>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f951 	bl	8008ad8 <_fflush_r>
 8008836:	b988      	cbnz	r0, 800885c <__swbuf_r+0x90>
 8008838:	4638      	mov	r0, r7
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <__swbuf_r+0x9c>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <__swbuf_r+0x7a>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7cf      	b.n	80087e6 <__swbuf_r+0x1a>
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <__swbuf_r+0xa0>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7ca      	b.n	80087e6 <__swbuf_r+0x1a>
 8008850:	4621      	mov	r1, r4
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f81e 	bl	8008894 <__swsetup_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	d0cb      	beq.n	80087f4 <__swbuf_r+0x28>
 800885c:	f04f 37ff 	mov.w	r7, #4294967295
 8008860:	e7ea      	b.n	8008838 <__swbuf_r+0x6c>
 8008862:	bf00      	nop
 8008864:	08009698 	.word	0x08009698
 8008868:	080096b8 	.word	0x080096b8
 800886c:	08009678 	.word	0x08009678

08008870 <_write_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_write_r+0x20>)
 8008874:	4604      	mov	r4, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	602a      	str	r2, [r5, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7fa f95f 	bl	8002b42 <_write>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_write_r+0x1e>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_write_r+0x1e>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20000504 	.word	0x20000504

08008894 <__swsetup_r>:
 8008894:	4b32      	ldr	r3, [pc, #200]	; (8008960 <__swsetup_r+0xcc>)
 8008896:	b570      	push	{r4, r5, r6, lr}
 8008898:	681d      	ldr	r5, [r3, #0]
 800889a:	4606      	mov	r6, r0
 800889c:	460c      	mov	r4, r1
 800889e:	b125      	cbz	r5, 80088aa <__swsetup_r+0x16>
 80088a0:	69ab      	ldr	r3, [r5, #24]
 80088a2:	b913      	cbnz	r3, 80088aa <__swsetup_r+0x16>
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7ff f8ef 	bl	8007a88 <__sinit>
 80088aa:	4b2e      	ldr	r3, [pc, #184]	; (8008964 <__swsetup_r+0xd0>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d10f      	bne.n	80088d0 <__swsetup_r+0x3c>
 80088b0:	686c      	ldr	r4, [r5, #4]
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b8:	0719      	lsls	r1, r3, #28
 80088ba:	d42c      	bmi.n	8008916 <__swsetup_r+0x82>
 80088bc:	06dd      	lsls	r5, r3, #27
 80088be:	d411      	bmi.n	80088e4 <__swsetup_r+0x50>
 80088c0:	2309      	movs	r3, #9
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	e03e      	b.n	800894e <__swsetup_r+0xba>
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <__swsetup_r+0xd4>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d101      	bne.n	80088da <__swsetup_r+0x46>
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	e7eb      	b.n	80088b2 <__swsetup_r+0x1e>
 80088da:	4b24      	ldr	r3, [pc, #144]	; (800896c <__swsetup_r+0xd8>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	bf08      	it	eq
 80088e0:	68ec      	ldreq	r4, [r5, #12]
 80088e2:	e7e6      	b.n	80088b2 <__swsetup_r+0x1e>
 80088e4:	0758      	lsls	r0, r3, #29
 80088e6:	d512      	bpl.n	800890e <__swsetup_r+0x7a>
 80088e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ea:	b141      	cbz	r1, 80088fe <__swsetup_r+0x6a>
 80088ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f0:	4299      	cmp	r1, r3
 80088f2:	d002      	beq.n	80088fa <__swsetup_r+0x66>
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff fd11 	bl	800831c <_free_r>
 80088fa:	2300      	movs	r3, #0
 80088fc:	6363      	str	r3, [r4, #52]	; 0x34
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0308 	orr.w	r3, r3, #8
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	b94b      	cbnz	r3, 800892e <__swsetup_r+0x9a>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008924:	d003      	beq.n	800892e <__swsetup_r+0x9a>
 8008926:	4621      	mov	r1, r4
 8008928:	4630      	mov	r0, r6
 800892a:	f000 f959 	bl	8008be0 <__smakebuf_r>
 800892e:	89a0      	ldrh	r0, [r4, #12]
 8008930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008934:	f010 0301 	ands.w	r3, r0, #1
 8008938:	d00a      	beq.n	8008950 <__swsetup_r+0xbc>
 800893a:	2300      	movs	r3, #0
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	6963      	ldr	r3, [r4, #20]
 8008940:	425b      	negs	r3, r3
 8008942:	61a3      	str	r3, [r4, #24]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b943      	cbnz	r3, 800895a <__swsetup_r+0xc6>
 8008948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800894c:	d1ba      	bne.n	80088c4 <__swsetup_r+0x30>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	0781      	lsls	r1, r0, #30
 8008952:	bf58      	it	pl
 8008954:	6963      	ldrpl	r3, [r4, #20]
 8008956:	60a3      	str	r3, [r4, #8]
 8008958:	e7f4      	b.n	8008944 <__swsetup_r+0xb0>
 800895a:	2000      	movs	r0, #0
 800895c:	e7f7      	b.n	800894e <__swsetup_r+0xba>
 800895e:	bf00      	nop
 8008960:	200000bc 	.word	0x200000bc
 8008964:	08009698 	.word	0x08009698
 8008968:	080096b8 	.word	0x080096b8
 800896c:	08009678 	.word	0x08009678

08008970 <__assert_func>:
 8008970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008972:	4614      	mov	r4, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <__assert_func+0x2c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4605      	mov	r5, r0
 800897c:	68d8      	ldr	r0, [r3, #12]
 800897e:	b14c      	cbz	r4, 8008994 <__assert_func+0x24>
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <__assert_func+0x30>)
 8008982:	9100      	str	r1, [sp, #0]
 8008984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008988:	4906      	ldr	r1, [pc, #24]	; (80089a4 <__assert_func+0x34>)
 800898a:	462b      	mov	r3, r5
 800898c:	f000 f8e0 	bl	8008b50 <fiprintf>
 8008990:	f000 f9a3 	bl	8008cda <abort>
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <__assert_func+0x38>)
 8008996:	461c      	mov	r4, r3
 8008998:	e7f3      	b.n	8008982 <__assert_func+0x12>
 800899a:	bf00      	nop
 800899c:	200000bc 	.word	0x200000bc
 80089a0:	08009845 	.word	0x08009845
 80089a4:	08009852 	.word	0x08009852
 80089a8:	08009880 	.word	0x08009880

080089ac <_close_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d06      	ldr	r5, [pc, #24]	; (80089c8 <_close_r+0x1c>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	f7fa f8df 	bl	8002b7a <_close>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_close_r+0x1a>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_close_r+0x1a>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20000504 	.word	0x20000504

080089cc <__sflush_r>:
 80089cc:	898a      	ldrh	r2, [r1, #12]
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	0710      	lsls	r0, r2, #28
 80089d6:	460c      	mov	r4, r1
 80089d8:	d458      	bmi.n	8008a8c <__sflush_r+0xc0>
 80089da:	684b      	ldr	r3, [r1, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dc05      	bgt.n	80089ec <__sflush_r+0x20>
 80089e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc02      	bgt.n	80089ec <__sflush_r+0x20>
 80089e6:	2000      	movs	r0, #0
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	d0f9      	beq.n	80089e6 <__sflush_r+0x1a>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089f8:	682f      	ldr	r7, [r5, #0]
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	d032      	beq.n	8008a64 <__sflush_r+0x98>
 80089fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	075a      	lsls	r2, r3, #29
 8008a04:	d505      	bpl.n	8008a12 <__sflush_r+0x46>
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	1ac0      	subs	r0, r0, r3
 8008a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a0c:	b10b      	cbz	r3, 8008a12 <__sflush_r+0x46>
 8008a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a10:	1ac0      	subs	r0, r0, r3
 8008a12:	2300      	movs	r3, #0
 8008a14:	4602      	mov	r2, r0
 8008a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a18:	6a21      	ldr	r1, [r4, #32]
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b0      	blx	r6
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	d106      	bne.n	8008a32 <__sflush_r+0x66>
 8008a24:	6829      	ldr	r1, [r5, #0]
 8008a26:	291d      	cmp	r1, #29
 8008a28:	d82c      	bhi.n	8008a84 <__sflush_r+0xb8>
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <__sflush_r+0x108>)
 8008a2c:	40ca      	lsrs	r2, r1
 8008a2e:	07d6      	lsls	r6, r2, #31
 8008a30:	d528      	bpl.n	8008a84 <__sflush_r+0xb8>
 8008a32:	2200      	movs	r2, #0
 8008a34:	6062      	str	r2, [r4, #4]
 8008a36:	04d9      	lsls	r1, r3, #19
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	d504      	bpl.n	8008a48 <__sflush_r+0x7c>
 8008a3e:	1c42      	adds	r2, r0, #1
 8008a40:	d101      	bne.n	8008a46 <__sflush_r+0x7a>
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	b903      	cbnz	r3, 8008a48 <__sflush_r+0x7c>
 8008a46:	6560      	str	r0, [r4, #84]	; 0x54
 8008a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a4a:	602f      	str	r7, [r5, #0]
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	d0ca      	beq.n	80089e6 <__sflush_r+0x1a>
 8008a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a54:	4299      	cmp	r1, r3
 8008a56:	d002      	beq.n	8008a5e <__sflush_r+0x92>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f7ff fc5f 	bl	800831c <_free_r>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	6360      	str	r0, [r4, #52]	; 0x34
 8008a62:	e7c1      	b.n	80089e8 <__sflush_r+0x1c>
 8008a64:	6a21      	ldr	r1, [r4, #32]
 8008a66:	2301      	movs	r3, #1
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b0      	blx	r6
 8008a6c:	1c41      	adds	r1, r0, #1
 8008a6e:	d1c7      	bne.n	8008a00 <__sflush_r+0x34>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0c4      	beq.n	8008a00 <__sflush_r+0x34>
 8008a76:	2b1d      	cmp	r3, #29
 8008a78:	d001      	beq.n	8008a7e <__sflush_r+0xb2>
 8008a7a:	2b16      	cmp	r3, #22
 8008a7c:	d101      	bne.n	8008a82 <__sflush_r+0xb6>
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	e7b1      	b.n	80089e6 <__sflush_r+0x1a>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	e7ad      	b.n	80089e8 <__sflush_r+0x1c>
 8008a8c:	690f      	ldr	r7, [r1, #16]
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d0a9      	beq.n	80089e6 <__sflush_r+0x1a>
 8008a92:	0793      	lsls	r3, r2, #30
 8008a94:	680e      	ldr	r6, [r1, #0]
 8008a96:	bf08      	it	eq
 8008a98:	694b      	ldreq	r3, [r1, #20]
 8008a9a:	600f      	str	r7, [r1, #0]
 8008a9c:	bf18      	it	ne
 8008a9e:	2300      	movne	r3, #0
 8008aa0:	eba6 0807 	sub.w	r8, r6, r7
 8008aa4:	608b      	str	r3, [r1, #8]
 8008aa6:	f1b8 0f00 	cmp.w	r8, #0
 8008aaa:	dd9c      	ble.n	80089e6 <__sflush_r+0x1a>
 8008aac:	6a21      	ldr	r1, [r4, #32]
 8008aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ab0:	4643      	mov	r3, r8
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b0      	blx	r6
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	dc06      	bgt.n	8008aca <__sflush_r+0xfe>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e78e      	b.n	80089e8 <__sflush_r+0x1c>
 8008aca:	4407      	add	r7, r0
 8008acc:	eba8 0800 	sub.w	r8, r8, r0
 8008ad0:	e7e9      	b.n	8008aa6 <__sflush_r+0xda>
 8008ad2:	bf00      	nop
 8008ad4:	20400001 	.word	0x20400001

08008ad8 <_fflush_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b913      	cbnz	r3, 8008ae8 <_fflush_r+0x10>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	b118      	cbz	r0, 8008af2 <_fflush_r+0x1a>
 8008aea:	6983      	ldr	r3, [r0, #24]
 8008aec:	b90b      	cbnz	r3, 8008af2 <_fflush_r+0x1a>
 8008aee:	f7fe ffcb 	bl	8007a88 <__sinit>
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <_fflush_r+0x6c>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d11b      	bne.n	8008b30 <_fflush_r+0x58>
 8008af8:	686c      	ldr	r4, [r5, #4]
 8008afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0ef      	beq.n	8008ae2 <_fflush_r+0xa>
 8008b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b04:	07d0      	lsls	r0, r2, #31
 8008b06:	d404      	bmi.n	8008b12 <_fflush_r+0x3a>
 8008b08:	0599      	lsls	r1, r3, #22
 8008b0a:	d402      	bmi.n	8008b12 <_fflush_r+0x3a>
 8008b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0e:	f7ff f85e 	bl	8007bce <__retarget_lock_acquire_recursive>
 8008b12:	4628      	mov	r0, r5
 8008b14:	4621      	mov	r1, r4
 8008b16:	f7ff ff59 	bl	80089cc <__sflush_r>
 8008b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b1c:	07da      	lsls	r2, r3, #31
 8008b1e:	4605      	mov	r5, r0
 8008b20:	d4e0      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	059b      	lsls	r3, r3, #22
 8008b26:	d4dd      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2a:	f7ff f851 	bl	8007bd0 <__retarget_lock_release_recursive>
 8008b2e:	e7d9      	b.n	8008ae4 <_fflush_r+0xc>
 8008b30:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <_fflush_r+0x70>)
 8008b32:	429c      	cmp	r4, r3
 8008b34:	d101      	bne.n	8008b3a <_fflush_r+0x62>
 8008b36:	68ac      	ldr	r4, [r5, #8]
 8008b38:	e7df      	b.n	8008afa <_fflush_r+0x22>
 8008b3a:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <_fflush_r+0x74>)
 8008b3c:	429c      	cmp	r4, r3
 8008b3e:	bf08      	it	eq
 8008b40:	68ec      	ldreq	r4, [r5, #12]
 8008b42:	e7da      	b.n	8008afa <_fflush_r+0x22>
 8008b44:	08009698 	.word	0x08009698
 8008b48:	080096b8 	.word	0x080096b8
 8008b4c:	08009678 	.word	0x08009678

08008b50 <fiprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	b503      	push	{r0, r1, lr}
 8008b54:	4601      	mov	r1, r0
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	4805      	ldr	r0, [pc, #20]	; (8008b70 <fiprintf+0x20>)
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	6800      	ldr	r0, [r0, #0]
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f7ff fcaf 	bl	80084c4 <_vfiprintf_r>
 8008b66:	b002      	add	sp, #8
 8008b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b6c:	b003      	add	sp, #12
 8008b6e:	4770      	bx	lr
 8008b70:	200000bc 	.word	0x200000bc

08008b74 <_lseek_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	; (8008b94 <_lseek_r+0x20>)
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7fa f820 	bl	8002bc8 <_lseek>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_lseek_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_lseek_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20000504 	.word	0x20000504

08008b98 <__swhatbuf_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460e      	mov	r6, r1
 8008b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	b096      	sub	sp, #88	; 0x58
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	da07      	bge.n	8008bba <__swhatbuf_r+0x22>
 8008baa:	2300      	movs	r3, #0
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	89b3      	ldrh	r3, [r6, #12]
 8008bb0:	061a      	lsls	r2, r3, #24
 8008bb2:	d410      	bmi.n	8008bd6 <__swhatbuf_r+0x3e>
 8008bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb8:	e00e      	b.n	8008bd8 <__swhatbuf_r+0x40>
 8008bba:	466a      	mov	r2, sp
 8008bbc:	f000 f894 	bl	8008ce8 <_fstat_r>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	dbf2      	blt.n	8008baa <__swhatbuf_r+0x12>
 8008bc4:	9a01      	ldr	r2, [sp, #4]
 8008bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bce:	425a      	negs	r2, r3
 8008bd0:	415a      	adcs	r2, r3
 8008bd2:	602a      	str	r2, [r5, #0]
 8008bd4:	e7ee      	b.n	8008bb4 <__swhatbuf_r+0x1c>
 8008bd6:	2340      	movs	r3, #64	; 0x40
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	b016      	add	sp, #88	; 0x58
 8008bde:	bd70      	pop	{r4, r5, r6, pc}

08008be0 <__smakebuf_r>:
 8008be0:	898b      	ldrh	r3, [r1, #12]
 8008be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008be4:	079d      	lsls	r5, r3, #30
 8008be6:	4606      	mov	r6, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	d507      	bpl.n	8008bfc <__smakebuf_r+0x1c>
 8008bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	6163      	str	r3, [r4, #20]
 8008bf8:	b002      	add	sp, #8
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	ab01      	add	r3, sp, #4
 8008bfe:	466a      	mov	r2, sp
 8008c00:	f7ff ffca 	bl	8008b98 <__swhatbuf_r>
 8008c04:	9900      	ldr	r1, [sp, #0]
 8008c06:	4605      	mov	r5, r0
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7ff fbd7 	bl	80083bc <_malloc_r>
 8008c0e:	b948      	cbnz	r0, 8008c24 <__smakebuf_r+0x44>
 8008c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c14:	059a      	lsls	r2, r3, #22
 8008c16:	d4ef      	bmi.n	8008bf8 <__smakebuf_r+0x18>
 8008c18:	f023 0303 	bic.w	r3, r3, #3
 8008c1c:	f043 0302 	orr.w	r3, r3, #2
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	e7e3      	b.n	8008bec <__smakebuf_r+0xc>
 8008c24:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <__smakebuf_r+0x7c>)
 8008c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	6020      	str	r0, [r4, #0]
 8008c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	9b00      	ldr	r3, [sp, #0]
 8008c34:	6163      	str	r3, [r4, #20]
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	6120      	str	r0, [r4, #16]
 8008c3a:	b15b      	cbz	r3, 8008c54 <__smakebuf_r+0x74>
 8008c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 f863 	bl	8008d0c <_isatty_r>
 8008c46:	b128      	cbz	r0, 8008c54 <__smakebuf_r+0x74>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	89a0      	ldrh	r0, [r4, #12]
 8008c56:	4305      	orrs	r5, r0
 8008c58:	81a5      	strh	r5, [r4, #12]
 8008c5a:	e7cd      	b.n	8008bf8 <__smakebuf_r+0x18>
 8008c5c:	08007a21 	.word	0x08007a21

08008c60 <__ascii_mbtowc>:
 8008c60:	b082      	sub	sp, #8
 8008c62:	b901      	cbnz	r1, 8008c66 <__ascii_mbtowc+0x6>
 8008c64:	a901      	add	r1, sp, #4
 8008c66:	b142      	cbz	r2, 8008c7a <__ascii_mbtowc+0x1a>
 8008c68:	b14b      	cbz	r3, 8008c7e <__ascii_mbtowc+0x1e>
 8008c6a:	7813      	ldrb	r3, [r2, #0]
 8008c6c:	600b      	str	r3, [r1, #0]
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	1e10      	subs	r0, r2, #0
 8008c72:	bf18      	it	ne
 8008c74:	2001      	movne	r0, #1
 8008c76:	b002      	add	sp, #8
 8008c78:	4770      	bx	lr
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	e7fb      	b.n	8008c76 <__ascii_mbtowc+0x16>
 8008c7e:	f06f 0001 	mvn.w	r0, #1
 8008c82:	e7f8      	b.n	8008c76 <__ascii_mbtowc+0x16>

08008c84 <__malloc_lock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_lock+0x8>)
 8008c86:	f7fe bfa2 	b.w	8007bce <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	200004fc 	.word	0x200004fc

08008c90 <__malloc_unlock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__malloc_unlock+0x8>)
 8008c92:	f7fe bf9d 	b.w	8007bd0 <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	200004fc 	.word	0x200004fc

08008c9c <_read_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d07      	ldr	r5, [pc, #28]	; (8008cbc <_read_r+0x20>)
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	602a      	str	r2, [r5, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f7f9 ff2c 	bl	8002b08 <_read>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_read_r+0x1e>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_read_r+0x1e>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20000504 	.word	0x20000504

08008cc0 <__ascii_wctomb>:
 8008cc0:	b149      	cbz	r1, 8008cd6 <__ascii_wctomb+0x16>
 8008cc2:	2aff      	cmp	r2, #255	; 0xff
 8008cc4:	bf85      	ittet	hi
 8008cc6:	238a      	movhi	r3, #138	; 0x8a
 8008cc8:	6003      	strhi	r3, [r0, #0]
 8008cca:	700a      	strbls	r2, [r1, #0]
 8008ccc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008cd0:	bf98      	it	ls
 8008cd2:	2001      	movls	r0, #1
 8008cd4:	4770      	bx	lr
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4770      	bx	lr

08008cda <abort>:
 8008cda:	b508      	push	{r3, lr}
 8008cdc:	2006      	movs	r0, #6
 8008cde:	f000 f84d 	bl	8008d7c <raise>
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	f7f9 ff06 	bl	8002af4 <_exit>

08008ce8 <_fstat_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	; (8008d08 <_fstat_r+0x20>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f7f9 ff4c 	bl	8002b92 <_fstat>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d102      	bne.n	8008d04 <_fstat_r+0x1c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b103      	cbz	r3, 8008d04 <_fstat_r+0x1c>
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	20000504 	.word	0x20000504

08008d0c <_isatty_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	; (8008d28 <_isatty_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f9 ff4b 	bl	8002bb2 <_isatty>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_isatty_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_isatty_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000504 	.word	0x20000504

08008d2c <_raise_r>:
 8008d2c:	291f      	cmp	r1, #31
 8008d2e:	b538      	push	{r3, r4, r5, lr}
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	d904      	bls.n	8008d40 <_raise_r+0x14>
 8008d36:	2316      	movs	r3, #22
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d42:	b112      	cbz	r2, 8008d4a <_raise_r+0x1e>
 8008d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d48:	b94b      	cbnz	r3, 8008d5e <_raise_r+0x32>
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f830 	bl	8008db0 <_getpid_r>
 8008d50:	462a      	mov	r2, r5
 8008d52:	4601      	mov	r1, r0
 8008d54:	4620      	mov	r0, r4
 8008d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5a:	f000 b817 	b.w	8008d8c <_kill_r>
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d00a      	beq.n	8008d78 <_raise_r+0x4c>
 8008d62:	1c59      	adds	r1, r3, #1
 8008d64:	d103      	bne.n	8008d6e <_raise_r+0x42>
 8008d66:	2316      	movs	r3, #22
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7e7      	b.n	8008d3e <_raise_r+0x12>
 8008d6e:	2400      	movs	r4, #0
 8008d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d74:	4628      	mov	r0, r5
 8008d76:	4798      	blx	r3
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e7e0      	b.n	8008d3e <_raise_r+0x12>

08008d7c <raise>:
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <raise+0xc>)
 8008d7e:	4601      	mov	r1, r0
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	f7ff bfd3 	b.w	8008d2c <_raise_r>
 8008d86:	bf00      	nop
 8008d88:	200000bc 	.word	0x200000bc

08008d8c <_kill_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d07      	ldr	r5, [pc, #28]	; (8008dac <_kill_r+0x20>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4604      	mov	r4, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f7f9 fe9b 	bl	8002ad4 <_kill>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d102      	bne.n	8008da8 <_kill_r+0x1c>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b103      	cbz	r3, 8008da8 <_kill_r+0x1c>
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	bf00      	nop
 8008dac:	20000504 	.word	0x20000504

08008db0 <_getpid_r>:
 8008db0:	f7f9 be88 	b.w	8002ac4 <_getpid>

08008db4 <lroundf>:
 8008db4:	ee10 3a10 	vmov	r3, s0
 8008db8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8008dc2:	bfb4      	ite	lt
 8008dc4:	f04f 30ff 	movlt.w	r0, #4294967295
 8008dc8:	2001      	movge	r0, #1
 8008dca:	291e      	cmp	r1, #30
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	dc18      	bgt.n	8008e02 <lroundf+0x4e>
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	da03      	bge.n	8008ddc <lroundf+0x28>
 8008dd4:	3101      	adds	r1, #1
 8008dd6:	bf18      	it	ne
 8008dd8:	2000      	movne	r0, #0
 8008dda:	bd10      	pop	{r4, pc}
 8008ddc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008de0:	2916      	cmp	r1, #22
 8008de2:	f443 0400 	orr.w	r4, r3, #8388608	; 0x800000
 8008de6:	bfdd      	ittte	le
 8008de8:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8008dec:	410b      	asrle	r3, r1
 8008dee:	191b      	addle	r3, r3, r4
 8008df0:	3a96      	subgt	r2, #150	; 0x96
 8008df2:	bfd6      	itet	le
 8008df4:	f1c1 0117 	rsble	r1, r1, #23
 8008df8:	fa04 f302 	lslgt.w	r3, r4, r2
 8008dfc:	40cb      	lsrle	r3, r1
 8008dfe:	4358      	muls	r0, r3
 8008e00:	e7eb      	b.n	8008dda <lroundf+0x26>
 8008e02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008e06:	ee17 0a90 	vmov	r0, s15
 8008e0a:	e7e6      	b.n	8008dda <lroundf+0x26>

08008e0c <acos>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	ed2d 8b02 	vpush	{d8}
 8008e12:	ec55 4b10 	vmov	r4, r5, d0
 8008e16:	f000 f867 	bl	8008ee8 <__ieee754_acos>
 8008e1a:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <acos+0x68>)
 8008e1c:	eeb0 8a40 	vmov.f32	s16, s0
 8008e20:	eef0 8a60 	vmov.f32	s17, s1
 8008e24:	f993 3000 	ldrsb.w	r3, [r3]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	d01c      	beq.n	8008e66 <acos+0x5a>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	462b      	mov	r3, r5
 8008e30:	4620      	mov	r0, r4
 8008e32:	4629      	mov	r1, r5
 8008e34:	f7f7 fe9a 	bl	8000b6c <__aeabi_dcmpun>
 8008e38:	b9a8      	cbnz	r0, 8008e66 <acos+0x5a>
 8008e3a:	ec45 4b10 	vmov	d0, r4, r5
 8008e3e:	f000 fb67 	bl	8009510 <fabs>
 8008e42:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <acos+0x6c>)
 8008e44:	ec51 0b10 	vmov	r0, r1, d0
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f7f7 fe85 	bl	8000b58 <__aeabi_dcmpgt>
 8008e4e:	b150      	cbz	r0, 8008e66 <acos+0x5a>
 8008e50:	f7fd fa94 	bl	800637c <__errno>
 8008e54:	ecbd 8b02 	vpop	{d8}
 8008e58:	2321      	movs	r3, #33	; 0x21
 8008e5a:	6003      	str	r3, [r0, #0]
 8008e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e60:	4806      	ldr	r0, [pc, #24]	; (8008e7c <acos+0x70>)
 8008e62:	f000 bb61 	b.w	8009528 <nan>
 8008e66:	eeb0 0a48 	vmov.f32	s0, s16
 8008e6a:	eef0 0a68 	vmov.f32	s1, s17
 8008e6e:	ecbd 8b02 	vpop	{d8}
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	2000028c 	.word	0x2000028c
 8008e78:	3ff00000 	.word	0x3ff00000
 8008e7c:	08009880 	.word	0x08009880

08008e80 <sqrt>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	ed2d 8b02 	vpush	{d8}
 8008e86:	ec55 4b10 	vmov	r4, r5, d0
 8008e8a:	f000 fa8d 	bl	80093a8 <__ieee754_sqrt>
 8008e8e:	4b15      	ldr	r3, [pc, #84]	; (8008ee4 <sqrt+0x64>)
 8008e90:	eeb0 8a40 	vmov.f32	s16, s0
 8008e94:	eef0 8a60 	vmov.f32	s17, s1
 8008e98:	f993 3000 	ldrsb.w	r3, [r3]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	d019      	beq.n	8008ed4 <sqrt+0x54>
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 fe60 	bl	8000b6c <__aeabi_dcmpun>
 8008eac:	b990      	cbnz	r0, 8008ed4 <sqrt+0x54>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 fe31 	bl	8000b1c <__aeabi_dcmplt>
 8008eba:	b158      	cbz	r0, 8008ed4 <sqrt+0x54>
 8008ebc:	f7fd fa5e 	bl	800637c <__errno>
 8008ec0:	2321      	movs	r3, #33	; 0x21
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f7f7 fcde 	bl	800088c <__aeabi_ddiv>
 8008ed0:	ec41 0b18 	vmov	d8, r0, r1
 8008ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ed8:	eef0 0a68 	vmov.f32	s1, s17
 8008edc:	ecbd 8b02 	vpop	{d8}
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000028c 	.word	0x2000028c

08008ee8 <__ieee754_acos>:
 8008ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ec55 4b10 	vmov	r4, r5, d0
 8008ef0:	49b7      	ldr	r1, [pc, #732]	; (80091d0 <__ieee754_acos+0x2e8>)
 8008ef2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	dd1b      	ble.n	8008f32 <__ieee754_acos+0x4a>
 8008efa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008efe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008f02:	4323      	orrs	r3, r4
 8008f04:	d106      	bne.n	8008f14 <__ieee754_acos+0x2c>
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	f300 8211 	bgt.w	800932e <__ieee754_acos+0x446>
 8008f0c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8009168 <__ieee754_acos+0x280>
 8008f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	ee10 2a10 	vmov	r2, s0
 8008f18:	462b      	mov	r3, r5
 8008f1a:	ee10 0a10 	vmov	r0, s0
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 f9d2 	bl	80002c8 <__aeabi_dsub>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	f7f7 fcb0 	bl	800088c <__aeabi_ddiv>
 8008f2c:	ec41 0b10 	vmov	d0, r0, r1
 8008f30:	e7ee      	b.n	8008f10 <__ieee754_acos+0x28>
 8008f32:	49a8      	ldr	r1, [pc, #672]	; (80091d4 <__ieee754_acos+0x2ec>)
 8008f34:	428b      	cmp	r3, r1
 8008f36:	f300 8087 	bgt.w	8009048 <__ieee754_acos+0x160>
 8008f3a:	4aa7      	ldr	r2, [pc, #668]	; (80091d8 <__ieee754_acos+0x2f0>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	f340 81f9 	ble.w	8009334 <__ieee754_acos+0x44c>
 8008f42:	ee10 2a10 	vmov	r2, s0
 8008f46:	ee10 0a10 	vmov	r0, s0
 8008f4a:	462b      	mov	r3, r5
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 fb73 	bl	8000638 <__aeabi_dmul>
 8008f52:	a387      	add	r3, pc, #540	; (adr r3, 8009170 <__ieee754_acos+0x288>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	f7f7 fb6c 	bl	8000638 <__aeabi_dmul>
 8008f60:	a385      	add	r3, pc, #532	; (adr r3, 8009178 <__ieee754_acos+0x290>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 f9b1 	bl	80002cc <__adddf3>
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	f7f7 fb63 	bl	8000638 <__aeabi_dmul>
 8008f72:	a383      	add	r3, pc, #524	; (adr r3, 8009180 <__ieee754_acos+0x298>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f9a6 	bl	80002c8 <__aeabi_dsub>
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	463b      	mov	r3, r7
 8008f80:	f7f7 fb5a 	bl	8000638 <__aeabi_dmul>
 8008f84:	a380      	add	r3, pc, #512	; (adr r3, 8009188 <__ieee754_acos+0x2a0>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f99f 	bl	80002cc <__adddf3>
 8008f8e:	4632      	mov	r2, r6
 8008f90:	463b      	mov	r3, r7
 8008f92:	f7f7 fb51 	bl	8000638 <__aeabi_dmul>
 8008f96:	a37e      	add	r3, pc, #504	; (adr r3, 8009190 <__ieee754_acos+0x2a8>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f7f7 f994 	bl	80002c8 <__aeabi_dsub>
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	f7f7 fb48 	bl	8000638 <__aeabi_dmul>
 8008fa8:	a37b      	add	r3, pc, #492	; (adr r3, 8009198 <__ieee754_acos+0x2b0>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 f98d 	bl	80002cc <__adddf3>
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	f7f7 fb3f 	bl	8000638 <__aeabi_dmul>
 8008fba:	a379      	add	r3, pc, #484	; (adr r3, 80091a0 <__ieee754_acos+0x2b8>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fb36 	bl	8000638 <__aeabi_dmul>
 8008fcc:	a376      	add	r3, pc, #472	; (adr r3, 80091a8 <__ieee754_acos+0x2c0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f979 	bl	80002c8 <__aeabi_dsub>
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	463b      	mov	r3, r7
 8008fda:	f7f7 fb2d 	bl	8000638 <__aeabi_dmul>
 8008fde:	a374      	add	r3, pc, #464	; (adr r3, 80091b0 <__ieee754_acos+0x2c8>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f972 	bl	80002cc <__adddf3>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	f7f7 fb24 	bl	8000638 <__aeabi_dmul>
 8008ff0:	a371      	add	r3, pc, #452	; (adr r3, 80091b8 <__ieee754_acos+0x2d0>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f967 	bl	80002c8 <__aeabi_dsub>
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	f7f7 fb1b 	bl	8000638 <__aeabi_dmul>
 8009002:	4b76      	ldr	r3, [pc, #472]	; (80091dc <__ieee754_acos+0x2f4>)
 8009004:	2200      	movs	r2, #0
 8009006:	f7f7 f961 	bl	80002cc <__adddf3>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fc3b 	bl	800088c <__aeabi_ddiv>
 8009016:	4622      	mov	r2, r4
 8009018:	462b      	mov	r3, r5
 800901a:	f7f7 fb0d 	bl	8000638 <__aeabi_dmul>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	a167      	add	r1, pc, #412	; (adr r1, 80091c0 <__ieee754_acos+0x2d8>)
 8009024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009028:	f7f7 f94e 	bl	80002c8 <__aeabi_dsub>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4620      	mov	r0, r4
 8009032:	4629      	mov	r1, r5
 8009034:	f7f7 f948 	bl	80002c8 <__aeabi_dsub>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	a162      	add	r1, pc, #392	; (adr r1, 80091c8 <__ieee754_acos+0x2e0>)
 800903e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009042:	f7f7 f941 	bl	80002c8 <__aeabi_dsub>
 8009046:	e771      	b.n	8008f2c <__ieee754_acos+0x44>
 8009048:	2d00      	cmp	r5, #0
 800904a:	f280 80cb 	bge.w	80091e4 <__ieee754_acos+0x2fc>
 800904e:	ee10 0a10 	vmov	r0, s0
 8009052:	4b62      	ldr	r3, [pc, #392]	; (80091dc <__ieee754_acos+0x2f4>)
 8009054:	2200      	movs	r2, #0
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 f938 	bl	80002cc <__adddf3>
 800905c:	4b60      	ldr	r3, [pc, #384]	; (80091e0 <__ieee754_acos+0x2f8>)
 800905e:	2200      	movs	r2, #0
 8009060:	f7f7 faea 	bl	8000638 <__aeabi_dmul>
 8009064:	a342      	add	r3, pc, #264	; (adr r3, 8009170 <__ieee754_acos+0x288>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	4604      	mov	r4, r0
 800906c:	460d      	mov	r5, r1
 800906e:	f7f7 fae3 	bl	8000638 <__aeabi_dmul>
 8009072:	a341      	add	r3, pc, #260	; (adr r3, 8009178 <__ieee754_acos+0x290>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 f928 	bl	80002cc <__adddf3>
 800907c:	4622      	mov	r2, r4
 800907e:	462b      	mov	r3, r5
 8009080:	f7f7 fada 	bl	8000638 <__aeabi_dmul>
 8009084:	a33e      	add	r3, pc, #248	; (adr r3, 8009180 <__ieee754_acos+0x298>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 f91d 	bl	80002c8 <__aeabi_dsub>
 800908e:	4622      	mov	r2, r4
 8009090:	462b      	mov	r3, r5
 8009092:	f7f7 fad1 	bl	8000638 <__aeabi_dmul>
 8009096:	a33c      	add	r3, pc, #240	; (adr r3, 8009188 <__ieee754_acos+0x2a0>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 f916 	bl	80002cc <__adddf3>
 80090a0:	4622      	mov	r2, r4
 80090a2:	462b      	mov	r3, r5
 80090a4:	f7f7 fac8 	bl	8000638 <__aeabi_dmul>
 80090a8:	a339      	add	r3, pc, #228	; (adr r3, 8009190 <__ieee754_acos+0x2a8>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7f7 f90b 	bl	80002c8 <__aeabi_dsub>
 80090b2:	4622      	mov	r2, r4
 80090b4:	462b      	mov	r3, r5
 80090b6:	f7f7 fabf 	bl	8000638 <__aeabi_dmul>
 80090ba:	a337      	add	r3, pc, #220	; (adr r3, 8009198 <__ieee754_acos+0x2b0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f7f7 f904 	bl	80002cc <__adddf3>
 80090c4:	4622      	mov	r2, r4
 80090c6:	462b      	mov	r3, r5
 80090c8:	f7f7 fab6 	bl	8000638 <__aeabi_dmul>
 80090cc:	ec45 4b10 	vmov	d0, r4, r5
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	f000 f968 	bl	80093a8 <__ieee754_sqrt>
 80090d8:	a331      	add	r3, pc, #196	; (adr r3, 80091a0 <__ieee754_acos+0x2b8>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	ec57 6b10 	vmov	r6, r7, d0
 80090e6:	f7f7 faa7 	bl	8000638 <__aeabi_dmul>
 80090ea:	a32f      	add	r3, pc, #188	; (adr r3, 80091a8 <__ieee754_acos+0x2c0>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f8ea 	bl	80002c8 <__aeabi_dsub>
 80090f4:	4622      	mov	r2, r4
 80090f6:	462b      	mov	r3, r5
 80090f8:	f7f7 fa9e 	bl	8000638 <__aeabi_dmul>
 80090fc:	a32c      	add	r3, pc, #176	; (adr r3, 80091b0 <__ieee754_acos+0x2c8>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8e3 	bl	80002cc <__adddf3>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 fa95 	bl	8000638 <__aeabi_dmul>
 800910e:	a32a      	add	r3, pc, #168	; (adr r3, 80091b8 <__ieee754_acos+0x2d0>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f7f7 f8d8 	bl	80002c8 <__aeabi_dsub>
 8009118:	4622      	mov	r2, r4
 800911a:	462b      	mov	r3, r5
 800911c:	f7f7 fa8c 	bl	8000638 <__aeabi_dmul>
 8009120:	4b2e      	ldr	r3, [pc, #184]	; (80091dc <__ieee754_acos+0x2f4>)
 8009122:	2200      	movs	r2, #0
 8009124:	f7f7 f8d2 	bl	80002cc <__adddf3>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fbac 	bl	800088c <__aeabi_ddiv>
 8009134:	4632      	mov	r2, r6
 8009136:	463b      	mov	r3, r7
 8009138:	f7f7 fa7e 	bl	8000638 <__aeabi_dmul>
 800913c:	a320      	add	r3, pc, #128	; (adr r3, 80091c0 <__ieee754_acos+0x2d8>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8c1 	bl	80002c8 <__aeabi_dsub>
 8009146:	4632      	mov	r2, r6
 8009148:	463b      	mov	r3, r7
 800914a:	f7f7 f8bf 	bl	80002cc <__adddf3>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	f7f7 f8bb 	bl	80002cc <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	a103      	add	r1, pc, #12	; (adr r1, 8009168 <__ieee754_acos+0x280>)
 800915c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009160:	e76f      	b.n	8009042 <__ieee754_acos+0x15a>
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	54442d18 	.word	0x54442d18
 800916c:	400921fb 	.word	0x400921fb
 8009170:	0dfdf709 	.word	0x0dfdf709
 8009174:	3f023de1 	.word	0x3f023de1
 8009178:	7501b288 	.word	0x7501b288
 800917c:	3f49efe0 	.word	0x3f49efe0
 8009180:	b5688f3b 	.word	0xb5688f3b
 8009184:	3fa48228 	.word	0x3fa48228
 8009188:	0e884455 	.word	0x0e884455
 800918c:	3fc9c155 	.word	0x3fc9c155
 8009190:	03eb6f7d 	.word	0x03eb6f7d
 8009194:	3fd4d612 	.word	0x3fd4d612
 8009198:	55555555 	.word	0x55555555
 800919c:	3fc55555 	.word	0x3fc55555
 80091a0:	b12e9282 	.word	0xb12e9282
 80091a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80091a8:	1b8d0159 	.word	0x1b8d0159
 80091ac:	3fe6066c 	.word	0x3fe6066c
 80091b0:	9c598ac8 	.word	0x9c598ac8
 80091b4:	40002ae5 	.word	0x40002ae5
 80091b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80091bc:	40033a27 	.word	0x40033a27
 80091c0:	33145c07 	.word	0x33145c07
 80091c4:	3c91a626 	.word	0x3c91a626
 80091c8:	54442d18 	.word	0x54442d18
 80091cc:	3ff921fb 	.word	0x3ff921fb
 80091d0:	3fefffff 	.word	0x3fefffff
 80091d4:	3fdfffff 	.word	0x3fdfffff
 80091d8:	3c600000 	.word	0x3c600000
 80091dc:	3ff00000 	.word	0x3ff00000
 80091e0:	3fe00000 	.word	0x3fe00000
 80091e4:	ee10 2a10 	vmov	r2, s0
 80091e8:	462b      	mov	r3, r5
 80091ea:	496d      	ldr	r1, [pc, #436]	; (80093a0 <__ieee754_acos+0x4b8>)
 80091ec:	2000      	movs	r0, #0
 80091ee:	f7f7 f86b 	bl	80002c8 <__aeabi_dsub>
 80091f2:	4b6c      	ldr	r3, [pc, #432]	; (80093a4 <__ieee754_acos+0x4bc>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	f7f7 fa1f 	bl	8000638 <__aeabi_dmul>
 80091fa:	4604      	mov	r4, r0
 80091fc:	460d      	mov	r5, r1
 80091fe:	ec45 4b10 	vmov	d0, r4, r5
 8009202:	f000 f8d1 	bl	80093a8 <__ieee754_sqrt>
 8009206:	a34e      	add	r3, pc, #312	; (adr r3, 8009340 <__ieee754_acos+0x458>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	ec59 8b10 	vmov	r8, r9, d0
 8009214:	f7f7 fa10 	bl	8000638 <__aeabi_dmul>
 8009218:	a34b      	add	r3, pc, #300	; (adr r3, 8009348 <__ieee754_acos+0x460>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f855 	bl	80002cc <__adddf3>
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	f7f7 fa07 	bl	8000638 <__aeabi_dmul>
 800922a:	a349      	add	r3, pc, #292	; (adr r3, 8009350 <__ieee754_acos+0x468>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f7 f84a 	bl	80002c8 <__aeabi_dsub>
 8009234:	4622      	mov	r2, r4
 8009236:	462b      	mov	r3, r5
 8009238:	f7f7 f9fe 	bl	8000638 <__aeabi_dmul>
 800923c:	a346      	add	r3, pc, #280	; (adr r3, 8009358 <__ieee754_acos+0x470>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 f843 	bl	80002cc <__adddf3>
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	f7f7 f9f5 	bl	8000638 <__aeabi_dmul>
 800924e:	a344      	add	r3, pc, #272	; (adr r3, 8009360 <__ieee754_acos+0x478>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 f838 	bl	80002c8 <__aeabi_dsub>
 8009258:	4622      	mov	r2, r4
 800925a:	462b      	mov	r3, r5
 800925c:	f7f7 f9ec 	bl	8000638 <__aeabi_dmul>
 8009260:	a341      	add	r3, pc, #260	; (adr r3, 8009368 <__ieee754_acos+0x480>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f831 	bl	80002cc <__adddf3>
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f9e3 	bl	8000638 <__aeabi_dmul>
 8009272:	a33f      	add	r3, pc, #252	; (adr r3, 8009370 <__ieee754_acos+0x488>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	4682      	mov	sl, r0
 800927a:	468b      	mov	fp, r1
 800927c:	4620      	mov	r0, r4
 800927e:	4629      	mov	r1, r5
 8009280:	f7f7 f9da 	bl	8000638 <__aeabi_dmul>
 8009284:	a33c      	add	r3, pc, #240	; (adr r3, 8009378 <__ieee754_acos+0x490>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f7 f81d 	bl	80002c8 <__aeabi_dsub>
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	f7f7 f9d1 	bl	8000638 <__aeabi_dmul>
 8009296:	a33a      	add	r3, pc, #232	; (adr r3, 8009380 <__ieee754_acos+0x498>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f7 f816 	bl	80002cc <__adddf3>
 80092a0:	4622      	mov	r2, r4
 80092a2:	462b      	mov	r3, r5
 80092a4:	f7f7 f9c8 	bl	8000638 <__aeabi_dmul>
 80092a8:	a337      	add	r3, pc, #220	; (adr r3, 8009388 <__ieee754_acos+0x4a0>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f80b 	bl	80002c8 <__aeabi_dsub>
 80092b2:	4622      	mov	r2, r4
 80092b4:	462b      	mov	r3, r5
 80092b6:	f7f7 f9bf 	bl	8000638 <__aeabi_dmul>
 80092ba:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <__ieee754_acos+0x4b8>)
 80092bc:	2200      	movs	r2, #0
 80092be:	f7f7 f805 	bl	80002cc <__adddf3>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4650      	mov	r0, sl
 80092c8:	4659      	mov	r1, fp
 80092ca:	f7f7 fadf 	bl	800088c <__aeabi_ddiv>
 80092ce:	4642      	mov	r2, r8
 80092d0:	464b      	mov	r3, r9
 80092d2:	f7f7 f9b1 	bl	8000638 <__aeabi_dmul>
 80092d6:	2600      	movs	r6, #0
 80092d8:	4682      	mov	sl, r0
 80092da:	468b      	mov	fp, r1
 80092dc:	4632      	mov	r2, r6
 80092de:	464b      	mov	r3, r9
 80092e0:	4630      	mov	r0, r6
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4620      	mov	r0, r4
 80092ee:	4629      	mov	r1, r5
 80092f0:	f7f6 ffea 	bl	80002c8 <__aeabi_dsub>
 80092f4:	4632      	mov	r2, r6
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	464b      	mov	r3, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f6 ffe4 	bl	80002cc <__adddf3>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	f7f7 fabe 	bl	800088c <__aeabi_ddiv>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4650      	mov	r0, sl
 8009316:	4659      	mov	r1, fp
 8009318:	f7f6 ffd8 	bl	80002cc <__adddf3>
 800931c:	4632      	mov	r2, r6
 800931e:	464b      	mov	r3, r9
 8009320:	f7f6 ffd4 	bl	80002cc <__adddf3>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	f7f6 ffd0 	bl	80002cc <__adddf3>
 800932c:	e5fe      	b.n	8008f2c <__ieee754_acos+0x44>
 800932e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009390 <__ieee754_acos+0x4a8>
 8009332:	e5ed      	b.n	8008f10 <__ieee754_acos+0x28>
 8009334:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009398 <__ieee754_acos+0x4b0>
 8009338:	e5ea      	b.n	8008f10 <__ieee754_acos+0x28>
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w
 8009340:	0dfdf709 	.word	0x0dfdf709
 8009344:	3f023de1 	.word	0x3f023de1
 8009348:	7501b288 	.word	0x7501b288
 800934c:	3f49efe0 	.word	0x3f49efe0
 8009350:	b5688f3b 	.word	0xb5688f3b
 8009354:	3fa48228 	.word	0x3fa48228
 8009358:	0e884455 	.word	0x0e884455
 800935c:	3fc9c155 	.word	0x3fc9c155
 8009360:	03eb6f7d 	.word	0x03eb6f7d
 8009364:	3fd4d612 	.word	0x3fd4d612
 8009368:	55555555 	.word	0x55555555
 800936c:	3fc55555 	.word	0x3fc55555
 8009370:	b12e9282 	.word	0xb12e9282
 8009374:	3fb3b8c5 	.word	0x3fb3b8c5
 8009378:	1b8d0159 	.word	0x1b8d0159
 800937c:	3fe6066c 	.word	0x3fe6066c
 8009380:	9c598ac8 	.word	0x9c598ac8
 8009384:	40002ae5 	.word	0x40002ae5
 8009388:	1c8a2d4b 	.word	0x1c8a2d4b
 800938c:	40033a27 	.word	0x40033a27
	...
 8009398:	54442d18 	.word	0x54442d18
 800939c:	3ff921fb 	.word	0x3ff921fb
 80093a0:	3ff00000 	.word	0x3ff00000
 80093a4:	3fe00000 	.word	0x3fe00000

080093a8 <__ieee754_sqrt>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	ec55 4b10 	vmov	r4, r5, d0
 80093b0:	4e56      	ldr	r6, [pc, #344]	; (800950c <__ieee754_sqrt+0x164>)
 80093b2:	43ae      	bics	r6, r5
 80093b4:	ee10 0a10 	vmov	r0, s0
 80093b8:	ee10 3a10 	vmov	r3, s0
 80093bc:	4629      	mov	r1, r5
 80093be:	462a      	mov	r2, r5
 80093c0:	d110      	bne.n	80093e4 <__ieee754_sqrt+0x3c>
 80093c2:	ee10 2a10 	vmov	r2, s0
 80093c6:	462b      	mov	r3, r5
 80093c8:	f7f7 f936 	bl	8000638 <__aeabi_dmul>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	f7f6 ff7a 	bl	80002cc <__adddf3>
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	ec45 4b10 	vmov	d0, r4, r5
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	dc10      	bgt.n	800940a <__ieee754_sqrt+0x62>
 80093e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80093ec:	4330      	orrs	r0, r6
 80093ee:	d0f5      	beq.n	80093dc <__ieee754_sqrt+0x34>
 80093f0:	b15d      	cbz	r5, 800940a <__ieee754_sqrt+0x62>
 80093f2:	ee10 2a10 	vmov	r2, s0
 80093f6:	462b      	mov	r3, r5
 80093f8:	ee10 0a10 	vmov	r0, s0
 80093fc:	f7f6 ff64 	bl	80002c8 <__aeabi_dsub>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	f7f7 fa42 	bl	800088c <__aeabi_ddiv>
 8009408:	e7e6      	b.n	80093d8 <__ieee754_sqrt+0x30>
 800940a:	1509      	asrs	r1, r1, #20
 800940c:	d076      	beq.n	80094fc <__ieee754_sqrt+0x154>
 800940e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009412:	07ce      	lsls	r6, r1, #31
 8009414:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009418:	bf5e      	ittt	pl
 800941a:	0fda      	lsrpl	r2, r3, #31
 800941c:	005b      	lslpl	r3, r3, #1
 800941e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009422:	0fda      	lsrs	r2, r3, #31
 8009424:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009428:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800942c:	2000      	movs	r0, #0
 800942e:	106d      	asrs	r5, r5, #1
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	f04f 0e16 	mov.w	lr, #22
 8009436:	4684      	mov	ip, r0
 8009438:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800943c:	eb0c 0401 	add.w	r4, ip, r1
 8009440:	4294      	cmp	r4, r2
 8009442:	bfde      	ittt	le
 8009444:	1b12      	suble	r2, r2, r4
 8009446:	eb04 0c01 	addle.w	ip, r4, r1
 800944a:	1840      	addle	r0, r0, r1
 800944c:	0052      	lsls	r2, r2, #1
 800944e:	f1be 0e01 	subs.w	lr, lr, #1
 8009452:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009456:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800945a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800945e:	d1ed      	bne.n	800943c <__ieee754_sqrt+0x94>
 8009460:	4671      	mov	r1, lr
 8009462:	2720      	movs	r7, #32
 8009464:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009468:	4562      	cmp	r2, ip
 800946a:	eb04 060e 	add.w	r6, r4, lr
 800946e:	dc02      	bgt.n	8009476 <__ieee754_sqrt+0xce>
 8009470:	d113      	bne.n	800949a <__ieee754_sqrt+0xf2>
 8009472:	429e      	cmp	r6, r3
 8009474:	d811      	bhi.n	800949a <__ieee754_sqrt+0xf2>
 8009476:	2e00      	cmp	r6, #0
 8009478:	eb06 0e04 	add.w	lr, r6, r4
 800947c:	da43      	bge.n	8009506 <__ieee754_sqrt+0x15e>
 800947e:	f1be 0f00 	cmp.w	lr, #0
 8009482:	db40      	blt.n	8009506 <__ieee754_sqrt+0x15e>
 8009484:	f10c 0801 	add.w	r8, ip, #1
 8009488:	eba2 020c 	sub.w	r2, r2, ip
 800948c:	429e      	cmp	r6, r3
 800948e:	bf88      	it	hi
 8009490:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009494:	1b9b      	subs	r3, r3, r6
 8009496:	4421      	add	r1, r4
 8009498:	46c4      	mov	ip, r8
 800949a:	0052      	lsls	r2, r2, #1
 800949c:	3f01      	subs	r7, #1
 800949e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80094a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80094a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094aa:	d1dd      	bne.n	8009468 <__ieee754_sqrt+0xc0>
 80094ac:	4313      	orrs	r3, r2
 80094ae:	d006      	beq.n	80094be <__ieee754_sqrt+0x116>
 80094b0:	1c4c      	adds	r4, r1, #1
 80094b2:	bf13      	iteet	ne
 80094b4:	3101      	addne	r1, #1
 80094b6:	3001      	addeq	r0, #1
 80094b8:	4639      	moveq	r1, r7
 80094ba:	f021 0101 	bicne.w	r1, r1, #1
 80094be:	1043      	asrs	r3, r0, #1
 80094c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094c4:	0849      	lsrs	r1, r1, #1
 80094c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80094ca:	07c2      	lsls	r2, r0, #31
 80094cc:	bf48      	it	mi
 80094ce:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80094d2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80094d6:	460c      	mov	r4, r1
 80094d8:	463d      	mov	r5, r7
 80094da:	e77f      	b.n	80093dc <__ieee754_sqrt+0x34>
 80094dc:	0ada      	lsrs	r2, r3, #11
 80094de:	3815      	subs	r0, #21
 80094e0:	055b      	lsls	r3, r3, #21
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	d0fa      	beq.n	80094dc <__ieee754_sqrt+0x134>
 80094e6:	02d7      	lsls	r7, r2, #11
 80094e8:	d50a      	bpl.n	8009500 <__ieee754_sqrt+0x158>
 80094ea:	f1c1 0420 	rsb	r4, r1, #32
 80094ee:	fa23 f404 	lsr.w	r4, r3, r4
 80094f2:	1e4d      	subs	r5, r1, #1
 80094f4:	408b      	lsls	r3, r1
 80094f6:	4322      	orrs	r2, r4
 80094f8:	1b41      	subs	r1, r0, r5
 80094fa:	e788      	b.n	800940e <__ieee754_sqrt+0x66>
 80094fc:	4608      	mov	r0, r1
 80094fe:	e7f0      	b.n	80094e2 <__ieee754_sqrt+0x13a>
 8009500:	0052      	lsls	r2, r2, #1
 8009502:	3101      	adds	r1, #1
 8009504:	e7ef      	b.n	80094e6 <__ieee754_sqrt+0x13e>
 8009506:	46e0      	mov	r8, ip
 8009508:	e7be      	b.n	8009488 <__ieee754_sqrt+0xe0>
 800950a:	bf00      	nop
 800950c:	7ff00000 	.word	0x7ff00000

08009510 <fabs>:
 8009510:	ec51 0b10 	vmov	r0, r1, d0
 8009514:	ee10 2a10 	vmov	r2, s0
 8009518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800951c:	ec43 2b10 	vmov	d0, r2, r3
 8009520:	4770      	bx	lr
 8009522:	0000      	movs	r0, r0
 8009524:	0000      	movs	r0, r0
	...

08009528 <nan>:
 8009528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009530 <nan+0x8>
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	00000000 	.word	0x00000000
 8009534:	7ff80000 	.word	0x7ff80000

08009538 <_init>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr

08009544 <_fini>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr
